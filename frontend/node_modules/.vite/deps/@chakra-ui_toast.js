"use client";
import {
  AnimatePresence,
  Global,
  ThemeContext,
  ThemeProvider,
  keyframes,
  motion,
  newStyled,
  parseToRgba,
  require_lodash,
  require_react_fast_compare,
  toHex,
  transparentize,
  useIsPresent
} from "./chunk-HRJMG7XA.js";
import {
  require_jsx_runtime
} from "./chunk-NRBATONI.js";
import {
  require_react_dom
} from "./chunk-GKJBSOWT.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@chakra-ui/toast/dist/chunk-LDADOVIM.mjs
var findById = (arr, id) => arr.find((toast) => toast.id === id);
function findToast(toasts, id) {
  const position4 = getToastPosition(toasts, id);
  const index = position4 ? toasts[position4].findIndex((toast) => toast.id === id) : -1;
  return {
    position: position4,
    index
  };
}
function getToastPosition(toasts, id) {
  for (const [position4, values] of Object.entries(toasts)) {
    if (findById(values, id)) {
      return position4;
    }
  }
}
function getToastStyle(position4) {
  const isRighty = position4.includes("right");
  const isLefty = position4.includes("left");
  let alignItems = "center";
  if (isRighty)
    alignItems = "flex-end";
  if (isLefty)
    alignItems = "flex-start";
  return {
    display: "flex",
    flexDirection: "column",
    alignItems
  };
}
function getToastListStyle(position4) {
  const isTopOrBottom = position4 === "top" || position4 === "bottom";
  const margin = isTopOrBottom ? "0 auto" : void 0;
  const top = position4.includes("top") ? "env(safe-area-inset-top, 0px)" : void 0;
  const bottom = position4.includes("bottom") ? "env(safe-area-inset-bottom, 0px)" : void 0;
  const right = !position4.includes("left") ? "env(safe-area-inset-right, 0px)" : void 0;
  const left = !position4.includes("right") ? "env(safe-area-inset-left, 0px)" : void 0;
  return {
    position: "fixed",
    zIndex: "var(--toast-z-index, 5500)",
    pointerEvents: "none",
    display: "flex",
    flexDirection: "column",
    margin,
    top,
    bottom,
    right,
    left
  };
}

// node_modules/@chakra-ui/react-use-timeout/dist/index.mjs
var import_react2 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/react-use-callback-ref/dist/index.mjs
var import_react = __toESM(require_react(), 1);
function useCallbackRef(callback, deps = []) {
  const callbackRef = (0, import_react.useRef)(callback);
  (0, import_react.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react.useCallback)((...args) => {
    var _a10;
    return (_a10 = callbackRef.current) == null ? void 0 : _a10.call(callbackRef, ...args);
  }, deps);
}

// node_modules/@chakra-ui/react-use-timeout/dist/index.mjs
function useTimeout(callback, delay) {
  const fn = useCallbackRef(callback);
  (0, import_react2.useEffect)(() => {
    if (delay == null)
      return void 0;
    let timeoutId = null;
    timeoutId = window.setTimeout(() => {
      fn();
    }, delay);
    return () => {
      if (timeoutId) {
        window.clearTimeout(timeoutId);
      }
    };
  }, [delay, fn]);
}

// node_modules/@chakra-ui/react-use-update-effect/dist/index.mjs
var import_react3 = __toESM(require_react(), 1);
function useUpdateEffect(callback, deps) {
  const renderCycleRef = (0, import_react3.useRef)(false);
  const effectCycleRef = (0, import_react3.useRef)(false);
  (0, import_react3.useEffect)(() => {
    const mounted = renderCycleRef.current;
    const run = mounted && effectCycleRef.current;
    if (run) {
      return callback();
    }
    effectCycleRef.current = true;
  }, deps);
  (0, import_react3.useEffect)(() => {
    renderCycleRef.current = true;
    return () => {
      renderCycleRef.current = false;
    };
  }, []);
}

// node_modules/@chakra-ui/shared-utils/dist/index.mjs
var cx = (...classNames2) => classNames2.filter(Boolean).join(" ");
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function") && !Array.isArray(value);
}
function runIfFn(valueOrFn, ...args) {
  return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
var isFunction = (value) => typeof value === "function";

// node_modules/@chakra-ui/system/dist/chunk-UIGT7YZF.mjs
var import_react5 = __toESM(require_react(), 1);
function useTheme() {
  const theme3 = (0, import_react5.useContext)(
    ThemeContext
  );
  if (!theme3) {
    throw Error(
      "useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`"
    );
  }
  return theme3;
}

// node_modules/@chakra-ui/color-mode/dist/chunk-UQDW7KKV.mjs
var import_react6 = __toESM(require_react(), 1);
var ColorModeContext = (0, import_react6.createContext)({});
ColorModeContext.displayName = "ColorModeContext";
function useColorMode() {
  const context = (0, import_react6.useContext)(ColorModeContext);
  if (context === void 0) {
    throw new Error("useColorMode must be used within a ColorModeProvider");
  }
  return context;
}

// node_modules/@chakra-ui/color-mode/dist/chunk-X7ZBZ4KW.mjs
var classNames = {
  light: "chakra-ui-light",
  dark: "chakra-ui-dark"
};
function getColorModeUtils(options = {}) {
  const { preventTransition = true } = options;
  const utils = {
    setDataset: (value) => {
      const cleanup = preventTransition ? utils.preventTransition() : void 0;
      document.documentElement.dataset.theme = value;
      document.documentElement.style.colorScheme = value;
      cleanup == null ? void 0 : cleanup();
    },
    setClassName(dark) {
      document.body.classList.add(dark ? classNames.dark : classNames.light);
      document.body.classList.remove(dark ? classNames.light : classNames.dark);
    },
    query() {
      return window.matchMedia("(prefers-color-scheme: dark)");
    },
    getSystemTheme(fallback) {
      var _a10;
      const dark = (_a10 = utils.query().matches) != null ? _a10 : fallback === "dark";
      return dark ? "dark" : "light";
    },
    addListener(fn) {
      const mql = utils.query();
      const listener = (e) => {
        fn(e.matches ? "dark" : "light");
      };
      if (typeof mql.addListener === "function")
        mql.addListener(listener);
      else
        mql.addEventListener("change", listener);
      return () => {
        if (typeof mql.removeListener === "function")
          mql.removeListener(listener);
        else
          mql.removeEventListener("change", listener);
      };
    },
    preventTransition() {
      const css2 = document.createElement("style");
      css2.appendChild(
        document.createTextNode(
          `*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}`
        )
      );
      document.head.appendChild(css2);
      return () => {
        ;
        (() => window.getComputedStyle(document.body))();
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            document.head.removeChild(css2);
          });
        });
      };
    }
  };
  return utils;
}

// node_modules/@chakra-ui/color-mode/dist/chunk-44OWBZ77.mjs
var STORAGE_KEY = "chakra-ui-color-mode";
function createLocalStorageManager(key) {
  return {
    ssr: false,
    type: "localStorage",
    get(init) {
      if (!(globalThis == null ? void 0 : globalThis.document))
        return init;
      let value;
      try {
        value = localStorage.getItem(key) || init;
      } catch (e) {
      }
      return value || init;
    },
    set(value) {
      try {
        localStorage.setItem(key, value);
      } catch (e) {
      }
    }
  };
}
var localStorageManager = createLocalStorageManager(STORAGE_KEY);
function parseCookie(cookie, key) {
  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));
  return match == null ? void 0 : match[2];
}
function createCookieStorageManager(key, cookie) {
  return {
    ssr: !!cookie,
    type: "cookie",
    get(init) {
      if (cookie)
        return parseCookie(cookie, key);
      if (!(globalThis == null ? void 0 : globalThis.document))
        return init;
      return parseCookie(document.cookie, key) || init;
    },
    set(value) {
      document.cookie = `${key}=${value}; max-age=31536000; path=/`;
    }
  };
}
var cookieStorageManager = createCookieStorageManager(STORAGE_KEY);

// node_modules/@chakra-ui/react-use-safe-layout-effect/dist/index.mjs
var import_react7 = __toESM(require_react(), 1);
var useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? import_react7.useLayoutEffect : import_react7.useEffect;

// node_modules/@chakra-ui/color-mode/dist/chunk-AMBGAKG2.mjs
var import_react8 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var noop = () => {
};
function getTheme(manager, fallback) {
  return manager.type === "cookie" && manager.ssr ? manager.get(fallback) : fallback;
}
function ColorModeProvider(props) {
  const {
    value,
    children,
    options: {
      useSystemColorMode,
      initialColorMode,
      disableTransitionOnChange
    } = {},
    colorModeManager = localStorageManager
  } = props;
  const defaultColorMode = initialColorMode === "dark" ? "dark" : "light";
  const [colorMode, rawSetColorMode] = (0, import_react8.useState)(
    () => getTheme(colorModeManager, defaultColorMode)
  );
  const [resolvedColorMode, setResolvedColorMode] = (0, import_react8.useState)(
    () => getTheme(colorModeManager)
  );
  const { getSystemTheme, setClassName, setDataset, addListener } = (0, import_react8.useMemo)(
    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),
    [disableTransitionOnChange]
  );
  const resolvedValue = initialColorMode === "system" && !colorMode ? resolvedColorMode : colorMode;
  const setColorMode = (0, import_react8.useCallback)(
    (value2) => {
      const resolved = value2 === "system" ? getSystemTheme() : value2;
      rawSetColorMode(resolved);
      setClassName(resolved === "dark");
      setDataset(resolved);
      colorModeManager.set(resolved);
    },
    [colorModeManager, getSystemTheme, setClassName, setDataset]
  );
  useSafeLayoutEffect(() => {
    if (initialColorMode === "system") {
      setResolvedColorMode(getSystemTheme());
    }
  }, []);
  (0, import_react8.useEffect)(() => {
    const managerValue = colorModeManager.get();
    if (managerValue) {
      setColorMode(managerValue);
      return;
    }
    if (initialColorMode === "system") {
      setColorMode("system");
      return;
    }
    setColorMode(defaultColorMode);
  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);
  const toggleColorMode = (0, import_react8.useCallback)(() => {
    setColorMode(resolvedValue === "dark" ? "light" : "dark");
  }, [resolvedValue, setColorMode]);
  (0, import_react8.useEffect)(() => {
    if (!useSystemColorMode)
      return;
    return addListener(setColorMode);
  }, [useSystemColorMode, addListener, setColorMode]);
  const context = (0, import_react8.useMemo)(
    () => ({
      colorMode: value != null ? value : resolvedValue,
      toggleColorMode: value ? noop : toggleColorMode,
      setColorMode: value ? noop : setColorMode,
      forced: value !== void 0
    }),
    [resolvedValue, toggleColorMode, setColorMode, value]
  );
  return (0, import_jsx_runtime.jsx)(ColorModeContext.Provider, { value: context, children });
}
ColorModeProvider.displayName = "ColorModeProvider";
function DarkMode(props) {
  const context = (0, import_react8.useMemo)(
    () => ({
      colorMode: "dark",
      toggleColorMode: noop,
      setColorMode: noop,
      forced: true
    }),
    []
  );
  return (0, import_jsx_runtime.jsx)(ColorModeContext.Provider, { value: context, ...props });
}
DarkMode.displayName = "DarkMode";
function LightMode(props) {
  const context = (0, import_react8.useMemo)(
    () => ({
      colorMode: "light",
      toggleColorMode: noop,
      setColorMode: noop,
      forced: true
    }),
    []
  );
  return (0, import_jsx_runtime.jsx)(ColorModeContext.Provider, { value: context, ...props });
}
LightMode.displayName = "LightMode";

// node_modules/@chakra-ui/color-mode/dist/chunk-WP4V2BSL.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/system/dist/chunk-7FWEOSAE.mjs
function useChakra() {
  const colorModeResult = useColorMode();
  const theme3 = useTheme();
  return { ...colorModeResult, theme: theme3 };
}

// node_modules/@chakra-ui/system/node_modules/@chakra-ui/styled-system/dist/index.mjs
var import_lodash = __toESM(require_lodash(), 1);
var import_lodash2 = __toESM(require_lodash(), 1);
var import_lodash3 = __toESM(require_lodash(), 1);
var import_lodash4 = __toESM(require_lodash(), 1);
var isImportant = (value) => /!(important)?$/.test(value);
var withoutImportant = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
var tokenToCSSVar = (scale, value) => (theme3) => {
  const valueStr = String(value);
  const important = isImportant(valueStr);
  const valueWithoutImportant = withoutImportant(valueStr);
  const key = scale ? `${scale}.${valueWithoutImportant}` : valueWithoutImportant;
  let transformed = isObject(theme3.__cssMap) && key in theme3.__cssMap ? theme3.__cssMap[key].varRef : value;
  transformed = withoutImportant(transformed);
  return important ? `${transformed} !important` : transformed;
};
function createTransform(options) {
  const { scale, transform: transform22, compose: compose3 } = options;
  const fn = (value, theme3) => {
    var _a10;
    const _value = tokenToCSSVar(scale, value)(theme3);
    let result = (_a10 = transform22 == null ? void 0 : transform22(_value, theme3)) != null ? _a10 : _value;
    if (compose3) {
      result = compose3(result, theme3);
    }
    return result;
  };
  return fn;
}
var pipe = (...fns) => (v) => fns.reduce((a, b) => b(a), v);
function toConfig(scale, transform22) {
  return (property) => {
    const result = { property, scale };
    result.transform = createTransform({
      scale,
      transform: transform22
    });
    return result;
  };
}
var getRtl = ({ rtl, ltr }) => (theme3) => theme3.direction === "rtl" ? rtl : ltr;
function logical(options) {
  const { property, scale, transform: transform22 } = options;
  return {
    scale,
    property: getRtl(property),
    transform: scale ? createTransform({
      scale,
      compose: transform22
    }) : transform22
  };
}
var transformTemplate = [
  "rotate(var(--chakra-rotate, 0))",
  "scaleX(var(--chakra-scale-x, 1))",
  "scaleY(var(--chakra-scale-y, 1))",
  "skewX(var(--chakra-skew-x, 0))",
  "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate() {
  return [
    "translateX(var(--chakra-translate-x, 0))",
    "translateY(var(--chakra-translate-y, 0))",
    ...transformTemplate
  ].join(" ");
}
function getTransformGpuTemplate() {
  return [
    "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
    ...transformTemplate
  ].join(" ");
}
var filterTemplate = {
  "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
  filter: [
    "var(--chakra-blur)",
    "var(--chakra-brightness)",
    "var(--chakra-contrast)",
    "var(--chakra-grayscale)",
    "var(--chakra-hue-rotate)",
    "var(--chakra-invert)",
    "var(--chakra-saturate)",
    "var(--chakra-sepia)",
    "var(--chakra-drop-shadow)"
  ].join(" ")
};
var backdropFilterTemplate = {
  backdropFilter: [
    "var(--chakra-backdrop-blur)",
    "var(--chakra-backdrop-brightness)",
    "var(--chakra-backdrop-contrast)",
    "var(--chakra-backdrop-grayscale)",
    "var(--chakra-backdrop-hue-rotate)",
    "var(--chakra-backdrop-invert)",
    "var(--chakra-backdrop-opacity)",
    "var(--chakra-backdrop-saturate)",
    "var(--chakra-backdrop-sepia)"
  ].join(" "),
  "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
function getRingTemplate(value) {
  return {
    "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
    "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
    "--chakra-ring-width": value,
    boxShadow: [
      `var(--chakra-ring-offset-shadow)`,
      `var(--chakra-ring-shadow)`,
      `var(--chakra-shadow, 0 0 #0000)`
    ].join(", ")
  };
}
var flexDirectionTemplate = {
  "row-reverse": {
    space: "--chakra-space-x-reverse",
    divide: "--chakra-divide-x-reverse"
  },
  "column-reverse": {
    space: "--chakra-space-y-reverse",
    divide: "--chakra-divide-y-reverse"
  }
};
var directionMap = {
  "to-t": "to top",
  "to-tr": "to top right",
  "to-r": "to right",
  "to-br": "to bottom right",
  "to-b": "to bottom",
  "to-bl": "to bottom left",
  "to-l": "to left",
  "to-tl": "to top left"
};
var valueSet = new Set(Object.values(directionMap));
var globalSet = /* @__PURE__ */ new Set([
  "none",
  "-moz-initial",
  "inherit",
  "initial",
  "revert",
  "unset"
]);
var trimSpace = (str) => str.trim();
function parseGradient(value, theme3) {
  if (value == null || globalSet.has(value))
    return value;
  const prevent = isCSSFunction(value) || globalSet.has(value);
  if (!prevent)
    return `url('${value}')`;
  const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
  const results = regex.exec(value);
  const type = results == null ? void 0 : results[1];
  const values = results == null ? void 0 : results[2];
  if (!type || !values)
    return value;
  const _type = type.includes("-gradient") ? type : `${type}-gradient`;
  const [maybeDirection, ...stops] = values.split(",").map(trimSpace).filter(Boolean);
  if ((stops == null ? void 0 : stops.length) === 0)
    return value;
  const direction3 = maybeDirection in directionMap ? directionMap[maybeDirection] : maybeDirection;
  stops.unshift(direction3);
  const _values = stops.map((stop) => {
    if (valueSet.has(stop))
      return stop;
    const firstStop = stop.indexOf(" ");
    const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
    const _stopOrFunc = isCSSFunction(_stop) ? _stop : _stop && _stop.split(" ");
    const key = `colors.${_color}`;
    const color22 = key in theme3.__cssMap ? theme3.__cssMap[key].varRef : _color;
    return _stopOrFunc ? [
      color22,
      ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
    ].join(" ") : color22;
  });
  return `${_type}(${_values.join(", ")})`;
}
var isCSSFunction = (value) => {
  return typeof value === "string" && value.includes("(") && value.includes(")");
};
var gradientTransform = (value, theme3) => parseGradient(value, theme3 != null ? theme3 : {});
function isCssVar(value) {
  return /^var\(--.+\)$/.test(value);
}
var analyzeCSSValue = (value) => {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
};
var wrap = (str) => (value) => `${str}(${value})`;
var transformFunctions = {
  filter(value) {
    return value !== "auto" ? value : filterTemplate;
  },
  backdropFilter(value) {
    return value !== "auto" ? value : backdropFilterTemplate;
  },
  ring(value) {
    return getRingTemplate(transformFunctions.px(value));
  },
  bgClip(value) {
    return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
  },
  transform(value) {
    if (value === "auto")
      return getTransformTemplate();
    if (value === "auto-gpu")
      return getTransformGpuTemplate();
    return value;
  },
  vh(value) {
    return value === "$100vh" ? "var(--chakra-vh)" : value;
  },
  px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  },
  fraction(value) {
    return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
  },
  float(value, theme3) {
    const map = { left: "right", right: "left" };
    return theme3.direction === "rtl" ? map[value] : value;
  },
  degree(value) {
    if (isCssVar(value) || value == null)
      return value;
    const unitless = typeof value === "string" && !value.endsWith("deg");
    return typeof value === "number" || unitless ? `${value}deg` : value;
  },
  gradient: gradientTransform,
  blur: wrap("blur"),
  opacity: wrap("opacity"),
  brightness: wrap("brightness"),
  contrast: wrap("contrast"),
  dropShadow: wrap("drop-shadow"),
  grayscale: wrap("grayscale"),
  hueRotate: (value) => wrap("hue-rotate")(transformFunctions.degree(value)),
  invert: wrap("invert"),
  saturate: wrap("saturate"),
  sepia: wrap("sepia"),
  bgImage(value) {
    if (value == null)
      return value;
    const prevent = isCSSFunction(value) || globalSet.has(value);
    return !prevent ? `url(${value})` : value;
  },
  outline(value) {
    const isNoneOrZero = String(value) === "0" || String(value) === "none";
    return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
  },
  flexDirection(value) {
    var _a10;
    const { space: space22, divide: divide22 } = (_a10 = flexDirectionTemplate[value]) != null ? _a10 : {};
    const result = { flexDirection: value };
    if (space22)
      result[space22] = 1;
    if (divide22)
      result[divide22] = 1;
    return result;
  }
};
var t = {
  borderWidths: toConfig("borderWidths"),
  borderStyles: toConfig("borderStyles"),
  colors: toConfig("colors"),
  borders: toConfig("borders"),
  gradients: toConfig("gradients", transformFunctions.gradient),
  radii: toConfig("radii", transformFunctions.px),
  space: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
  spaceT: toConfig("space", pipe(transformFunctions.vh, transformFunctions.px)),
  degreeT(property) {
    return { property, transform: transformFunctions.degree };
  },
  prop(property, scale, transform22) {
    return {
      property,
      scale,
      ...scale && {
        transform: createTransform({ scale, transform: transform22 })
      }
    };
  },
  propT(property, transform22) {
    return { property, transform: transform22 };
  },
  sizes: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.px)),
  sizesT: toConfig("sizes", pipe(transformFunctions.vh, transformFunctions.fraction)),
  shadows: toConfig("shadows"),
  logical,
  blur: toConfig("blur", transformFunctions.blur)
};
var background = {
  background: t.colors("background"),
  backgroundColor: t.colors("backgroundColor"),
  backgroundImage: t.gradients("backgroundImage"),
  backgroundSize: true,
  backgroundPosition: true,
  backgroundRepeat: true,
  backgroundAttachment: true,
  backgroundClip: { transform: transformFunctions.bgClip },
  bgSize: t.prop("backgroundSize"),
  bgPosition: t.prop("backgroundPosition"),
  bg: t.colors("background"),
  bgColor: t.colors("backgroundColor"),
  bgPos: t.prop("backgroundPosition"),
  bgRepeat: t.prop("backgroundRepeat"),
  bgAttachment: t.prop("backgroundAttachment"),
  bgGradient: t.gradients("backgroundImage"),
  bgClip: { transform: transformFunctions.bgClip }
};
Object.assign(background, {
  bgImage: background.backgroundImage,
  bgImg: background.backgroundImage
});
var border = {
  border: t.borders("border"),
  borderWidth: t.borderWidths("borderWidth"),
  borderStyle: t.borderStyles("borderStyle"),
  borderColor: t.colors("borderColor"),
  borderRadius: t.radii("borderRadius"),
  borderTop: t.borders("borderTop"),
  borderBlockStart: t.borders("borderBlockStart"),
  borderTopLeftRadius: t.radii("borderTopLeftRadius"),
  borderStartStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopLeftRadius",
      rtl: "borderTopRightRadius"
    }
  }),
  borderEndStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomLeftRadius",
      rtl: "borderBottomRightRadius"
    }
  }),
  borderTopRightRadius: t.radii("borderTopRightRadius"),
  borderStartEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderTopRightRadius",
      rtl: "borderTopLeftRadius"
    }
  }),
  borderEndEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomRightRadius",
      rtl: "borderBottomLeftRadius"
    }
  }),
  borderRight: t.borders("borderRight"),
  borderInlineEnd: t.borders("borderInlineEnd"),
  borderBottom: t.borders("borderBottom"),
  borderBlockEnd: t.borders("borderBlockEnd"),
  borderBottomLeftRadius: t.radii("borderBottomLeftRadius"),
  borderBottomRightRadius: t.radii("borderBottomRightRadius"),
  borderLeft: t.borders("borderLeft"),
  borderInlineStart: {
    property: "borderInlineStart",
    scale: "borders"
  },
  borderInlineStartRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
    }
  }),
  borderInlineEndRadius: t.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
    }
  }),
  borderX: t.borders(["borderLeft", "borderRight"]),
  borderInline: t.borders("borderInline"),
  borderY: t.borders(["borderTop", "borderBottom"]),
  borderBlock: t.borders("borderBlock"),
  borderTopWidth: t.borderWidths("borderTopWidth"),
  borderBlockStartWidth: t.borderWidths("borderBlockStartWidth"),
  borderTopColor: t.colors("borderTopColor"),
  borderBlockStartColor: t.colors("borderBlockStartColor"),
  borderTopStyle: t.borderStyles("borderTopStyle"),
  borderBlockStartStyle: t.borderStyles("borderBlockStartStyle"),
  borderBottomWidth: t.borderWidths("borderBottomWidth"),
  borderBlockEndWidth: t.borderWidths("borderBlockEndWidth"),
  borderBottomColor: t.colors("borderBottomColor"),
  borderBlockEndColor: t.colors("borderBlockEndColor"),
  borderBottomStyle: t.borderStyles("borderBottomStyle"),
  borderBlockEndStyle: t.borderStyles("borderBlockEndStyle"),
  borderLeftWidth: t.borderWidths("borderLeftWidth"),
  borderInlineStartWidth: t.borderWidths("borderInlineStartWidth"),
  borderLeftColor: t.colors("borderLeftColor"),
  borderInlineStartColor: t.colors("borderInlineStartColor"),
  borderLeftStyle: t.borderStyles("borderLeftStyle"),
  borderInlineStartStyle: t.borderStyles("borderInlineStartStyle"),
  borderRightWidth: t.borderWidths("borderRightWidth"),
  borderInlineEndWidth: t.borderWidths("borderInlineEndWidth"),
  borderRightColor: t.colors("borderRightColor"),
  borderInlineEndColor: t.colors("borderInlineEndColor"),
  borderRightStyle: t.borderStyles("borderRightStyle"),
  borderInlineEndStyle: t.borderStyles("borderInlineEndStyle"),
  borderTopRadius: t.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
  borderBottomRadius: t.radii([
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ]),
  borderLeftRadius: t.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
  borderRightRadius: t.radii([
    "borderTopRightRadius",
    "borderBottomRightRadius"
  ])
};
Object.assign(border, {
  rounded: border.borderRadius,
  roundedTop: border.borderTopRadius,
  roundedTopLeft: border.borderTopLeftRadius,
  roundedTopRight: border.borderTopRightRadius,
  roundedTopStart: border.borderStartStartRadius,
  roundedTopEnd: border.borderStartEndRadius,
  roundedBottom: border.borderBottomRadius,
  roundedBottomLeft: border.borderBottomLeftRadius,
  roundedBottomRight: border.borderBottomRightRadius,
  roundedBottomStart: border.borderEndStartRadius,
  roundedBottomEnd: border.borderEndEndRadius,
  roundedLeft: border.borderLeftRadius,
  roundedRight: border.borderRightRadius,
  roundedStart: border.borderInlineStartRadius,
  roundedEnd: border.borderInlineEndRadius,
  borderStart: border.borderInlineStart,
  borderEnd: border.borderInlineEnd,
  borderTopStartRadius: border.borderStartStartRadius,
  borderTopEndRadius: border.borderStartEndRadius,
  borderBottomStartRadius: border.borderEndStartRadius,
  borderBottomEndRadius: border.borderEndEndRadius,
  borderStartRadius: border.borderInlineStartRadius,
  borderEndRadius: border.borderInlineEndRadius,
  borderStartWidth: border.borderInlineStartWidth,
  borderEndWidth: border.borderInlineEndWidth,
  borderStartColor: border.borderInlineStartColor,
  borderEndColor: border.borderInlineEndColor,
  borderStartStyle: border.borderInlineStartStyle,
  borderEndStyle: border.borderInlineEndStyle
});
var color = {
  color: t.colors("color"),
  textColor: t.colors("color"),
  fill: t.colors("fill"),
  stroke: t.colors("stroke")
};
var effect = {
  boxShadow: t.shadows("boxShadow"),
  mixBlendMode: true,
  blendMode: t.prop("mixBlendMode"),
  backgroundBlendMode: true,
  bgBlendMode: t.prop("backgroundBlendMode"),
  opacity: true
};
Object.assign(effect, {
  shadow: effect.boxShadow
});
var filter = {
  filter: { transform: transformFunctions.filter },
  blur: t.blur("--chakra-blur"),
  brightness: t.propT("--chakra-brightness", transformFunctions.brightness),
  contrast: t.propT("--chakra-contrast", transformFunctions.contrast),
  hueRotate: t.propT("--chakra-hue-rotate", transformFunctions.hueRotate),
  invert: t.propT("--chakra-invert", transformFunctions.invert),
  saturate: t.propT("--chakra-saturate", transformFunctions.saturate),
  dropShadow: t.propT("--chakra-drop-shadow", transformFunctions.dropShadow),
  backdropFilter: { transform: transformFunctions.backdropFilter },
  backdropBlur: t.blur("--chakra-backdrop-blur"),
  backdropBrightness: t.propT(
    "--chakra-backdrop-brightness",
    transformFunctions.brightness
  ),
  backdropContrast: t.propT("--chakra-backdrop-contrast", transformFunctions.contrast),
  backdropHueRotate: t.propT(
    "--chakra-backdrop-hue-rotate",
    transformFunctions.hueRotate
  ),
  backdropInvert: t.propT("--chakra-backdrop-invert", transformFunctions.invert),
  backdropSaturate: t.propT("--chakra-backdrop-saturate", transformFunctions.saturate)
};
var flexbox = {
  alignItems: true,
  alignContent: true,
  justifyItems: true,
  justifyContent: true,
  flexWrap: true,
  flexDirection: { transform: transformFunctions.flexDirection },
  flex: true,
  flexFlow: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: t.sizes("flexBasis"),
  justifySelf: true,
  alignSelf: true,
  order: true,
  placeItems: true,
  placeContent: true,
  placeSelf: true,
  gap: t.space("gap"),
  rowGap: t.space("rowGap"),
  columnGap: t.space("columnGap")
};
Object.assign(flexbox, {
  flexDir: flexbox.flexDirection
});
var grid = {
  gridGap: t.space("gridGap"),
  gridColumnGap: t.space("gridColumnGap"),
  gridRowGap: t.space("gridRowGap"),
  gridColumn: true,
  gridRow: true,
  gridAutoFlow: true,
  gridAutoColumns: true,
  gridColumnStart: true,
  gridColumnEnd: true,
  gridRowStart: true,
  gridRowEnd: true,
  gridAutoRows: true,
  gridTemplate: true,
  gridTemplateColumns: true,
  gridTemplateRows: true,
  gridTemplateAreas: true,
  gridArea: true
};
var interactivity = {
  appearance: true,
  cursor: true,
  resize: true,
  userSelect: true,
  pointerEvents: true,
  outline: { transform: transformFunctions.outline },
  outlineOffset: true,
  outlineColor: t.colors("outlineColor")
};
var layout = {
  width: t.sizesT("width"),
  inlineSize: t.sizesT("inlineSize"),
  height: t.sizes("height"),
  blockSize: t.sizes("blockSize"),
  boxSize: t.sizes(["width", "height"]),
  minWidth: t.sizes("minWidth"),
  minInlineSize: t.sizes("minInlineSize"),
  minHeight: t.sizes("minHeight"),
  minBlockSize: t.sizes("minBlockSize"),
  maxWidth: t.sizes("maxWidth"),
  maxInlineSize: t.sizes("maxInlineSize"),
  maxHeight: t.sizes("maxHeight"),
  maxBlockSize: t.sizes("maxBlockSize"),
  overflow: true,
  overflowX: true,
  overflowY: true,
  overscrollBehavior: true,
  overscrollBehaviorX: true,
  overscrollBehaviorY: true,
  display: true,
  aspectRatio: true,
  hideFrom: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a10, _b8, _c5;
      const breakpoint = (_c5 = (_b8 = (_a10 = theme3.__breakpoints) == null ? void 0 : _a10.get(value)) == null ? void 0 : _b8.minW) != null ? _c5 : value;
      const mq = `@media screen and (min-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  hideBelow: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a10, _b8, _c5;
      const breakpoint = (_c5 = (_b8 = (_a10 = theme3.__breakpoints) == null ? void 0 : _a10.get(value)) == null ? void 0 : _b8._minW) != null ? _c5 : value;
      const mq = `@media screen and (max-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  verticalAlign: true,
  boxSizing: true,
  boxDecorationBreak: true,
  float: t.propT("float", transformFunctions.float),
  objectFit: true,
  objectPosition: true,
  visibility: true,
  isolation: true
};
Object.assign(layout, {
  w: layout.width,
  h: layout.height,
  minW: layout.minWidth,
  maxW: layout.maxWidth,
  minH: layout.minHeight,
  maxH: layout.maxHeight,
  overscroll: layout.overscrollBehavior,
  overscrollX: layout.overscrollBehaviorX,
  overscrollY: layout.overscrollBehaviorY
});
var list = {
  listStyleType: true,
  listStylePosition: true,
  listStylePos: t.prop("listStylePosition"),
  listStyleImage: true,
  listStyleImg: t.prop("listStyleImage")
};
function get(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet = memoize(get);
var srOnly = {
  border: "0px",
  clip: "rect(0, 0, 0, 0)",
  width: "1px",
  height: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
var srFocusable = {
  position: "static",
  width: "auto",
  height: "auto",
  clip: "auto",
  padding: "0",
  margin: "0",
  overflow: "visible",
  whiteSpace: "normal"
};
var getWithPriority = (theme3, key, styles3) => {
  const result = {};
  const obj = memoizedGet(theme3, key, {});
  for (const prop in obj) {
    const isInStyles = prop in styles3 && styles3[prop] != null;
    if (!isInStyles)
      result[prop] = obj[prop];
  }
  return result;
};
var others = {
  srOnly: {
    transform(value) {
      if (value === true)
        return srOnly;
      if (value === "focusable")
        return srFocusable;
      return {};
    }
  },
  layerStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, `layerStyles.${value}`, styles3)
  },
  textStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, `textStyles.${value}`, styles3)
  },
  apply: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority(theme3, value, styles3)
  }
};
var position = {
  position: true,
  pos: t.prop("position"),
  zIndex: t.prop("zIndex", "zIndices"),
  inset: t.spaceT("inset"),
  insetX: t.spaceT(["left", "right"]),
  insetInline: t.spaceT("insetInline"),
  insetY: t.spaceT(["top", "bottom"]),
  insetBlock: t.spaceT("insetBlock"),
  top: t.spaceT("top"),
  insetBlockStart: t.spaceT("insetBlockStart"),
  bottom: t.spaceT("bottom"),
  insetBlockEnd: t.spaceT("insetBlockEnd"),
  left: t.spaceT("left"),
  insetInlineStart: t.logical({
    scale: "space",
    property: { ltr: "left", rtl: "right" }
  }),
  right: t.spaceT("right"),
  insetInlineEnd: t.logical({
    scale: "space",
    property: { ltr: "right", rtl: "left" }
  })
};
Object.assign(position, {
  insetStart: position.insetInlineStart,
  insetEnd: position.insetInlineEnd
});
var ring = {
  ring: { transform: transformFunctions.ring },
  ringColor: t.colors("--chakra-ring-color"),
  ringOffset: t.prop("--chakra-ring-offset-width"),
  ringOffsetColor: t.colors("--chakra-ring-offset-color"),
  ringInset: t.prop("--chakra-ring-inset")
};
var space = {
  margin: t.spaceT("margin"),
  marginTop: t.spaceT("marginTop"),
  marginBlockStart: t.spaceT("marginBlockStart"),
  marginRight: t.spaceT("marginRight"),
  marginInlineEnd: t.spaceT("marginInlineEnd"),
  marginBottom: t.spaceT("marginBottom"),
  marginBlockEnd: t.spaceT("marginBlockEnd"),
  marginLeft: t.spaceT("marginLeft"),
  marginInlineStart: t.spaceT("marginInlineStart"),
  marginX: t.spaceT(["marginInlineStart", "marginInlineEnd"]),
  marginInline: t.spaceT("marginInline"),
  marginY: t.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t.spaceT("marginBlock"),
  padding: t.space("padding"),
  paddingTop: t.space("paddingTop"),
  paddingBlockStart: t.space("paddingBlockStart"),
  paddingRight: t.space("paddingRight"),
  paddingBottom: t.space("paddingBottom"),
  paddingBlockEnd: t.space("paddingBlockEnd"),
  paddingLeft: t.space("paddingLeft"),
  paddingInlineStart: t.space("paddingInlineStart"),
  paddingInlineEnd: t.space("paddingInlineEnd"),
  paddingX: t.space(["paddingInlineStart", "paddingInlineEnd"]),
  paddingInline: t.space("paddingInline"),
  paddingY: t.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t.space("paddingBlock")
};
Object.assign(space, {
  m: space.margin,
  mt: space.marginTop,
  mr: space.marginRight,
  me: space.marginInlineEnd,
  marginEnd: space.marginInlineEnd,
  mb: space.marginBottom,
  ml: space.marginLeft,
  ms: space.marginInlineStart,
  marginStart: space.marginInlineStart,
  mx: space.marginX,
  my: space.marginY,
  p: space.padding,
  pt: space.paddingTop,
  py: space.paddingY,
  px: space.paddingX,
  pb: space.paddingBottom,
  pl: space.paddingLeft,
  ps: space.paddingInlineStart,
  paddingStart: space.paddingInlineStart,
  pr: space.paddingRight,
  pe: space.paddingInlineEnd,
  paddingEnd: space.paddingInlineEnd
});
var textDecoration = {
  textDecorationColor: t.colors("textDecorationColor"),
  textDecoration: true,
  textDecor: { property: "textDecoration" },
  textDecorationLine: true,
  textDecorationStyle: true,
  textDecorationThickness: true,
  textUnderlineOffset: true,
  textShadow: t.shadows("textShadow")
};
var transform = {
  clipPath: true,
  transform: t.propT("transform", transformFunctions.transform),
  transformOrigin: true,
  translateX: t.spaceT("--chakra-translate-x"),
  translateY: t.spaceT("--chakra-translate-y"),
  skewX: t.degreeT("--chakra-skew-x"),
  skewY: t.degreeT("--chakra-skew-y"),
  scaleX: t.prop("--chakra-scale-x"),
  scaleY: t.prop("--chakra-scale-y"),
  scale: t.prop(["--chakra-scale-x", "--chakra-scale-y"]),
  rotate: t.degreeT("--chakra-rotate")
};
var transition = {
  transition: true,
  transitionDelay: true,
  animation: true,
  willChange: true,
  transitionDuration: t.prop("transitionDuration", "transition.duration"),
  transitionProperty: t.prop("transitionProperty", "transition.property"),
  transitionTimingFunction: t.prop(
    "transitionTimingFunction",
    "transition.easing"
  )
};
var typography = {
  fontFamily: t.prop("fontFamily", "fonts"),
  fontSize: t.prop("fontSize", "fontSizes", transformFunctions.px),
  fontWeight: t.prop("fontWeight", "fontWeights"),
  lineHeight: t.prop("lineHeight", "lineHeights"),
  letterSpacing: t.prop("letterSpacing", "letterSpacings"),
  textAlign: true,
  fontStyle: true,
  textIndent: true,
  wordBreak: true,
  overflowWrap: true,
  textOverflow: true,
  textTransform: true,
  whiteSpace: true,
  isTruncated: {
    transform(value) {
      if (value === true) {
        return {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        };
      }
    }
  },
  noOfLines: {
    static: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      //@ts-ignore
      WebkitLineClamp: "var(--chakra-line-clamp)"
    },
    property: "--chakra-line-clamp"
  }
};
var scroll = {
  scrollBehavior: true,
  scrollSnapAlign: true,
  scrollSnapStop: true,
  scrollSnapType: true,
  // scroll margin
  scrollMargin: t.spaceT("scrollMargin"),
  scrollMarginTop: t.spaceT("scrollMarginTop"),
  scrollMarginBottom: t.spaceT("scrollMarginBottom"),
  scrollMarginLeft: t.spaceT("scrollMarginLeft"),
  scrollMarginRight: t.spaceT("scrollMarginRight"),
  scrollMarginX: t.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
  scrollMarginY: t.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
  // scroll padding
  scrollPadding: t.spaceT("scrollPadding"),
  scrollPaddingTop: t.spaceT("scrollPaddingTop"),
  scrollPaddingBottom: t.spaceT("scrollPaddingBottom"),
  scrollPaddingLeft: t.spaceT("scrollPaddingLeft"),
  scrollPaddingRight: t.spaceT("scrollPaddingRight"),
  scrollPaddingX: t.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
  scrollPaddingY: t.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
};
function resolveReference(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpression = (operator, ...operands) => operands.map(resolveReference).join(` ${operator} `).replace(/calc/g, "");
var add = (...operands) => `calc(${toExpression("+", ...operands)})`;
var subtract = (...operands) => `calc(${toExpression("-", ...operands)})`;
var multiply = (...operands) => `calc(${toExpression("*", ...operands)})`;
var divide = (...operands) => `calc(${toExpression("/", ...operands)})`;
var negate = (x) => {
  const value = resolveReference(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply(value, -1);
};
var calc = Object.assign(
  (x) => ({
    add: (...operands) => calc(add(x, ...operands)),
    subtract: (...operands) => calc(subtract(x, ...operands)),
    multiply: (...operands) => calc(multiply(x, ...operands)),
    divide: (...operands) => calc(divide(x, ...operands)),
    negate: () => calc(negate(x)),
    toString: () => x.toString()
  }),
  {
    add,
    subtract,
    multiply,
    divide,
    negate
  }
);
function replaceWhiteSpace(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape(value) {
  const valueStr = replaceWhiteSpace(value.toString());
  return escapeSymbol(escapeDot(valueStr));
}
function escapeDot(value) {
  if (value.includes("\\."))
    return value;
  const isDecimal3 = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal3 ? value.replace(".", `\\.`) : value;
}
function escapeSymbol(value) {
  return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
}
function addPrefix(value, prefix = "") {
  return [prefix, value].filter(Boolean).join("-");
}
function toVarReference(name, fallback) {
  return `var(${name}${fallback ? `, ${fallback}` : ""})`;
}
function toVarDefinition(value, prefix = "") {
  return escape(`--${addPrefix(value, prefix)}`);
}
function cssVar(name, fallback, cssVarPrefix) {
  const cssVariable = toVarDefinition(name, cssVarPrefix);
  return {
    variable: cssVariable,
    reference: toVarReference(cssVariable, fallback)
  };
}
function getLastItem(array) {
  const length = array == null ? 0 : array.length;
  return length ? array[length - 1] : void 0;
}
function analyzeCSSValue2(value) {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
}
function px(value) {
  if (value == null)
    return value;
  const { unitless } = analyzeCSSValue2(value);
  return unitless || typeof value === "number" ? `${value}px` : value;
}
var sortByBreakpointValue = (a, b) => parseInt(a[1], 10) > parseInt(b[1], 10) ? 1 : -1;
var sortBps = (breakpoints5) => Object.fromEntries(Object.entries(breakpoints5).sort(sortByBreakpointValue));
function normalize(breakpoints5) {
  const sorted = sortBps(breakpoints5);
  return Object.assign(Object.values(sorted), sorted);
}
function keys(breakpoints5) {
  const value = Object.keys(sortBps(breakpoints5));
  return new Set(value);
}
function subtract2(value) {
  var _a10;
  if (!value)
    return value;
  value = (_a10 = px(value)) != null ? _a10 : value;
  const OFFSET = -0.02;
  return typeof value === "number" ? `${value + OFFSET}` : value.replace(/(\d+\.?\d*)/u, (m) => `${parseFloat(m) + OFFSET}`);
}
function toMediaQueryString(min, max) {
  const query = ["@media screen"];
  if (min)
    query.push("and", `(min-width: ${px(min)})`);
  if (max)
    query.push("and", `(max-width: ${px(max)})`);
  return query.join(" ");
}
function analyzeBreakpoints(breakpoints5) {
  var _a10;
  if (!breakpoints5)
    return null;
  breakpoints5.base = (_a10 = breakpoints5.base) != null ? _a10 : "0px";
  const normalized = normalize(breakpoints5);
  const queries = Object.entries(breakpoints5).sort(sortByBreakpointValue).map(([breakpoint, minW], index, entry) => {
    var _a27;
    let [, maxW] = (_a27 = entry[index + 1]) != null ? _a27 : [];
    maxW = parseFloat(maxW) > 0 ? subtract2(maxW) : void 0;
    return {
      _minW: subtract2(minW),
      breakpoint,
      minW,
      maxW,
      maxWQuery: toMediaQueryString(null, maxW),
      minWQuery: toMediaQueryString(minW),
      minMaxQuery: toMediaQueryString(minW, maxW)
    };
  });
  const _keys = keys(breakpoints5);
  const _keysArr = Array.from(_keys.values());
  return {
    keys: _keys,
    normalized,
    isResponsive(test) {
      const keys2 = Object.keys(test);
      return keys2.length > 0 && keys2.every((key) => _keys.has(key));
    },
    asObject: sortBps(breakpoints5),
    asArray: normalize(breakpoints5),
    details: queries,
    get(key) {
      return queries.find((q) => q.breakpoint === key);
    },
    media: [
      null,
      ...normalized.map((minW) => toMediaQueryString(minW)).slice(1)
    ],
    /**
     * Converts the object responsive syntax to array syntax
     *
     * @example
     * toArrayValue({ base: 1, sm: 2, md: 3 }) // => [1, 2, 3]
     */
    toArrayValue(test) {
      if (!isObject(test)) {
        throw new Error("toArrayValue: value must be an object");
      }
      const result = _keysArr.map((bp) => {
        var _a27;
        return (_a27 = test[bp]) != null ? _a27 : null;
      });
      while (getLastItem(result) === null) {
        result.pop();
      }
      return result;
    },
    /**
     * Converts the array responsive syntax to object syntax
     *
     * @example
     * toObjectValue([1, 2, 3]) // => { base: 1, sm: 2, md: 3 }
     */
    toObjectValue(test) {
      if (!Array.isArray(test)) {
        throw new Error("toObjectValue: value must be an array");
      }
      return test.reduce((acc, value, index) => {
        const key = _keysArr[index];
        if (key != null && value != null)
          acc[key] = value;
        return acc;
      }, {});
    }
  };
}
var state = {
  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
  focusVisible: (str, post) => `${str}:focus-visible ${post}`,
  focusWithin: (str, post) => `${str}:focus-within ${post}`,
  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
  indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
  readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
  expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
};
var toGroup = (fn) => merge((v) => fn(v, "&"), "[role=group]", "[data-group]", ".group");
var toPeer = (fn) => merge((v) => fn(v, "~ &"), "[data-peer]", ".peer");
var merge = (fn, ...selectors) => selectors.map(fn).join(", ");
var pseudoSelectors = {
  /**
   * Styles for CSS selector `&:hover`
   */
  _hover: "&:hover, &[data-hover]",
  /**
   * Styles for CSS Selector `&:active`
   */
  _active: "&:active, &[data-active]",
  /**
   * Styles for CSS selector `&:focus`
   *
   */
  _focus: "&:focus, &[data-focus]",
  /**
   * Styles for the highlighted state.
   */
  _highlighted: "&[data-highlighted]",
  /**
   * Styles to apply when a child of this element has received focus
   * - CSS Selector `&:focus-within`
   */
  _focusWithin: "&:focus-within",
  /**
   * Styles to apply when this element has received focus via tabbing
   * - CSS Selector `&:focus-visible`
   */
  _focusVisible: "&:focus-visible, &[data-focus-visible]",
  /**
   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:
   * - `&[aria-disabled=true]`
   * - `&:disabled`
   * - `&[data-disabled]`
   * - `&[disabled]`
   */
  _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
  /**
   * Styles for CSS Selector `&:readonly`
   */
  _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
  /**
   * Styles for CSS selector `&::before`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _before={{content:`""` }}/>
   * ```
   */
  _before: "&::before",
  /**
   * Styles for CSS selector `&::after`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _after={{content:`""` }}/>
   * ```
   */
  _after: "&::after",
  /**
   * Styles for CSS selector `&:empty`
   */
  _empty: "&:empty",
  /**
   * Styles to apply when the ARIA attribute `aria-expanded` is `true`
   * - CSS selector `&[aria-expanded=true]`
   */
  _expanded: "&[aria-expanded=true], &[data-expanded]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `true`
   * - CSS selector `&[aria-checked=true]`
   */
  _checked: "&[aria-checked=true], &[data-checked]",
  /**
   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`
   * - CSS selector `&[aria-grabbed=true]`
   */
  _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
  /**
   * Styles for CSS Selector `&[aria-pressed=true]`
   * Typically used to style the current "pressed" state of toggle buttons
   */
  _pressed: "&[aria-pressed=true], &[data-pressed]",
  /**
   * Styles to apply when the ARIA attribute `aria-invalid` is `true`
   * - CSS selector `&[aria-invalid=true]`
   */
  _invalid: "&[aria-invalid=true], &[data-invalid]",
  /**
   * Styles for the valid state
   * - CSS selector `&[data-valid], &[data-state=valid]`
   */
  _valid: "&[data-valid], &[data-state=valid]",
  /**
   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.
   * Useful for styling loading states
   */
  _loading: "&[data-loading], &[aria-busy=true]",
  /**
   * Styles to apply when the ARIA attribute `aria-selected` is `true`
   *
   * - CSS selector `&[aria-selected=true]`
   */
  _selected: "&[aria-selected=true], &[data-selected]",
  /**
   * Styles for CSS Selector `[hidden=true]`
   */
  _hidden: "&[hidden], &[data-hidden]",
  /**
   * Styles for CSS Selector `&:-webkit-autofill`
   */
  _autofill: "&:-webkit-autofill",
  /**
   * Styles for CSS Selector `&:nth-child(even)`
   */
  _even: "&:nth-of-type(even)",
  /**
   * Styles for CSS Selector `&:nth-child(odd)`
   */
  _odd: "&:nth-of-type(odd)",
  /**
   * Styles for CSS Selector `&:first-of-type`
   */
  _first: "&:first-of-type",
  /**
   * Styles for CSS selector `&::first-letter`
   *
   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.
   * @example
   * ```jsx
   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>
   * ```
   */
  _firstLetter: "&::first-letter",
  /**
   * Styles for CSS Selector `&:last-of-type`
   */
  _last: "&:last-of-type",
  /**
   * Styles for CSS Selector `&:not(:first-of-type)`
   */
  _notFirst: "&:not(:first-of-type)",
  /**
   * Styles for CSS Selector `&:not(:last-of-type)`
   */
  _notLast: "&:not(:last-of-type)",
  /**
   * Styles for CSS Selector `&:visited`
   */
  _visited: "&:visited",
  /**
   * Used to style the active link in a navigation
   * Styles for CSS Selector `&[aria-current=page]`
   */
  _activeLink: "&[aria-current=page]",
  /**
   * Used to style the current step within a process
   * Styles for CSS Selector `&[aria-current=step]`
   */
  _activeStep: "&[aria-current=step]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`
   * - CSS selector `&[aria-checked=mixed]`
   */
  _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered
   */
  _groupHover: toGroup(state.hover),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered
   */
  _peerHover: toPeer(state.hover),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused
   */
  _groupFocus: toGroup(state.focus),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused
   */
  _peerFocus: toPeer(state.focus),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus
   */
  _groupFocusVisible: toGroup(state.focusVisible),
  /**
   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus
   */
  _peerFocusVisible: toPeer(state.focusVisible),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active
   */
  _groupActive: toGroup(state.active),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is active
   */
  _peerActive: toPeer(state.active),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled
   */
  _groupDisabled: toGroup(state.disabled),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled
   */
  _peerDisabled: toPeer(state.disabled),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid
   */
  _groupInvalid: toGroup(state.invalid),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid
   */
  _peerInvalid: toPeer(state.invalid),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked
   */
  _groupChecked: toGroup(state.checked),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked
   */
  _peerChecked: toPeer(state.checked),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within
   */
  _groupFocusWithin: toGroup(state.focusWithin),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within
   */
  _peerFocusWithin: toPeer(state.focusWithin),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown
   */
  _peerPlaceholderShown: toPeer(state.placeholderShown),
  /**
   * Styles for CSS Selector `&::placeholder`.
   */
  _placeholder: "&::placeholder",
  /**
   * Styles for CSS Selector `&:placeholder-shown`.
   */
  _placeholderShown: "&:placeholder-shown",
  /**
   * Styles for CSS Selector `&:fullscreen`.
   */
  _fullScreen: "&:fullscreen",
  /**
   * Styles for CSS Selector `&::selection`
   */
  _selection: "&::selection",
  /**
   * Styles for CSS Selector `[dir=rtl] &`
   * It is applied when a parent element or this element has `dir="rtl"`
   */
  _rtl: "[dir=rtl] &, &[dir=rtl]",
  /**
   * Styles for CSS Selector `[dir=ltr] &`
   * It is applied when a parent element or this element has `dir="ltr"`
   */
  _ltr: "[dir=ltr] &, &[dir=ltr]",
  /**
   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`
   * It is used when the user has requested the system use a light or dark color theme.
   */
  _mediaDark: "@media (prefers-color-scheme: dark)",
  /**
   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`
   * It is used when the user has requested the system to reduce the amount of animations.
   */
  _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",
  /**
   * Styles for the CSS Selector `&[data-orientation=horizontal]`
   */
  _horizontal: "&[data-orientation=horizontal]",
  /**
   * Styles for the CSS Selector `&[data-orientation=vertical]`
   */
  _vertical: "&[data-orientation=vertical]"
};
var pseudoPropNames = Object.keys(
  pseudoSelectors
);
function tokenToCssVar(token, prefix) {
  return cssVar(String(token).replace(/\./g, "-"), void 0, prefix);
}
function createThemeVars(flatTokens, options) {
  let cssVars = {};
  const cssMap = {};
  for (const [token, tokenValue] of Object.entries(flatTokens)) {
    const { isSemantic, value } = tokenValue;
    const { variable, reference } = tokenToCssVar(token, options == null ? void 0 : options.cssVarPrefix);
    if (!isSemantic) {
      if (token.startsWith("space")) {
        const keys2 = token.split(".");
        const [firstKey, ...referenceKeys] = keys2;
        const negativeLookupKey = `${firstKey}.-${referenceKeys.join(".")}`;
        const negativeValue = calc.negate(value);
        const negatedReference = calc.negate(reference);
        cssMap[negativeLookupKey] = {
          value: negativeValue,
          var: variable,
          varRef: negatedReference
        };
      }
      cssVars[variable] = value;
      cssMap[token] = {
        value,
        var: variable,
        varRef: reference
      };
      continue;
    }
    const lookupToken = (maybeToken) => {
      const scale = String(token).split(".")[0];
      const withScale = [scale, maybeToken].join(".");
      const resolvedTokenValue = flatTokens[withScale];
      if (!resolvedTokenValue)
        return maybeToken;
      const { reference: reference2 } = tokenToCssVar(withScale, options == null ? void 0 : options.cssVarPrefix);
      return reference2;
    };
    const normalizedValue = isObject(value) ? value : { default: value };
    cssVars = (0, import_lodash.default)(
      cssVars,
      Object.entries(normalizedValue).reduce(
        (acc, [conditionAlias, conditionValue]) => {
          var _a10, _b8;
          if (!conditionValue)
            return acc;
          const tokenReference = lookupToken(`${conditionValue}`);
          if (conditionAlias === "default") {
            acc[variable] = tokenReference;
            return acc;
          }
          const conditionSelector = (_b8 = (_a10 = pseudoSelectors) == null ? void 0 : _a10[conditionAlias]) != null ? _b8 : conditionAlias;
          acc[conditionSelector] = { [variable]: tokenReference };
          return acc;
        },
        {}
      )
    );
    cssMap[token] = {
      value: reference,
      var: variable,
      varRef: reference
    };
  }
  return {
    cssVars,
    cssMap
  };
}
function omit(object, keysToOmit = []) {
  const clone = Object.assign({}, object);
  for (const key of keysToOmit) {
    if (key in clone) {
      delete clone[key];
    }
  }
  return clone;
}
function pick(object, keysToPick) {
  const result = {};
  for (const key of keysToPick) {
    if (key in object) {
      result[key] = object[key];
    }
  }
  return result;
}
function isObject5(value) {
  return typeof value === "object" && value != null && !Array.isArray(value);
}
function walkObject(target, predicate, options = {}) {
  const { stop, getKey } = options;
  function inner(value, path = []) {
    var _a10;
    if (isObject5(value) || Array.isArray(value)) {
      const result = {};
      for (const [prop, child] of Object.entries(value)) {
        const key = (_a10 = getKey == null ? void 0 : getKey(prop)) != null ? _a10 : prop;
        const childPath = [...path, key];
        if (stop == null ? void 0 : stop(value, childPath)) {
          return predicate(value, path);
        }
        result[key] = inner(child, childPath);
      }
      return result;
    }
    return predicate(value, path);
  }
  return inner(target);
}
var tokens = [
  "colors",
  "borders",
  "borderWidths",
  "borderStyles",
  "fonts",
  "fontSizes",
  "fontWeights",
  "gradients",
  "letterSpacings",
  "lineHeights",
  "radii",
  "space",
  "shadows",
  "sizes",
  "zIndices",
  "transition",
  "blur",
  "breakpoints"
];
function extractTokens(theme3) {
  const _tokens = tokens;
  return pick(theme3, _tokens);
}
function extractSemanticTokens(theme3) {
  return theme3.semanticTokens;
}
function omitVars(rawTheme) {
  const { __cssMap, __cssVars, __breakpoints, ...cleanTheme } = rawTheme;
  return cleanTheme;
}
var isSemanticCondition = (key) => pseudoPropNames.includes(key) || "default" === key;
function flattenTokens({
  tokens: tokens2,
  semanticTokens: semanticTokens3
}) {
  const result = {};
  walkObject(tokens2, (value, path) => {
    if (value == null)
      return;
    result[path.join(".")] = { isSemantic: false, value };
  });
  walkObject(
    semanticTokens3,
    (value, path) => {
      if (value == null)
        return;
      result[path.join(".")] = { isSemantic: true, value };
    },
    {
      stop: (value) => Object.keys(value).every(isSemanticCondition)
    }
  );
  return result;
}
function toCSSVar(rawTheme) {
  var _a10;
  const theme3 = omitVars(rawTheme);
  const tokens2 = extractTokens(theme3);
  const semanticTokens3 = extractSemanticTokens(theme3);
  const flatTokens = flattenTokens({ tokens: tokens2, semanticTokens: semanticTokens3 });
  const cssVarPrefix = (_a10 = theme3.config) == null ? void 0 : _a10.cssVarPrefix;
  const {
    /**
     * This is more like a dictionary of tokens users will type `green.500`,
     * and their equivalent css variable.
     */
    cssMap,
    /**
     * The extracted css variables will be stored here, and used in
     * the emotion's <Global/> component to attach variables to `:root`
     */
    cssVars
  } = createThemeVars(flatTokens, { cssVarPrefix });
  const defaultCssVars = {
    "--chakra-ring-inset": "var(--chakra-empty,/*!*/ /*!*/)",
    "--chakra-ring-offset-width": "0px",
    "--chakra-ring-offset-color": "#fff",
    "--chakra-ring-color": "rgba(66, 153, 225, 0.6)",
    "--chakra-ring-offset-shadow": "0 0 #0000",
    "--chakra-ring-shadow": "0 0 #0000",
    "--chakra-space-x-reverse": "0",
    "--chakra-space-y-reverse": "0"
  };
  Object.assign(theme3, {
    __cssVars: { ...defaultCssVars, ...cssVars },
    __cssMap: cssMap,
    __breakpoints: analyzeBreakpoints(theme3.breakpoints)
  });
  return theme3;
}
var systemProps = (0, import_lodash3.default)(
  {},
  background,
  border,
  color,
  flexbox,
  layout,
  filter,
  ring,
  interactivity,
  grid,
  others,
  position,
  effect,
  space,
  scroll,
  typography,
  textDecoration,
  transform,
  list,
  transition
);
var layoutSystem = Object.assign({}, space, layout, flexbox, grid, position);
var layoutPropNames = Object.keys(
  layoutSystem
);
var propNames = [...Object.keys(systemProps), ...pseudoPropNames];
var styleProps = { ...systemProps, ...pseudoSelectors };
var isStyleProp = (prop) => prop in styleProps;
var expandResponsive = (styles3) => (theme3) => {
  if (!theme3.__breakpoints)
    return styles3;
  const { isResponsive, toArrayValue, media: medias } = theme3.__breakpoints;
  const computedStyles = {};
  for (const key in styles3) {
    let value = runIfFn(styles3[key], theme3);
    if (value == null)
      continue;
    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;
    if (!Array.isArray(value)) {
      computedStyles[key] = value;
      continue;
    }
    const queries = value.slice(0, medias.length).length;
    for (let index = 0; index < queries; index += 1) {
      const media = medias == null ? void 0 : medias[index];
      if (!media) {
        computedStyles[key] = value[index];
        continue;
      }
      computedStyles[media] = computedStyles[media] || {};
      if (value[index] == null) {
        continue;
      }
      computedStyles[media][key] = value[index];
    }
  }
  return computedStyles;
};
function splitByComma(value) {
  const chunks = [];
  let chunk3 = "";
  let inParens = false;
  for (let i = 0; i < value.length; i++) {
    const char = value[i];
    if (char === "(") {
      inParens = true;
      chunk3 += char;
    } else if (char === ")") {
      inParens = false;
      chunk3 += char;
    } else if (char === "," && !inParens) {
      chunks.push(chunk3);
      chunk3 = "";
    } else {
      chunk3 += char;
    }
  }
  chunk3 = chunk3.trim();
  if (chunk3) {
    chunks.push(chunk3);
  }
  return chunks;
}
function isCssVar2(value) {
  return /^var\(--.+\)$/.test(value);
}
var isCSSVariableTokenValue = (key, value) => key.startsWith("--") && typeof value === "string" && !isCssVar2(value);
var resolveTokenValue = (theme3, value) => {
  var _a10, _b8;
  if (value == null)
    return value;
  const getVar = (val) => {
    var _a27, _b23;
    return (_b23 = (_a27 = theme3.__cssMap) == null ? void 0 : _a27[val]) == null ? void 0 : _b23.varRef;
  };
  const getValue = (val) => {
    var _a27;
    return (_a27 = getVar(val)) != null ? _a27 : val;
  };
  const [tokenValue, fallbackValue] = splitByComma(value);
  value = (_b8 = (_a10 = getVar(tokenValue)) != null ? _a10 : getValue(fallbackValue)) != null ? _b8 : getValue(value);
  return value;
};
function getCss(options) {
  const { configs = {}, pseudos = {}, theme: theme3 } = options;
  const css2 = (stylesOrFn, nested = false) => {
    var _a10, _b8, _c5;
    const _styles = runIfFn(stylesOrFn, theme3);
    const styles3 = expandResponsive(_styles)(theme3);
    let computedStyles = {};
    for (let key in styles3) {
      const valueOrFn = styles3[key];
      let value = runIfFn(valueOrFn, theme3);
      if (key in pseudos) {
        key = pseudos[key];
      }
      if (isCSSVariableTokenValue(key, value)) {
        value = resolveTokenValue(theme3, value);
      }
      let config3 = configs[key];
      if (config3 === true) {
        config3 = { property: key };
      }
      if (isObject(value)) {
        computedStyles[key] = (_a10 = computedStyles[key]) != null ? _a10 : {};
        computedStyles[key] = (0, import_lodash2.default)(
          {},
          computedStyles[key],
          css2(value, true)
        );
        continue;
      }
      let rawValue = (_c5 = (_b8 = config3 == null ? void 0 : config3.transform) == null ? void 0 : _b8.call(config3, value, theme3, _styles)) != null ? _c5 : value;
      rawValue = (config3 == null ? void 0 : config3.processResult) ? css2(rawValue, true) : rawValue;
      const configProperty = runIfFn(config3 == null ? void 0 : config3.property, theme3);
      if (!nested && (config3 == null ? void 0 : config3.static)) {
        const staticStyles = runIfFn(config3.static, theme3);
        computedStyles = (0, import_lodash2.default)({}, computedStyles, staticStyles);
      }
      if (configProperty && Array.isArray(configProperty)) {
        for (const property of configProperty) {
          computedStyles[property] = rawValue;
        }
        continue;
      }
      if (configProperty) {
        if (configProperty === "&" && isObject(rawValue)) {
          computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
        } else {
          computedStyles[configProperty] = rawValue;
        }
        continue;
      }
      if (isObject(rawValue)) {
        computedStyles = (0, import_lodash2.default)({}, computedStyles, rawValue);
        continue;
      }
      computedStyles[key] = rawValue;
    }
    return computedStyles;
  };
  return css2;
}
var css = (styles3) => (theme3) => {
  const cssFn = getCss({
    theme: theme3,
    pseudos: pseudoSelectors,
    configs: systemProps
  });
  return cssFn(styles3);
};
function normalize2(value, toArray) {
  if (Array.isArray(value))
    return value;
  if (isObject(value))
    return toArray(value);
  if (value != null)
    return [value];
}
function getNextIndex(values, i) {
  for (let j = i + 1; j < values.length; j++) {
    if (values[j] != null)
      return j;
  }
  return -1;
}
function createResolver(theme3) {
  const breakpointUtil = theme3.__breakpoints;
  return function resolver(config3, prop, value, props) {
    var _a10, _b8;
    if (!breakpointUtil)
      return;
    const result = {};
    const normalized = normalize2(value, breakpointUtil.toArrayValue);
    if (!normalized)
      return result;
    const len = normalized.length;
    const isSingle = len === 1;
    const isMultipart = !!config3.parts;
    for (let i = 0; i < len; i++) {
      const key = breakpointUtil.details[i];
      const nextKey = breakpointUtil.details[getNextIndex(normalized, i)];
      const query = toMediaQueryString(key.minW, nextKey == null ? void 0 : nextKey._minW);
      const styles3 = runIfFn((_a10 = config3[prop]) == null ? void 0 : _a10[normalized[i]], props);
      if (!styles3)
        continue;
      if (isMultipart) {
        (_b8 = config3.parts) == null ? void 0 : _b8.forEach((part) => {
          (0, import_lodash4.default)(result, {
            [part]: isSingle ? styles3[part] : { [query]: styles3[part] }
          });
        });
        continue;
      }
      if (!isMultipart) {
        if (isSingle)
          (0, import_lodash4.default)(result, styles3);
        else
          result[query] = styles3;
        continue;
      }
      result[query] = styles3;
    }
    return result;
  };
}
function resolveStyleConfig(config3) {
  return (props) => {
    var _a10;
    const { variant, size: size3, theme: theme3 } = props;
    const recipe = createResolver(theme3);
    return (0, import_lodash4.default)(
      {},
      runIfFn((_a10 = config3.baseStyle) != null ? _a10 : {}, props),
      recipe(config3, "sizes", size3, props),
      recipe(config3, "variants", variant, props)
    );
  };
}
function omitThemingProps(props) {
  return omit(props, ["styleConfig", "size", "variant", "colorScheme"]);
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-P56GPN75.mjs
var requiredChakraThemeKeys = [
  "borders",
  "breakpoints",
  "colors",
  "components",
  "config",
  "direction",
  "fonts",
  "fontSizes",
  "fontWeights",
  "letterSpacings",
  "lineHeights",
  "radii",
  "shadows",
  "sizes",
  "space",
  "styles",
  "transition",
  "zIndices"
];
function isChakraTheme(unit) {
  if (!isObject(unit)) {
    return false;
  }
  return requiredChakraThemeKeys.every(
    (propertyName) => Object.prototype.hasOwnProperty.call(unit, propertyName)
  );
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-SIH73G3H.mjs
var transitionProperty = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition2 = {
  property: transitionProperty,
  easing: transitionTimingFunction,
  duration: transitionDuration
};
var transition_default = transition2;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-45VJLTIL.mjs
var zIndices = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var z_index_default = zIndices;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-B75T2J64.mjs
var borders = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var borders_default = borders;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-TXLFBUTF.mjs
var breakpoints = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};
var breakpoints_default = breakpoints;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-E47HH2QS.mjs
var colors = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var colors_default = colors;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-VIVTPWHP.mjs
var radii = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var radius_default = radii;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-IZUFFCXS.mjs
var shadows = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default = shadows;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-HQ6WXDYV.mjs
var blur = {
  none: 0,
  sm: "4px",
  base: "8px",
  md: "12px",
  lg: "16px",
  xl: "24px",
  "2xl": "40px",
  "3xl": "64px"
};
var blur_default = blur;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-6XA2KDUD.mjs
var typography2 = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
  },
  fontSizes: {
    "3xs": "0.45rem",
    "2xs": "0.625rem",
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var typography_default = typography2;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-V7WMN6TQ.mjs
var spacing = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-NJCYBKFH.mjs
var largeSizes = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem",
  prose: "60ch"
};
var container = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes = {
  ...spacing,
  ...largeSizes,
  container
};
var sizes_default = sizes;

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-3WO5B3NB.mjs
var foundations = {
  breakpoints: breakpoints_default,
  zIndices: z_index_default,
  radii: radius_default,
  blur: blur_default,
  colors: colors_default,
  ...typography_default,
  sizes: sizes_default,
  shadows: shadows_default,
  space: spacing,
  borders: borders_default,
  transition: transition_default
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/styled-system/dist/index.mjs
var import_lodash5 = __toESM(require_lodash(), 1);
var import_lodash6 = __toESM(require_lodash(), 1);
var import_lodash7 = __toESM(require_lodash(), 1);
var import_lodash8 = __toESM(require_lodash(), 1);
var isImportant2 = (value) => /!(important)?$/.test(value);
var withoutImportant2 = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
var tokenToCSSVar2 = (scale, value) => (theme3) => {
  const valueStr = String(value);
  const important = isImportant2(valueStr);
  const valueWithoutImportant = withoutImportant2(valueStr);
  const key = scale ? `${scale}.${valueWithoutImportant}` : valueWithoutImportant;
  let transformed = isObject(theme3.__cssMap) && key in theme3.__cssMap ? theme3.__cssMap[key].varRef : value;
  transformed = withoutImportant2(transformed);
  return important ? `${transformed} !important` : transformed;
};
function createTransform2(options) {
  const { scale, transform: transform22, compose: compose3 } = options;
  const fn = (value, theme3) => {
    var _a10;
    const _value = tokenToCSSVar2(scale, value)(theme3);
    let result = (_a10 = transform22 == null ? void 0 : transform22(_value, theme3)) != null ? _a10 : _value;
    if (compose3) {
      result = compose3(result, theme3);
    }
    return result;
  };
  return fn;
}
var pipe2 = (...fns) => (v) => fns.reduce((a, b) => b(a), v);
function toConfig2(scale, transform22) {
  return (property) => {
    const result = { property, scale };
    result.transform = createTransform2({
      scale,
      transform: transform22
    });
    return result;
  };
}
var getRtl2 = ({ rtl, ltr }) => (theme3) => theme3.direction === "rtl" ? rtl : ltr;
function logical2(options) {
  const { property, scale, transform: transform22 } = options;
  return {
    scale,
    property: getRtl2(property),
    transform: scale ? createTransform2({
      scale,
      compose: transform22
    }) : transform22
  };
}
var transformTemplate2 = [
  "rotate(var(--chakra-rotate, 0))",
  "scaleX(var(--chakra-scale-x, 1))",
  "scaleY(var(--chakra-scale-y, 1))",
  "skewX(var(--chakra-skew-x, 0))",
  "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate2() {
  return [
    "translateX(var(--chakra-translate-x, 0))",
    "translateY(var(--chakra-translate-y, 0))",
    ...transformTemplate2
  ].join(" ");
}
function getTransformGpuTemplate2() {
  return [
    "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
    ...transformTemplate2
  ].join(" ");
}
var filterTemplate2 = {
  "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
  filter: [
    "var(--chakra-blur)",
    "var(--chakra-brightness)",
    "var(--chakra-contrast)",
    "var(--chakra-grayscale)",
    "var(--chakra-hue-rotate)",
    "var(--chakra-invert)",
    "var(--chakra-saturate)",
    "var(--chakra-sepia)",
    "var(--chakra-drop-shadow)"
  ].join(" ")
};
var backdropFilterTemplate2 = {
  backdropFilter: [
    "var(--chakra-backdrop-blur)",
    "var(--chakra-backdrop-brightness)",
    "var(--chakra-backdrop-contrast)",
    "var(--chakra-backdrop-grayscale)",
    "var(--chakra-backdrop-hue-rotate)",
    "var(--chakra-backdrop-invert)",
    "var(--chakra-backdrop-opacity)",
    "var(--chakra-backdrop-saturate)",
    "var(--chakra-backdrop-sepia)"
  ].join(" "),
  "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
function getRingTemplate2(value) {
  return {
    "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
    "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
    "--chakra-ring-width": value,
    boxShadow: [
      `var(--chakra-ring-offset-shadow)`,
      `var(--chakra-ring-shadow)`,
      `var(--chakra-shadow, 0 0 #0000)`
    ].join(", ")
  };
}
var flexDirectionTemplate2 = {
  "row-reverse": {
    space: "--chakra-space-x-reverse",
    divide: "--chakra-divide-x-reverse"
  },
  "column-reverse": {
    space: "--chakra-space-y-reverse",
    divide: "--chakra-divide-y-reverse"
  }
};
var directionMap2 = {
  "to-t": "to top",
  "to-tr": "to top right",
  "to-r": "to right",
  "to-br": "to bottom right",
  "to-b": "to bottom",
  "to-bl": "to bottom left",
  "to-l": "to left",
  "to-tl": "to top left"
};
var valueSet2 = new Set(Object.values(directionMap2));
var globalSet2 = /* @__PURE__ */ new Set([
  "none",
  "-moz-initial",
  "inherit",
  "initial",
  "revert",
  "unset"
]);
var trimSpace2 = (str) => str.trim();
function parseGradient2(value, theme3) {
  if (value == null || globalSet2.has(value))
    return value;
  const prevent = isCSSFunction2(value) || globalSet2.has(value);
  if (!prevent)
    return `url('${value}')`;
  const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
  const results = regex.exec(value);
  const type = results == null ? void 0 : results[1];
  const values = results == null ? void 0 : results[2];
  if (!type || !values)
    return value;
  const _type = type.includes("-gradient") ? type : `${type}-gradient`;
  const [maybeDirection, ...stops] = values.split(",").map(trimSpace2).filter(Boolean);
  if ((stops == null ? void 0 : stops.length) === 0)
    return value;
  const direction3 = maybeDirection in directionMap2 ? directionMap2[maybeDirection] : maybeDirection;
  stops.unshift(direction3);
  const _values = stops.map((stop) => {
    if (valueSet2.has(stop))
      return stop;
    const firstStop = stop.indexOf(" ");
    const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
    const _stopOrFunc = isCSSFunction2(_stop) ? _stop : _stop && _stop.split(" ");
    const key = `colors.${_color}`;
    const color22 = key in theme3.__cssMap ? theme3.__cssMap[key].varRef : _color;
    return _stopOrFunc ? [
      color22,
      ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
    ].join(" ") : color22;
  });
  return `${_type}(${_values.join(", ")})`;
}
var isCSSFunction2 = (value) => {
  return typeof value === "string" && value.includes("(") && value.includes(")");
};
var gradientTransform2 = (value, theme3) => parseGradient2(value, theme3 != null ? theme3 : {});
function isCssVar3(value) {
  return /^var\(--.+\)$/.test(value);
}
var analyzeCSSValue3 = (value) => {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
};
var wrap2 = (str) => (value) => `${str}(${value})`;
var transformFunctions2 = {
  filter(value) {
    return value !== "auto" ? value : filterTemplate2;
  },
  backdropFilter(value) {
    return value !== "auto" ? value : backdropFilterTemplate2;
  },
  ring(value) {
    return getRingTemplate2(transformFunctions2.px(value));
  },
  bgClip(value) {
    return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
  },
  transform(value) {
    if (value === "auto")
      return getTransformTemplate2();
    if (value === "auto-gpu")
      return getTransformGpuTemplate2();
    return value;
  },
  vh(value) {
    return value === "$100vh" ? "var(--chakra-vh)" : value;
  },
  px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue3(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  },
  fraction(value) {
    return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
  },
  float(value, theme3) {
    const map = { left: "right", right: "left" };
    return theme3.direction === "rtl" ? map[value] : value;
  },
  degree(value) {
    if (isCssVar3(value) || value == null)
      return value;
    const unitless = typeof value === "string" && !value.endsWith("deg");
    return typeof value === "number" || unitless ? `${value}deg` : value;
  },
  gradient: gradientTransform2,
  blur: wrap2("blur"),
  opacity: wrap2("opacity"),
  brightness: wrap2("brightness"),
  contrast: wrap2("contrast"),
  dropShadow: wrap2("drop-shadow"),
  grayscale: wrap2("grayscale"),
  hueRotate: (value) => wrap2("hue-rotate")(transformFunctions2.degree(value)),
  invert: wrap2("invert"),
  saturate: wrap2("saturate"),
  sepia: wrap2("sepia"),
  bgImage(value) {
    if (value == null)
      return value;
    const prevent = isCSSFunction2(value) || globalSet2.has(value);
    return !prevent ? `url(${value})` : value;
  },
  outline(value) {
    const isNoneOrZero = String(value) === "0" || String(value) === "none";
    return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
  },
  flexDirection(value) {
    var _a10;
    const { space: space22, divide: divide22 } = (_a10 = flexDirectionTemplate2[value]) != null ? _a10 : {};
    const result = { flexDirection: value };
    if (space22)
      result[space22] = 1;
    if (divide22)
      result[divide22] = 1;
    return result;
  }
};
var t2 = {
  borderWidths: toConfig2("borderWidths"),
  borderStyles: toConfig2("borderStyles"),
  colors: toConfig2("colors"),
  borders: toConfig2("borders"),
  gradients: toConfig2("gradients", transformFunctions2.gradient),
  radii: toConfig2("radii", transformFunctions2.px),
  space: toConfig2("space", pipe2(transformFunctions2.vh, transformFunctions2.px)),
  spaceT: toConfig2("space", pipe2(transformFunctions2.vh, transformFunctions2.px)),
  degreeT(property) {
    return { property, transform: transformFunctions2.degree };
  },
  prop(property, scale, transform22) {
    return {
      property,
      scale,
      ...scale && {
        transform: createTransform2({ scale, transform: transform22 })
      }
    };
  },
  propT(property, transform22) {
    return { property, transform: transform22 };
  },
  sizes: toConfig2("sizes", pipe2(transformFunctions2.vh, transformFunctions2.px)),
  sizesT: toConfig2("sizes", pipe2(transformFunctions2.vh, transformFunctions2.fraction)),
  shadows: toConfig2("shadows"),
  logical: logical2,
  blur: toConfig2("blur", transformFunctions2.blur)
};
var background2 = {
  background: t2.colors("background"),
  backgroundColor: t2.colors("backgroundColor"),
  backgroundImage: t2.gradients("backgroundImage"),
  backgroundSize: true,
  backgroundPosition: true,
  backgroundRepeat: true,
  backgroundAttachment: true,
  backgroundClip: { transform: transformFunctions2.bgClip },
  bgSize: t2.prop("backgroundSize"),
  bgPosition: t2.prop("backgroundPosition"),
  bg: t2.colors("background"),
  bgColor: t2.colors("backgroundColor"),
  bgPos: t2.prop("backgroundPosition"),
  bgRepeat: t2.prop("backgroundRepeat"),
  bgAttachment: t2.prop("backgroundAttachment"),
  bgGradient: t2.gradients("backgroundImage"),
  bgClip: { transform: transformFunctions2.bgClip }
};
Object.assign(background2, {
  bgImage: background2.backgroundImage,
  bgImg: background2.backgroundImage
});
var border2 = {
  border: t2.borders("border"),
  borderWidth: t2.borderWidths("borderWidth"),
  borderStyle: t2.borderStyles("borderStyle"),
  borderColor: t2.colors("borderColor"),
  borderRadius: t2.radii("borderRadius"),
  borderTop: t2.borders("borderTop"),
  borderBlockStart: t2.borders("borderBlockStart"),
  borderTopLeftRadius: t2.radii("borderTopLeftRadius"),
  borderStartStartRadius: t2.logical({
    scale: "radii",
    property: {
      ltr: "borderTopLeftRadius",
      rtl: "borderTopRightRadius"
    }
  }),
  borderEndStartRadius: t2.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomLeftRadius",
      rtl: "borderBottomRightRadius"
    }
  }),
  borderTopRightRadius: t2.radii("borderTopRightRadius"),
  borderStartEndRadius: t2.logical({
    scale: "radii",
    property: {
      ltr: "borderTopRightRadius",
      rtl: "borderTopLeftRadius"
    }
  }),
  borderEndEndRadius: t2.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomRightRadius",
      rtl: "borderBottomLeftRadius"
    }
  }),
  borderRight: t2.borders("borderRight"),
  borderInlineEnd: t2.borders("borderInlineEnd"),
  borderBottom: t2.borders("borderBottom"),
  borderBlockEnd: t2.borders("borderBlockEnd"),
  borderBottomLeftRadius: t2.radii("borderBottomLeftRadius"),
  borderBottomRightRadius: t2.radii("borderBottomRightRadius"),
  borderLeft: t2.borders("borderLeft"),
  borderInlineStart: {
    property: "borderInlineStart",
    scale: "borders"
  },
  borderInlineStartRadius: t2.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
    }
  }),
  borderInlineEndRadius: t2.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
    }
  }),
  borderX: t2.borders(["borderLeft", "borderRight"]),
  borderInline: t2.borders("borderInline"),
  borderY: t2.borders(["borderTop", "borderBottom"]),
  borderBlock: t2.borders("borderBlock"),
  borderTopWidth: t2.borderWidths("borderTopWidth"),
  borderBlockStartWidth: t2.borderWidths("borderBlockStartWidth"),
  borderTopColor: t2.colors("borderTopColor"),
  borderBlockStartColor: t2.colors("borderBlockStartColor"),
  borderTopStyle: t2.borderStyles("borderTopStyle"),
  borderBlockStartStyle: t2.borderStyles("borderBlockStartStyle"),
  borderBottomWidth: t2.borderWidths("borderBottomWidth"),
  borderBlockEndWidth: t2.borderWidths("borderBlockEndWidth"),
  borderBottomColor: t2.colors("borderBottomColor"),
  borderBlockEndColor: t2.colors("borderBlockEndColor"),
  borderBottomStyle: t2.borderStyles("borderBottomStyle"),
  borderBlockEndStyle: t2.borderStyles("borderBlockEndStyle"),
  borderLeftWidth: t2.borderWidths("borderLeftWidth"),
  borderInlineStartWidth: t2.borderWidths("borderInlineStartWidth"),
  borderLeftColor: t2.colors("borderLeftColor"),
  borderInlineStartColor: t2.colors("borderInlineStartColor"),
  borderLeftStyle: t2.borderStyles("borderLeftStyle"),
  borderInlineStartStyle: t2.borderStyles("borderInlineStartStyle"),
  borderRightWidth: t2.borderWidths("borderRightWidth"),
  borderInlineEndWidth: t2.borderWidths("borderInlineEndWidth"),
  borderRightColor: t2.colors("borderRightColor"),
  borderInlineEndColor: t2.colors("borderInlineEndColor"),
  borderRightStyle: t2.borderStyles("borderRightStyle"),
  borderInlineEndStyle: t2.borderStyles("borderInlineEndStyle"),
  borderTopRadius: t2.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
  borderBottomRadius: t2.radii([
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ]),
  borderLeftRadius: t2.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
  borderRightRadius: t2.radii([
    "borderTopRightRadius",
    "borderBottomRightRadius"
  ])
};
Object.assign(border2, {
  rounded: border2.borderRadius,
  roundedTop: border2.borderTopRadius,
  roundedTopLeft: border2.borderTopLeftRadius,
  roundedTopRight: border2.borderTopRightRadius,
  roundedTopStart: border2.borderStartStartRadius,
  roundedTopEnd: border2.borderStartEndRadius,
  roundedBottom: border2.borderBottomRadius,
  roundedBottomLeft: border2.borderBottomLeftRadius,
  roundedBottomRight: border2.borderBottomRightRadius,
  roundedBottomStart: border2.borderEndStartRadius,
  roundedBottomEnd: border2.borderEndEndRadius,
  roundedLeft: border2.borderLeftRadius,
  roundedRight: border2.borderRightRadius,
  roundedStart: border2.borderInlineStartRadius,
  roundedEnd: border2.borderInlineEndRadius,
  borderStart: border2.borderInlineStart,
  borderEnd: border2.borderInlineEnd,
  borderTopStartRadius: border2.borderStartStartRadius,
  borderTopEndRadius: border2.borderStartEndRadius,
  borderBottomStartRadius: border2.borderEndStartRadius,
  borderBottomEndRadius: border2.borderEndEndRadius,
  borderStartRadius: border2.borderInlineStartRadius,
  borderEndRadius: border2.borderInlineEndRadius,
  borderStartWidth: border2.borderInlineStartWidth,
  borderEndWidth: border2.borderInlineEndWidth,
  borderStartColor: border2.borderInlineStartColor,
  borderEndColor: border2.borderInlineEndColor,
  borderStartStyle: border2.borderInlineStartStyle,
  borderEndStyle: border2.borderInlineEndStyle
});
var color2 = {
  color: t2.colors("color"),
  textColor: t2.colors("color"),
  fill: t2.colors("fill"),
  stroke: t2.colors("stroke")
};
var effect2 = {
  boxShadow: t2.shadows("boxShadow"),
  mixBlendMode: true,
  blendMode: t2.prop("mixBlendMode"),
  backgroundBlendMode: true,
  bgBlendMode: t2.prop("backgroundBlendMode"),
  opacity: true
};
Object.assign(effect2, {
  shadow: effect2.boxShadow
});
var filter2 = {
  filter: { transform: transformFunctions2.filter },
  blur: t2.blur("--chakra-blur"),
  brightness: t2.propT("--chakra-brightness", transformFunctions2.brightness),
  contrast: t2.propT("--chakra-contrast", transformFunctions2.contrast),
  hueRotate: t2.propT("--chakra-hue-rotate", transformFunctions2.hueRotate),
  invert: t2.propT("--chakra-invert", transformFunctions2.invert),
  saturate: t2.propT("--chakra-saturate", transformFunctions2.saturate),
  dropShadow: t2.propT("--chakra-drop-shadow", transformFunctions2.dropShadow),
  backdropFilter: { transform: transformFunctions2.backdropFilter },
  backdropBlur: t2.blur("--chakra-backdrop-blur"),
  backdropBrightness: t2.propT(
    "--chakra-backdrop-brightness",
    transformFunctions2.brightness
  ),
  backdropContrast: t2.propT("--chakra-backdrop-contrast", transformFunctions2.contrast),
  backdropHueRotate: t2.propT(
    "--chakra-backdrop-hue-rotate",
    transformFunctions2.hueRotate
  ),
  backdropInvert: t2.propT("--chakra-backdrop-invert", transformFunctions2.invert),
  backdropSaturate: t2.propT("--chakra-backdrop-saturate", transformFunctions2.saturate)
};
var flexbox2 = {
  alignItems: true,
  alignContent: true,
  justifyItems: true,
  justifyContent: true,
  flexWrap: true,
  flexDirection: { transform: transformFunctions2.flexDirection },
  flex: true,
  flexFlow: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: t2.sizes("flexBasis"),
  justifySelf: true,
  alignSelf: true,
  order: true,
  placeItems: true,
  placeContent: true,
  placeSelf: true,
  gap: t2.space("gap"),
  rowGap: t2.space("rowGap"),
  columnGap: t2.space("columnGap")
};
Object.assign(flexbox2, {
  flexDir: flexbox2.flexDirection
});
var grid2 = {
  gridGap: t2.space("gridGap"),
  gridColumnGap: t2.space("gridColumnGap"),
  gridRowGap: t2.space("gridRowGap"),
  gridColumn: true,
  gridRow: true,
  gridAutoFlow: true,
  gridAutoColumns: true,
  gridColumnStart: true,
  gridColumnEnd: true,
  gridRowStart: true,
  gridRowEnd: true,
  gridAutoRows: true,
  gridTemplate: true,
  gridTemplateColumns: true,
  gridTemplateRows: true,
  gridTemplateAreas: true,
  gridArea: true
};
var interactivity2 = {
  appearance: true,
  cursor: true,
  resize: true,
  userSelect: true,
  pointerEvents: true,
  outline: { transform: transformFunctions2.outline },
  outlineOffset: true,
  outlineColor: t2.colors("outlineColor")
};
var layout2 = {
  width: t2.sizesT("width"),
  inlineSize: t2.sizesT("inlineSize"),
  height: t2.sizes("height"),
  blockSize: t2.sizes("blockSize"),
  boxSize: t2.sizes(["width", "height"]),
  minWidth: t2.sizes("minWidth"),
  minInlineSize: t2.sizes("minInlineSize"),
  minHeight: t2.sizes("minHeight"),
  minBlockSize: t2.sizes("minBlockSize"),
  maxWidth: t2.sizes("maxWidth"),
  maxInlineSize: t2.sizes("maxInlineSize"),
  maxHeight: t2.sizes("maxHeight"),
  maxBlockSize: t2.sizes("maxBlockSize"),
  overflow: true,
  overflowX: true,
  overflowY: true,
  overscrollBehavior: true,
  overscrollBehaviorX: true,
  overscrollBehaviorY: true,
  display: true,
  aspectRatio: true,
  hideFrom: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a10, _b8, _c5;
      const breakpoint = (_c5 = (_b8 = (_a10 = theme3.__breakpoints) == null ? void 0 : _a10.get(value)) == null ? void 0 : _b8.minW) != null ? _c5 : value;
      const mq = `@media screen and (min-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  hideBelow: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a10, _b8, _c5;
      const breakpoint = (_c5 = (_b8 = (_a10 = theme3.__breakpoints) == null ? void 0 : _a10.get(value)) == null ? void 0 : _b8._minW) != null ? _c5 : value;
      const mq = `@media screen and (max-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  verticalAlign: true,
  boxSizing: true,
  boxDecorationBreak: true,
  float: t2.propT("float", transformFunctions2.float),
  objectFit: true,
  objectPosition: true,
  visibility: true,
  isolation: true
};
Object.assign(layout2, {
  w: layout2.width,
  h: layout2.height,
  minW: layout2.minWidth,
  maxW: layout2.maxWidth,
  minH: layout2.minHeight,
  maxH: layout2.maxHeight,
  overscroll: layout2.overscrollBehavior,
  overscrollX: layout2.overscrollBehaviorX,
  overscrollY: layout2.overscrollBehaviorY
});
var list2 = {
  listStyleType: true,
  listStylePosition: true,
  listStylePos: t2.prop("listStylePosition"),
  listStyleImage: true,
  listStyleImg: t2.prop("listStyleImage")
};
function get2(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize2 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet2 = memoize2(get2);
var srOnly2 = {
  border: "0px",
  clip: "rect(0, 0, 0, 0)",
  width: "1px",
  height: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
var srFocusable2 = {
  position: "static",
  width: "auto",
  height: "auto",
  clip: "auto",
  padding: "0",
  margin: "0",
  overflow: "visible",
  whiteSpace: "normal"
};
var getWithPriority2 = (theme3, key, styles3) => {
  const result = {};
  const obj = memoizedGet2(theme3, key, {});
  for (const prop in obj) {
    const isInStyles = prop in styles3 && styles3[prop] != null;
    if (!isInStyles)
      result[prop] = obj[prop];
  }
  return result;
};
var others2 = {
  srOnly: {
    transform(value) {
      if (value === true)
        return srOnly2;
      if (value === "focusable")
        return srFocusable2;
      return {};
    }
  },
  layerStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority2(theme3, `layerStyles.${value}`, styles3)
  },
  textStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority2(theme3, `textStyles.${value}`, styles3)
  },
  apply: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority2(theme3, value, styles3)
  }
};
var position2 = {
  position: true,
  pos: t2.prop("position"),
  zIndex: t2.prop("zIndex", "zIndices"),
  inset: t2.spaceT("inset"),
  insetX: t2.spaceT(["left", "right"]),
  insetInline: t2.spaceT("insetInline"),
  insetY: t2.spaceT(["top", "bottom"]),
  insetBlock: t2.spaceT("insetBlock"),
  top: t2.spaceT("top"),
  insetBlockStart: t2.spaceT("insetBlockStart"),
  bottom: t2.spaceT("bottom"),
  insetBlockEnd: t2.spaceT("insetBlockEnd"),
  left: t2.spaceT("left"),
  insetInlineStart: t2.logical({
    scale: "space",
    property: { ltr: "left", rtl: "right" }
  }),
  right: t2.spaceT("right"),
  insetInlineEnd: t2.logical({
    scale: "space",
    property: { ltr: "right", rtl: "left" }
  })
};
Object.assign(position2, {
  insetStart: position2.insetInlineStart,
  insetEnd: position2.insetInlineEnd
});
var ring2 = {
  ring: { transform: transformFunctions2.ring },
  ringColor: t2.colors("--chakra-ring-color"),
  ringOffset: t2.prop("--chakra-ring-offset-width"),
  ringOffsetColor: t2.colors("--chakra-ring-offset-color"),
  ringInset: t2.prop("--chakra-ring-inset")
};
var space2 = {
  margin: t2.spaceT("margin"),
  marginTop: t2.spaceT("marginTop"),
  marginBlockStart: t2.spaceT("marginBlockStart"),
  marginRight: t2.spaceT("marginRight"),
  marginInlineEnd: t2.spaceT("marginInlineEnd"),
  marginBottom: t2.spaceT("marginBottom"),
  marginBlockEnd: t2.spaceT("marginBlockEnd"),
  marginLeft: t2.spaceT("marginLeft"),
  marginInlineStart: t2.spaceT("marginInlineStart"),
  marginX: t2.spaceT(["marginInlineStart", "marginInlineEnd"]),
  marginInline: t2.spaceT("marginInline"),
  marginY: t2.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t2.spaceT("marginBlock"),
  padding: t2.space("padding"),
  paddingTop: t2.space("paddingTop"),
  paddingBlockStart: t2.space("paddingBlockStart"),
  paddingRight: t2.space("paddingRight"),
  paddingBottom: t2.space("paddingBottom"),
  paddingBlockEnd: t2.space("paddingBlockEnd"),
  paddingLeft: t2.space("paddingLeft"),
  paddingInlineStart: t2.space("paddingInlineStart"),
  paddingInlineEnd: t2.space("paddingInlineEnd"),
  paddingX: t2.space(["paddingInlineStart", "paddingInlineEnd"]),
  paddingInline: t2.space("paddingInline"),
  paddingY: t2.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t2.space("paddingBlock")
};
Object.assign(space2, {
  m: space2.margin,
  mt: space2.marginTop,
  mr: space2.marginRight,
  me: space2.marginInlineEnd,
  marginEnd: space2.marginInlineEnd,
  mb: space2.marginBottom,
  ml: space2.marginLeft,
  ms: space2.marginInlineStart,
  marginStart: space2.marginInlineStart,
  mx: space2.marginX,
  my: space2.marginY,
  p: space2.padding,
  pt: space2.paddingTop,
  py: space2.paddingY,
  px: space2.paddingX,
  pb: space2.paddingBottom,
  pl: space2.paddingLeft,
  ps: space2.paddingInlineStart,
  paddingStart: space2.paddingInlineStart,
  pr: space2.paddingRight,
  pe: space2.paddingInlineEnd,
  paddingEnd: space2.paddingInlineEnd
});
var textDecoration2 = {
  textDecorationColor: t2.colors("textDecorationColor"),
  textDecoration: true,
  textDecor: { property: "textDecoration" },
  textDecorationLine: true,
  textDecorationStyle: true,
  textDecorationThickness: true,
  textUnderlineOffset: true,
  textShadow: t2.shadows("textShadow")
};
var transform2 = {
  clipPath: true,
  transform: t2.propT("transform", transformFunctions2.transform),
  transformOrigin: true,
  translateX: t2.spaceT("--chakra-translate-x"),
  translateY: t2.spaceT("--chakra-translate-y"),
  skewX: t2.degreeT("--chakra-skew-x"),
  skewY: t2.degreeT("--chakra-skew-y"),
  scaleX: t2.prop("--chakra-scale-x"),
  scaleY: t2.prop("--chakra-scale-y"),
  scale: t2.prop(["--chakra-scale-x", "--chakra-scale-y"]),
  rotate: t2.degreeT("--chakra-rotate")
};
var transition3 = {
  transition: true,
  transitionDelay: true,
  animation: true,
  willChange: true,
  transitionDuration: t2.prop("transitionDuration", "transition.duration"),
  transitionProperty: t2.prop("transitionProperty", "transition.property"),
  transitionTimingFunction: t2.prop(
    "transitionTimingFunction",
    "transition.easing"
  )
};
var typography3 = {
  fontFamily: t2.prop("fontFamily", "fonts"),
  fontSize: t2.prop("fontSize", "fontSizes", transformFunctions2.px),
  fontWeight: t2.prop("fontWeight", "fontWeights"),
  lineHeight: t2.prop("lineHeight", "lineHeights"),
  letterSpacing: t2.prop("letterSpacing", "letterSpacings"),
  textAlign: true,
  fontStyle: true,
  textIndent: true,
  wordBreak: true,
  overflowWrap: true,
  textOverflow: true,
  textTransform: true,
  whiteSpace: true,
  isTruncated: {
    transform(value) {
      if (value === true) {
        return {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        };
      }
    }
  },
  noOfLines: {
    static: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      //@ts-ignore
      WebkitLineClamp: "var(--chakra-line-clamp)"
    },
    property: "--chakra-line-clamp"
  }
};
var scroll2 = {
  scrollBehavior: true,
  scrollSnapAlign: true,
  scrollSnapStop: true,
  scrollSnapType: true,
  // scroll margin
  scrollMargin: t2.spaceT("scrollMargin"),
  scrollMarginTop: t2.spaceT("scrollMarginTop"),
  scrollMarginBottom: t2.spaceT("scrollMarginBottom"),
  scrollMarginLeft: t2.spaceT("scrollMarginLeft"),
  scrollMarginRight: t2.spaceT("scrollMarginRight"),
  scrollMarginX: t2.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
  scrollMarginY: t2.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
  // scroll padding
  scrollPadding: t2.spaceT("scrollPadding"),
  scrollPaddingTop: t2.spaceT("scrollPaddingTop"),
  scrollPaddingBottom: t2.spaceT("scrollPaddingBottom"),
  scrollPaddingLeft: t2.spaceT("scrollPaddingLeft"),
  scrollPaddingRight: t2.spaceT("scrollPaddingRight"),
  scrollPaddingX: t2.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
  scrollPaddingY: t2.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
};
function resolveReference2(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpression2 = (operator, ...operands) => operands.map(resolveReference2).join(` ${operator} `).replace(/calc/g, "");
var add2 = (...operands) => `calc(${toExpression2("+", ...operands)})`;
var subtract3 = (...operands) => `calc(${toExpression2("-", ...operands)})`;
var multiply2 = (...operands) => `calc(${toExpression2("*", ...operands)})`;
var divide2 = (...operands) => `calc(${toExpression2("/", ...operands)})`;
var negate2 = (x) => {
  const value = resolveReference2(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply2(value, -1);
};
var calc2 = Object.assign(
  (x) => ({
    add: (...operands) => calc2(add2(x, ...operands)),
    subtract: (...operands) => calc2(subtract3(x, ...operands)),
    multiply: (...operands) => calc2(multiply2(x, ...operands)),
    divide: (...operands) => calc2(divide2(x, ...operands)),
    negate: () => calc2(negate2(x)),
    toString: () => x.toString()
  }),
  {
    add: add2,
    subtract: subtract3,
    multiply: multiply2,
    divide: divide2,
    negate: negate2
  }
);
function replaceWhiteSpace2(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape2(value) {
  const valueStr = replaceWhiteSpace2(value.toString());
  return escapeSymbol2(escapeDot2(valueStr));
}
function escapeDot2(value) {
  if (value.includes("\\."))
    return value;
  const isDecimal3 = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal3 ? value.replace(".", `\\.`) : value;
}
function escapeSymbol2(value) {
  return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
}
function addPrefix2(value, prefix = "") {
  return [prefix, value].filter(Boolean).join("-");
}
function toVarReference2(name, fallback) {
  return `var(${name}${fallback ? `, ${fallback}` : ""})`;
}
function toVarDefinition2(value, prefix = "") {
  return escape2(`--${addPrefix2(value, prefix)}`);
}
function cssVar2(name, fallback, cssVarPrefix) {
  const cssVariable = toVarDefinition2(name, cssVarPrefix);
  return {
    variable: cssVariable,
    reference: toVarReference2(cssVariable, fallback)
  };
}
function defineCssVars(scope, keys2) {
  const vars3 = {};
  for (const key of keys2) {
    if (Array.isArray(key)) {
      const [name, fallback] = key;
      vars3[name] = cssVar2(`${scope}-${name}`, fallback);
      continue;
    }
    vars3[key] = cssVar2(`${scope}-${key}`);
  }
  return vars3;
}
var state2 = {
  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
  focusVisible: (str, post) => `${str}:focus-visible ${post}`,
  focusWithin: (str, post) => `${str}:focus-within ${post}`,
  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
  indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
  readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
  expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
};
var toGroup2 = (fn) => merge2((v) => fn(v, "&"), "[role=group]", "[data-group]", ".group");
var toPeer2 = (fn) => merge2((v) => fn(v, "~ &"), "[data-peer]", ".peer");
var merge2 = (fn, ...selectors) => selectors.map(fn).join(", ");
var pseudoSelectors2 = {
  /**
   * Styles for CSS selector `&:hover`
   */
  _hover: "&:hover, &[data-hover]",
  /**
   * Styles for CSS Selector `&:active`
   */
  _active: "&:active, &[data-active]",
  /**
   * Styles for CSS selector `&:focus`
   *
   */
  _focus: "&:focus, &[data-focus]",
  /**
   * Styles for the highlighted state.
   */
  _highlighted: "&[data-highlighted]",
  /**
   * Styles to apply when a child of this element has received focus
   * - CSS Selector `&:focus-within`
   */
  _focusWithin: "&:focus-within",
  /**
   * Styles to apply when this element has received focus via tabbing
   * - CSS Selector `&:focus-visible`
   */
  _focusVisible: "&:focus-visible, &[data-focus-visible]",
  /**
   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:
   * - `&[aria-disabled=true]`
   * - `&:disabled`
   * - `&[data-disabled]`
   * - `&[disabled]`
   */
  _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
  /**
   * Styles for CSS Selector `&:readonly`
   */
  _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
  /**
   * Styles for CSS selector `&::before`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _before={{content:`""` }}/>
   * ```
   */
  _before: "&::before",
  /**
   * Styles for CSS selector `&::after`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _after={{content:`""` }}/>
   * ```
   */
  _after: "&::after",
  /**
   * Styles for CSS selector `&:empty`
   */
  _empty: "&:empty",
  /**
   * Styles to apply when the ARIA attribute `aria-expanded` is `true`
   * - CSS selector `&[aria-expanded=true]`
   */
  _expanded: "&[aria-expanded=true], &[data-expanded]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `true`
   * - CSS selector `&[aria-checked=true]`
   */
  _checked: "&[aria-checked=true], &[data-checked]",
  /**
   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`
   * - CSS selector `&[aria-grabbed=true]`
   */
  _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
  /**
   * Styles for CSS Selector `&[aria-pressed=true]`
   * Typically used to style the current "pressed" state of toggle buttons
   */
  _pressed: "&[aria-pressed=true], &[data-pressed]",
  /**
   * Styles to apply when the ARIA attribute `aria-invalid` is `true`
   * - CSS selector `&[aria-invalid=true]`
   */
  _invalid: "&[aria-invalid=true], &[data-invalid]",
  /**
   * Styles for the valid state
   * - CSS selector `&[data-valid], &[data-state=valid]`
   */
  _valid: "&[data-valid], &[data-state=valid]",
  /**
   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.
   * Useful for styling loading states
   */
  _loading: "&[data-loading], &[aria-busy=true]",
  /**
   * Styles to apply when the ARIA attribute `aria-selected` is `true`
   *
   * - CSS selector `&[aria-selected=true]`
   */
  _selected: "&[aria-selected=true], &[data-selected]",
  /**
   * Styles for CSS Selector `[hidden=true]`
   */
  _hidden: "&[hidden], &[data-hidden]",
  /**
   * Styles for CSS Selector `&:-webkit-autofill`
   */
  _autofill: "&:-webkit-autofill",
  /**
   * Styles for CSS Selector `&:nth-child(even)`
   */
  _even: "&:nth-of-type(even)",
  /**
   * Styles for CSS Selector `&:nth-child(odd)`
   */
  _odd: "&:nth-of-type(odd)",
  /**
   * Styles for CSS Selector `&:first-of-type`
   */
  _first: "&:first-of-type",
  /**
   * Styles for CSS selector `&::first-letter`
   *
   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.
   * @example
   * ```jsx
   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>
   * ```
   */
  _firstLetter: "&::first-letter",
  /**
   * Styles for CSS Selector `&:last-of-type`
   */
  _last: "&:last-of-type",
  /**
   * Styles for CSS Selector `&:not(:first-of-type)`
   */
  _notFirst: "&:not(:first-of-type)",
  /**
   * Styles for CSS Selector `&:not(:last-of-type)`
   */
  _notLast: "&:not(:last-of-type)",
  /**
   * Styles for CSS Selector `&:visited`
   */
  _visited: "&:visited",
  /**
   * Used to style the active link in a navigation
   * Styles for CSS Selector `&[aria-current=page]`
   */
  _activeLink: "&[aria-current=page]",
  /**
   * Used to style the current step within a process
   * Styles for CSS Selector `&[aria-current=step]`
   */
  _activeStep: "&[aria-current=step]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`
   * - CSS selector `&[aria-checked=mixed]`
   */
  _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered
   */
  _groupHover: toGroup2(state2.hover),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered
   */
  _peerHover: toPeer2(state2.hover),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused
   */
  _groupFocus: toGroup2(state2.focus),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused
   */
  _peerFocus: toPeer2(state2.focus),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus
   */
  _groupFocusVisible: toGroup2(state2.focusVisible),
  /**
   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus
   */
  _peerFocusVisible: toPeer2(state2.focusVisible),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active
   */
  _groupActive: toGroup2(state2.active),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is active
   */
  _peerActive: toPeer2(state2.active),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled
   */
  _groupDisabled: toGroup2(state2.disabled),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled
   */
  _peerDisabled: toPeer2(state2.disabled),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid
   */
  _groupInvalid: toGroup2(state2.invalid),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid
   */
  _peerInvalid: toPeer2(state2.invalid),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked
   */
  _groupChecked: toGroup2(state2.checked),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked
   */
  _peerChecked: toPeer2(state2.checked),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within
   */
  _groupFocusWithin: toGroup2(state2.focusWithin),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within
   */
  _peerFocusWithin: toPeer2(state2.focusWithin),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown
   */
  _peerPlaceholderShown: toPeer2(state2.placeholderShown),
  /**
   * Styles for CSS Selector `&::placeholder`.
   */
  _placeholder: "&::placeholder",
  /**
   * Styles for CSS Selector `&:placeholder-shown`.
   */
  _placeholderShown: "&:placeholder-shown",
  /**
   * Styles for CSS Selector `&:fullscreen`.
   */
  _fullScreen: "&:fullscreen",
  /**
   * Styles for CSS Selector `&::selection`
   */
  _selection: "&::selection",
  /**
   * Styles for CSS Selector `[dir=rtl] &`
   * It is applied when a parent element or this element has `dir="rtl"`
   */
  _rtl: "[dir=rtl] &, &[dir=rtl]",
  /**
   * Styles for CSS Selector `[dir=ltr] &`
   * It is applied when a parent element or this element has `dir="ltr"`
   */
  _ltr: "[dir=ltr] &, &[dir=ltr]",
  /**
   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`
   * It is used when the user has requested the system use a light or dark color theme.
   */
  _mediaDark: "@media (prefers-color-scheme: dark)",
  /**
   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`
   * It is used when the user has requested the system to reduce the amount of animations.
   */
  _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",
  /**
   * Styles for the CSS Selector `&[data-orientation=horizontal]`
   */
  _horizontal: "&[data-orientation=horizontal]",
  /**
   * Styles for the CSS Selector `&[data-orientation=vertical]`
   */
  _vertical: "&[data-orientation=vertical]"
};
var pseudoPropNames2 = Object.keys(
  pseudoSelectors2
);
var systemProps2 = (0, import_lodash7.default)(
  {},
  background2,
  border2,
  color2,
  flexbox2,
  layout2,
  filter2,
  ring2,
  interactivity2,
  grid2,
  others2,
  position2,
  effect2,
  space2,
  scroll2,
  typography3,
  textDecoration2,
  transform2,
  list2,
  transition3
);
var layoutSystem2 = Object.assign({}, space2, layout2, flexbox2, grid2, position2);
var layoutPropNames2 = Object.keys(
  layoutSystem2
);
var propNames2 = [...Object.keys(systemProps2), ...pseudoPropNames2];
var styleProps2 = { ...systemProps2, ...pseudoSelectors2 };
function defineStyle(styles3) {
  return styles3;
}
function defineStyleConfig(config3) {
  return config3;
}
function createMultiStyleConfigHelpers(parts) {
  return {
    definePartsStyle(config3) {
      return config3;
    },
    defineMultiStyleConfig(config3) {
      return { parts, ...config3 };
    }
  };
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-Q5NOVGYN.mjs
var { defineMultiStyleConfig, definePartsStyle } = createMultiStyleConfigHelpers([
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
]);
var $size = cssVar2("stepper-indicator-size");
var $iconSize = cssVar2("stepper-icon-size");
var $titleFontSize = cssVar2("stepper-title-font-size");
var $descFontSize = cssVar2("stepper-description-font-size");
var $accentColor = cssVar2("stepper-accent-color");
var baseStyle = definePartsStyle(({ colorScheme: c }) => ({
  stepper: {
    display: "flex",
    justifyContent: "space-between",
    gap: "4",
    "&[data-orientation=vertical]": {
      flexDirection: "column",
      alignItems: "flex-start"
    },
    "&[data-orientation=horizontal]": {
      flexDirection: "row",
      alignItems: "center"
    },
    [$accentColor.variable]: `colors.${c}.500`,
    _dark: {
      [$accentColor.variable]: `colors.${c}.200`
    }
  },
  title: {
    fontSize: $titleFontSize.reference,
    fontWeight: "medium"
  },
  description: {
    fontSize: $descFontSize.reference,
    color: "chakra-subtle-text"
  },
  number: {
    fontSize: $titleFontSize.reference
  },
  step: {
    flexShrink: 0,
    position: "relative",
    display: "flex",
    gap: "2",
    "&[data-orientation=horizontal]": {
      alignItems: "center"
    },
    flex: "1",
    "&:last-of-type:not([data-stretch])": {
      flex: "initial"
    }
  },
  icon: {
    flexShrink: 0,
    width: $iconSize.reference,
    height: $iconSize.reference
  },
  indicator: {
    flexShrink: 0,
    borderRadius: "full",
    width: $size.reference,
    height: $size.reference,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    "&[data-status=active]": {
      borderWidth: "2px",
      borderColor: $accentColor.reference
    },
    "&[data-status=complete]": {
      bg: $accentColor.reference,
      color: "chakra-inverse-text"
    },
    "&[data-status=incomplete]": {
      borderWidth: "2px"
    }
  },
  separator: {
    bg: "chakra-border-color",
    flex: "1",
    "&[data-status=complete]": {
      bg: $accentColor.reference
    },
    "&[data-orientation=horizontal]": {
      width: "100%",
      height: "2px",
      marginStart: "2"
    },
    "&[data-orientation=vertical]": {
      width: "2px",
      position: "absolute",
      height: "100%",
      maxHeight: `calc(100% - ${$size.reference} - 8px)`,
      top: `calc(${$size.reference} + 4px)`,
      insetStart: `calc(${$size.reference} / 2 - 1px)`
    }
  }
}));
var stepperTheme = defineMultiStyleConfig({
  baseStyle,
  sizes: {
    xs: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.4",
        [$iconSize.variable]: "sizes.3",
        [$titleFontSize.variable]: "fontSizes.xs",
        [$descFontSize.variable]: "fontSizes.xs"
      }
    }),
    sm: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.6",
        [$iconSize.variable]: "sizes.4",
        [$titleFontSize.variable]: "fontSizes.sm",
        [$descFontSize.variable]: "fontSizes.xs"
      }
    }),
    md: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.8",
        [$iconSize.variable]: "sizes.5",
        [$titleFontSize.variable]: "fontSizes.md",
        [$descFontSize.variable]: "fontSizes.sm"
      }
    }),
    lg: definePartsStyle({
      stepper: {
        [$size.variable]: "sizes.10",
        [$iconSize.variable]: "sizes.6",
        [$titleFontSize.variable]: "fontSizes.lg",
        [$descFontSize.variable]: "fontSizes.md"
      }
    })
  },
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/anatomy/dist/chunk-OA3DH5LS.mjs
function anatomy(name, map = {}) {
  let called = false;
  function assert() {
    if (!called) {
      called = true;
      return;
    }
    throw new Error(
      "[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?"
    );
  }
  function parts(...values) {
    assert();
    for (const part of values) {
      ;
      map[part] = toPart(part);
    }
    return anatomy(name, map);
  }
  function extend(...parts2) {
    for (const part of parts2) {
      if (part in map)
        continue;
      map[part] = toPart(part);
    }
    return anatomy(name, map);
  }
  function selectors() {
    const value = Object.fromEntries(
      Object.entries(map).map(([key, part]) => [key, part.selector])
    );
    return value;
  }
  function classnames() {
    const value = Object.fromEntries(
      Object.entries(map).map(([key, part]) => [key, part.className])
    );
    return value;
  }
  function toPart(part) {
    const el = ["container", "root"].includes(part != null ? part : "") ? [name] : [name, part];
    const attr = el.filter(Boolean).join("__");
    const className = `chakra-${attr}`;
    const partObj = {
      className,
      selector: `.${className}`,
      toString: () => part
    };
    return partObj;
  }
  const __type = {};
  return {
    parts,
    toPart,
    extend,
    selectors,
    classnames,
    get keys() {
      return Object.keys(map);
    },
    __type
  };
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/anatomy/dist/chunk-7OOI6RFH.mjs
var accordionAnatomy = anatomy("accordion").parts("root", "container", "button", "panel").extend("icon");
var alertAnatomy = anatomy("alert").parts("title", "description", "container").extend("icon", "spinner");
var avatarAnatomy = anatomy("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
var breadcrumbAnatomy = anatomy("breadcrumb").parts("link", "item", "container").extend("separator");
var buttonAnatomy = anatomy("button").parts();
var checkboxAnatomy = anatomy("checkbox").parts("control", "icon", "container").extend("label");
var circularProgressAnatomy = anatomy("progress").parts("track", "filledTrack").extend("label");
var drawerAnatomy = anatomy("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var editableAnatomy = anatomy("editable").parts(
  "preview",
  "input",
  "textarea"
);
var formAnatomy = anatomy("form").parts(
  "container",
  "requiredIndicator",
  "helperText"
);
var formErrorAnatomy = anatomy("formError").parts("text", "icon");
var inputAnatomy = anatomy("input").parts(
  "addon",
  "field",
  "element",
  "group"
);
var listAnatomy = anatomy("list").parts("container", "item", "icon");
var menuAnatomy = anatomy("menu").parts("button", "list", "item").extend("groupTitle", "icon", "command", "divider");
var modalAnatomy = anatomy("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var numberInputAnatomy = anatomy("numberinput").parts(
  "root",
  "field",
  "stepperGroup",
  "stepper"
);
var pinInputAnatomy = anatomy("pininput").parts("field");
var popoverAnatomy = anatomy("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
var progressAnatomy = anatomy("progress").parts(
  "label",
  "filledTrack",
  "track"
);
var radioAnatomy = anatomy("radio").parts(
  "container",
  "control",
  "label"
);
var selectAnatomy = anatomy("select").parts("field", "icon");
var sliderAnatomy = anatomy("slider").parts(
  "container",
  "track",
  "thumb",
  "filledTrack",
  "mark"
);
var statAnatomy = anatomy("stat").parts(
  "container",
  "label",
  "helpText",
  "number",
  "icon"
);
var switchAnatomy = anatomy("switch").parts(
  "container",
  "track",
  "thumb",
  "label"
);
var tableAnatomy = anatomy("table").parts(
  "table",
  "thead",
  "tbody",
  "tr",
  "th",
  "td",
  "tfoot",
  "caption"
);
var tabsAnatomy = anatomy("tabs").parts(
  "root",
  "tab",
  "tablist",
  "tabpanel",
  "tabpanels",
  "indicator"
);
var tagAnatomy = anatomy("tag").parts(
  "container",
  "label",
  "closeButton"
);
var cardAnatomy = anatomy("card").parts(
  "container",
  "header",
  "body",
  "footer"
);
var stepperAnatomy = anatomy("stepper").parts(
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
);

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-6IC2I3BY.mjs
function dlv_es_default(t4, e, l, n, r) {
  for (e = e.split ? e.split(".") : e, n = 0; n < e.length; n++)
    t4 = t4 ? t4[e[n]] : r;
  return t4 === r ? l : t4;
}
var isEmptyObject = (obj) => Object.keys(obj).length === 0;
var getColor = (theme3, color4, fallback) => {
  const hex = dlv_es_default(theme3, `colors.${color4}`, color4);
  try {
    toHex(hex);
    return hex;
  } catch {
    return fallback != null ? fallback : "#000000";
  }
};
var getBrightness = (color4) => {
  const [r, g, b] = parseToRgba(color4);
  return (r * 299 + g * 587 + b * 114) / 1e3;
};
var tone = (color4) => (theme3) => {
  const hex = getColor(theme3, color4);
  const brightness = getBrightness(hex);
  const isDark22 = brightness < 128;
  return isDark22 ? "dark" : "light";
};
var isDark = (color4) => (theme3) => tone(color4)(theme3) === "dark";
var transparentize2 = (color4, opacity) => (theme3) => {
  const raw = getColor(theme3, color4);
  return transparentize(raw, 1 - opacity);
};
function generateStripe(size3 = "1rem", color4 = "rgba(255, 255, 255, 0.15)") {
  return {
    backgroundImage: `linear-gradient(
    45deg,
    ${color4} 25%,
    transparent 25%,
    transparent 50%,
    ${color4} 50%,
    ${color4} 75%,
    transparent 75%,
    transparent
  )`,
    backgroundSize: `${size3} ${size3}`
  };
}
var randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
function randomColor(opts) {
  const fallback = randomHex();
  if (!opts || isEmptyObject(opts)) {
    return fallback;
  }
  if (opts.string && opts.colors) {
    return randomColorFromList(opts.string, opts.colors);
  }
  if (opts.string && !opts.colors) {
    return randomColorFromString(opts.string);
  }
  if (opts.colors && !opts.string) {
    return randomFromList(opts.colors);
  }
  return fallback;
}
function randomColorFromString(str) {
  let hash = 0;
  if (str.length === 0)
    return hash.toString();
  for (let i = 0; i < str.length; i += 1) {
    hash = str.charCodeAt(i) + ((hash << 5) - hash);
    hash = hash & hash;
  }
  let color4 = "#";
  for (let j = 0; j < 3; j += 1) {
    const value = hash >> j * 8 & 255;
    color4 += `00${value.toString(16)}`.substr(-2);
  }
  return color4;
}
function randomColorFromList(str, list4) {
  let index = 0;
  if (str.length === 0)
    return list4[0];
  for (let i = 0; i < str.length; i += 1) {
    index = str.charCodeAt(i) + ((index << 5) - index);
    index = index & index;
  }
  index = (index % list4.length + list4.length) % list4.length;
  return list4[index];
}
function randomFromList(list4) {
  return list4[Math.floor(Math.random() * list4.length)];
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-FNB7ZWWX.mjs
function mode(light, dark) {
  return (props) => props.colorMode === "dark" ? dark : light;
}
function orient(options) {
  const { orientation, vertical, horizontal } = options;
  if (!orientation)
    return {};
  return orientation === "vertical" ? vertical : horizontal;
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-XMZHFSTS.mjs
function toRef(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpr = (operator, ...operands) => operands.map(toRef).join(` ${operator} `).replace(/calc/g, "");
var add3 = (...operands) => `calc(${toExpr("+", ...operands)})`;
var subtract4 = (...operands) => `calc(${toExpr("-", ...operands)})`;
var multiply3 = (...operands) => `calc(${toExpr("*", ...operands)})`;
var divide3 = (...operands) => `calc(${toExpr("/", ...operands)})`;
var negate3 = (x) => {
  const value = toRef(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply3(value, -1);
};
var calc3 = Object.assign(
  (x) => ({
    add: (...operands) => calc3(add3(x, ...operands)),
    subtract: (...operands) => calc3(subtract4(x, ...operands)),
    multiply: (...operands) => calc3(multiply3(x, ...operands)),
    divide: (...operands) => calc3(divide3(x, ...operands)),
    negate: () => calc3(negate3(x)),
    toString: () => x.toString()
  }),
  {
    add: add3,
    subtract: subtract4,
    multiply: multiply3,
    divide: divide3,
    negate: negate3
  }
);

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme-tools/dist/chunk-WSAJBJJ4.mjs
function isDecimal(value) {
  return !Number.isInteger(parseFloat(value.toString()));
}
function replaceWhiteSpace3(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape3(value) {
  const valueStr = replaceWhiteSpace3(value.toString());
  if (valueStr.includes("\\."))
    return value;
  return isDecimal(value) ? valueStr.replace(".", `\\.`) : value;
}
function addPrefix3(value, prefix = "") {
  return [prefix, escape3(value)].filter(Boolean).join("-");
}
function toVarRef(name, fallback) {
  return `var(${escape3(name)}${fallback ? `, ${fallback}` : ""})`;
}
function toVar(value, prefix = "") {
  return `--${addPrefix3(value, prefix)}`;
}
function cssVar3(name, options) {
  const cssVariable = toVar(name, options == null ? void 0 : options.prefix);
  return {
    variable: cssVariable,
    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))
  };
}
function getFallback(fallback) {
  if (typeof fallback === "string")
    return fallback;
  return fallback == null ? void 0 : fallback.reference;
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-SG67NFYS.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig2, definePartsStyle: definePartsStyle2 } = createMultiStyleConfigHelpers(switchAnatomy.keys);
var $width = cssVar3("switch-track-width");
var $height = cssVar3("switch-track-height");
var $diff = cssVar3("switch-track-diff");
var diffValue = calc3.subtract($width, $height);
var $translateX = cssVar3("switch-thumb-x");
var $bg = cssVar3("switch-bg");
var baseStyleTrack = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    borderRadius: "full",
    p: "0.5",
    width: [$width.reference],
    height: [$height.reference],
    transitionProperty: "common",
    transitionDuration: "fast",
    [$bg.variable]: "colors.gray.300",
    _dark: {
      [$bg.variable]: "colors.whiteAlpha.400"
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      [$bg.variable]: `colors.${c}.500`,
      _dark: {
        [$bg.variable]: `colors.${c}.200`
      }
    },
    bg: $bg.reference
  };
});
var baseStyleThumb = defineStyle({
  bg: "white",
  transitionProperty: "transform",
  transitionDuration: "normal",
  borderRadius: "inherit",
  width: [$height.reference],
  height: [$height.reference],
  _checked: {
    transform: `translateX(${$translateX.reference})`
  }
});
var baseStyle2 = definePartsStyle2((props) => ({
  container: {
    [$diff.variable]: diffValue,
    [$translateX.variable]: $diff.reference,
    _rtl: {
      [$translateX.variable]: calc3($diff).negate().toString()
    }
  },
  track: baseStyleTrack(props),
  thumb: baseStyleThumb
}));
var sizes2 = {
  sm: definePartsStyle2({
    container: {
      [$width.variable]: "1.375rem",
      [$height.variable]: "sizes.3"
    }
  }),
  md: definePartsStyle2({
    container: {
      [$width.variable]: "1.875rem",
      [$height.variable]: "sizes.4"
    }
  }),
  lg: definePartsStyle2({
    container: {
      [$width.variable]: "2.875rem",
      [$height.variable]: "sizes.6"
    }
  })
};
var switchTheme = defineMultiStyleConfig2({
  baseStyle: baseStyle2,
  sizes: sizes2,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-QWN3S45W.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig3, definePartsStyle: definePartsStyle3 } = createMultiStyleConfigHelpers(tableAnatomy.keys);
var baseStyle3 = definePartsStyle3({
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
});
var numericStyles = defineStyle({
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
});
var variantSimple = definePartsStyle3((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variantStripe = definePartsStyle3((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    td: {
      borderBottom: "1px",
      borderColor: mode(`${c}.100`, `${c}.700`)(props),
      ...numericStyles
    },
    caption: {
      color: mode("gray.600", "gray.100")(props)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode(`${c}.100`, `${c}.700`)(props)
          },
          td: {
            background: mode(`${c}.100`, `${c}.700`)(props)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variants = {
  simple: variantSimple,
  striped: variantStripe,
  unstyled: defineStyle({})
};
var sizes3 = {
  sm: definePartsStyle3({
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  }),
  md: definePartsStyle3({
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  }),
  lg: definePartsStyle3({
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  })
};
var tableTheme = defineMultiStyleConfig3({
  baseStyle: baseStyle3,
  variants,
  sizes: sizes3,
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-GYISOX2E.mjs
var $fg = cssVar2("tabs-color");
var $bg2 = cssVar2("tabs-bg");
var $border = cssVar2("tabs-border-color");
var { defineMultiStyleConfig: defineMultiStyleConfig4, definePartsStyle: definePartsStyle4 } = createMultiStyleConfigHelpers(tabsAnatomy.keys);
var baseStyleRoot = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
});
var baseStyleTab = defineStyle((props) => {
  const { isFitted } = props;
  return {
    flex: isFitted ? 1 : void 0,
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      zIndex: 1,
      boxShadow: "outline"
    },
    _disabled: {
      cursor: "not-allowed",
      opacity: 0.4
    }
  };
});
var baseStyleTablist = defineStyle((props) => {
  const { align = "start", orientation } = props;
  const alignments = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments[align],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
});
var baseStyleTabpanel = defineStyle({
  p: 4
});
var baseStyle4 = definePartsStyle4((props) => ({
  root: baseStyleRoot(props),
  tab: baseStyleTab(props),
  tablist: baseStyleTablist(props),
  tabpanel: baseStyleTabpanel
}));
var sizes4 = {
  sm: definePartsStyle4({
    tab: {
      py: 1,
      px: 4,
      fontSize: "sm"
    }
  }),
  md: definePartsStyle4({
    tab: {
      fontSize: "md",
      py: 2,
      px: 4
    }
  }),
  lg: definePartsStyle4({
    tab: {
      fontSize: "lg",
      py: 3,
      px: 4
    }
  })
};
var variantLine = definePartsStyle4((props) => {
  const { colorScheme: c, orientation } = props;
  const isVertical = orientation === "vertical";
  const borderProp = isVertical ? "borderStart" : "borderBottom";
  const marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: {
      [borderProp]: "2px solid",
      borderColor: "inherit"
    },
    tab: {
      [borderProp]: "2px solid",
      borderColor: "transparent",
      [marginProp]: "-2px",
      _selected: {
        [$fg.variable]: `colors.${c}.600`,
        _dark: {
          [$fg.variable]: `colors.${c}.300`
        },
        borderColor: "currentColor"
      },
      _active: {
        [$bg2.variable]: "colors.gray.200",
        _dark: {
          [$bg2.variable]: "colors.whiteAlpha.300"
        }
      },
      _disabled: {
        _active: { bg: "none" }
      },
      color: $fg.reference,
      bg: $bg2.reference
    }
  };
});
var variantEnclosed = definePartsStyle4((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      [$border.variable]: "transparent",
      _selected: {
        [$fg.variable]: `colors.${c}.600`,
        [$border.variable]: `colors.white`,
        _dark: {
          [$fg.variable]: `colors.${c}.300`,
          [$border.variable]: `colors.gray.800`
        },
        borderColor: "inherit",
        borderBottomColor: $border.reference
      },
      color: $fg.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantEnclosedColored = definePartsStyle4((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      [$bg2.variable]: "colors.gray.50",
      _dark: {
        [$bg2.variable]: "colors.whiteAlpha.50"
      },
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        [$bg2.variable]: "colors.white",
        [$fg.variable]: `colors.${c}.600`,
        _dark: {
          [$bg2.variable]: "colors.gray.800",
          [$fg.variable]: `colors.${c}.300`
        },
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      },
      color: $fg.reference,
      bg: $bg2.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantSoftRounded = definePartsStyle4((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor(theme3, `${c}.700`),
        bg: getColor(theme3, `${c}.100`)
      }
    }
  };
});
var variantSolidRounded = definePartsStyle4((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      [$fg.variable]: "colors.gray.600",
      _dark: {
        [$fg.variable]: "inherit"
      },
      _selected: {
        [$fg.variable]: "colors.white",
        [$bg2.variable]: `colors.${c}.600`,
        _dark: {
          [$fg.variable]: "colors.gray.800",
          [$bg2.variable]: `colors.${c}.300`
        }
      },
      color: $fg.reference,
      bg: $bg2.reference
    }
  };
});
var variantUnstyled = definePartsStyle4({});
var variants2 = {
  line: variantLine,
  enclosed: variantEnclosed,
  "enclosed-colored": variantEnclosedColored,
  "soft-rounded": variantSoftRounded,
  "solid-rounded": variantSolidRounded,
  unstyled: variantUnstyled
};
var tabsTheme = defineMultiStyleConfig4({
  baseStyle: baseStyle4,
  sizes: sizes4,
  variants: variants2,
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-ZQMLTFF3.mjs
var vars = defineCssVars("badge", ["bg", "color", "shadow"]);
var baseStyle5 = defineStyle({
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var variantSolid = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const dark = transparentize2(`${c}.500`, 0.6)(theme3);
  return {
    [vars.bg.variable]: `colors.${c}.500`,
    [vars.color.variable]: `colors.white`,
    _dark: {
      [vars.bg.variable]: dark,
      [vars.color.variable]: `colors.whiteAlpha.800`
    }
  };
});
var variantSubtle = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkBg = transparentize2(`${c}.200`, 0.16)(theme3);
  return {
    [vars.bg.variable]: `colors.${c}.100`,
    [vars.color.variable]: `colors.${c}.800`,
    _dark: {
      [vars.bg.variable]: darkBg,
      [vars.color.variable]: `colors.${c}.200`
    }
  };
});
var variantOutline = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkColor = transparentize2(`${c}.200`, 0.8)(theme3);
  return {
    [vars.color.variable]: `colors.${c}.500`,
    _dark: {
      [vars.color.variable]: darkColor
    },
    [vars.shadow.variable]: `inset 0 0 0px 1px ${vars.color.reference}`
  };
});
var variants3 = {
  solid: variantSolid,
  subtle: variantSubtle,
  outline: variantOutline
};
var badgeTheme = defineStyleConfig({
  baseStyle: baseStyle5,
  variants: variants3,
  defaultProps: {
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-7RVLYCMR.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig5, definePartsStyle: definePartsStyle5 } = createMultiStyleConfigHelpers(tagAnatomy.keys);
var $bg3 = cssVar2("tag-bg");
var $color = cssVar2("tag-color");
var $shadow = cssVar2("tag-shadow");
var $minH = cssVar2("tag-min-height");
var $minW = cssVar2("tag-min-width");
var $fontSize = cssVar2("tag-font-size");
var $paddingX = cssVar2("tag-padding-inline");
var baseStyleContainer = defineStyle({
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  [$color.variable]: vars.color.reference,
  [$bg3.variable]: vars.bg.reference,
  [$shadow.variable]: vars.shadow.reference,
  color: $color.reference,
  bg: $bg3.reference,
  boxShadow: $shadow.reference,
  borderRadius: "md",
  minH: $minH.reference,
  minW: $minW.reference,
  fontSize: $fontSize.reference,
  px: $paddingX.reference,
  _focusVisible: {
    [$shadow.variable]: "shadows.outline"
  }
});
var baseStyleLabel = defineStyle({
  lineHeight: 1.2,
  overflow: "visible"
});
var baseStyleCloseButton = defineStyle({
  fontSize: "lg",
  w: "5",
  h: "5",
  transitionProperty: "common",
  transitionDuration: "normal",
  borderRadius: "full",
  marginStart: "1.5",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focusVisible: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
});
var baseStyle6 = definePartsStyle5({
  container: baseStyleContainer,
  label: baseStyleLabel,
  closeButton: baseStyleCloseButton
});
var sizes5 = {
  sm: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.5",
      [$minW.variable]: "sizes.5",
      [$fontSize.variable]: "fontSizes.xs",
      [$paddingX.variable]: "space.2"
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  }),
  md: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.6",
      [$minW.variable]: "sizes.6",
      [$fontSize.variable]: "fontSizes.sm",
      [$paddingX.variable]: "space.2"
    }
  }),
  lg: definePartsStyle5({
    container: {
      [$minH.variable]: "sizes.8",
      [$minW.variable]: "sizes.8",
      [$fontSize.variable]: "fontSizes.md",
      [$paddingX.variable]: "space.3"
    }
  })
};
var variants4 = {
  subtle: definePartsStyle5((props) => {
    var _a10;
    return {
      container: (_a10 = badgeTheme.variants) == null ? void 0 : _a10.subtle(props)
    };
  }),
  solid: definePartsStyle5((props) => {
    var _a10;
    return {
      container: (_a10 = badgeTheme.variants) == null ? void 0 : _a10.solid(props)
    };
  }),
  outline: definePartsStyle5((props) => {
    var _a10;
    return {
      container: (_a10 = badgeTheme.variants) == null ? void 0 : _a10.outline(props)
    };
  })
};
var tagTheme = defineMultiStyleConfig5({
  variants: variants4,
  baseStyle: baseStyle6,
  sizes: sizes5,
  defaultProps: {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-ICL3HPTT.mjs
var { definePartsStyle: definePartsStyle6, defineMultiStyleConfig: defineMultiStyleConfig6 } = createMultiStyleConfigHelpers(inputAnatomy.keys);
var $height2 = cssVar2("input-height");
var $fontSize2 = cssVar2("input-font-size");
var $padding = cssVar2("input-padding");
var $borderRadius = cssVar2("input-border-radius");
var baseStyle7 = definePartsStyle6({
  addon: {
    height: $height2.reference,
    fontSize: $fontSize2.reference,
    px: $padding.reference,
    borderRadius: $borderRadius.reference
  },
  field: {
    width: "100%",
    height: $height2.reference,
    fontSize: $fontSize2.reference,
    px: $padding.reference,
    borderRadius: $borderRadius.reference,
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  }
});
var size = {
  lg: defineStyle({
    [$fontSize2.variable]: "fontSizes.lg",
    [$padding.variable]: "space.4",
    [$borderRadius.variable]: "radii.md",
    [$height2.variable]: "sizes.12"
  }),
  md: defineStyle({
    [$fontSize2.variable]: "fontSizes.md",
    [$padding.variable]: "space.4",
    [$borderRadius.variable]: "radii.md",
    [$height2.variable]: "sizes.10"
  }),
  sm: defineStyle({
    [$fontSize2.variable]: "fontSizes.sm",
    [$padding.variable]: "space.3",
    [$borderRadius.variable]: "radii.sm",
    [$height2.variable]: "sizes.8"
  }),
  xs: defineStyle({
    [$fontSize2.variable]: "fontSizes.xs",
    [$padding.variable]: "space.2",
    [$borderRadius.variable]: "radii.sm",
    [$height2.variable]: "sizes.6"
  })
};
var sizes6 = {
  lg: definePartsStyle6({
    field: size.lg,
    group: size.lg
  }),
  md: definePartsStyle6({
    field: size.md,
    group: size.md
  }),
  sm: definePartsStyle6({
    field: size.sm,
    group: size.sm
  }),
  xs: definePartsStyle6({
    field: size.xs,
    group: size.xs
  })
};
function getDefaults(props) {
  const { focusBorderColor: fc, errorBorderColor: ec } = props;
  return {
    focusBorderColor: fc || mode("blue.500", "blue.300")(props),
    errorBorderColor: ec || mode("red.500", "red.300")(props)
  };
}
var variantOutline2 = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode("gray.300", "whiteAlpha.400")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec),
        boxShadow: `0 0 0 1px ${getColor(theme3, ec)}`
      },
      _focusVisible: {
        zIndex: 1,
        borderColor: getColor(theme3, fc),
        boxShadow: `0 0 0 1px ${getColor(theme3, fc)}`
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode("inherit", "whiteAlpha.50")(props),
      bg: mode("gray.100", "whiteAlpha.300")(props)
    }
  };
});
var variantFilled = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props),
      _hover: {
        bg: mode("gray.200", "whiteAlpha.100")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec)
      },
      _focusVisible: {
        bg: "transparent",
        borderColor: getColor(theme3, fc)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode("gray.100", "whiteAlpha.50")(props)
    }
  };
});
var variantFlushed = definePartsStyle6((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults(props);
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor(theme3, ec),
        boxShadow: `0px 1px 0px 0px ${getColor(theme3, ec)}`
      },
      _focusVisible: {
        borderColor: getColor(theme3, fc),
        boxShadow: `0px 1px 0px 0px ${getColor(theme3, fc)}`
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent"
    }
  };
});
var variantUnstyled2 = definePartsStyle6({
  field: {
    bg: "transparent",
    px: "0",
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: "0",
    height: "auto"
  }
});
var variants5 = {
  outline: variantOutline2,
  filled: variantFilled,
  flushed: variantFlushed,
  unstyled: variantUnstyled2
};
var inputTheme = defineMultiStyleConfig6({
  baseStyle: baseStyle7,
  sizes: sizes6,
  variants: variants5,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-KJ26FGJD.mjs
var _a;
var baseStyle8 = defineStyle({
  ...(_a = inputTheme.baseStyle) == null ? void 0 : _a.field,
  paddingY: "2",
  minHeight: "20",
  lineHeight: "short",
  verticalAlign: "top"
});
var _a2;
var _b;
var variants6 = {
  outline: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.outline(props).field) != null ? _b32 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.flushed(props).field) != null ? _b32 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme.variants) == null ? void 0 : _a42.filled(props).field) != null ? _b32 : {};
    }
  ),
  unstyled: (_b = (_a2 = inputTheme.variants) == null ? void 0 : _a2.unstyled.field) != null ? _b : {}
};
var _a3;
var _b2;
var _c;
var _d;
var _e;
var _f;
var _g;
var _h;
var sizes7 = {
  xs: (_b2 = (_a3 = inputTheme.sizes) == null ? void 0 : _a3.xs.field) != null ? _b2 : {},
  sm: (_d = (_c = inputTheme.sizes) == null ? void 0 : _c.sm.field) != null ? _d : {},
  md: (_f = (_e = inputTheme.sizes) == null ? void 0 : _e.md.field) != null ? _f : {},
  lg: (_h = (_g = inputTheme.sizes) == null ? void 0 : _g.lg.field) != null ? _h : {}
};
var textareaTheme = defineStyleConfig({
  baseStyle: baseStyle8,
  sizes: sizes7,
  variants: variants6,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-R7ZISUMV.mjs
var $bg4 = cssVar3("tooltip-bg");
var $fg2 = cssVar3("tooltip-fg");
var $arrowBg = cssVar3("popper-arrow-bg");
var baseStyle9 = defineStyle({
  bg: $bg4.reference,
  color: $fg2.reference,
  [$bg4.variable]: "colors.gray.700",
  [$fg2.variable]: "colors.whiteAlpha.900",
  _dark: {
    [$bg4.variable]: "colors.gray.300",
    [$fg2.variable]: "colors.gray.900"
  },
  [$arrowBg.variable]: $bg4.reference,
  px: "2",
  py: "0.5",
  borderRadius: "sm",
  fontWeight: "medium",
  fontSize: "sm",
  boxShadow: "md",
  maxW: "xs",
  zIndex: "tooltip"
});
var tooltipTheme = defineStyleConfig({
  baseStyle: baseStyle9
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-37MNRBP2.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig7, definePartsStyle: definePartsStyle7 } = createMultiStyleConfigHelpers(progressAnatomy.keys);
var filledStyle = defineStyle((props) => {
  const { colorScheme: c, theme: t4, isIndeterminate, hasStripe } = props;
  const stripeStyle = mode(
    generateStripe(),
    generateStripe("1rem", "rgba(0,0,0,0.1)")
  )(props);
  const bgColor = mode(`${c}.500`, `${c}.200`)(props);
  const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor(t4, bgColor)} 50%,
    transparent 100%
  )`;
  const addStripe = !isIndeterminate && hasStripe;
  return {
    ...addStripe && stripeStyle,
    ...isIndeterminate ? { bgImage: gradient } : { bgColor }
  };
});
var baseStyleLabel2 = defineStyle({
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
});
var baseStyleTrack2 = defineStyle((props) => {
  return {
    bg: mode("gray.100", "whiteAlpha.300")(props)
  };
});
var baseStyleFilledTrack = defineStyle((props) => {
  return {
    transitionProperty: "common",
    transitionDuration: "slow",
    ...filledStyle(props)
  };
});
var baseStyle10 = definePartsStyle7((props) => ({
  label: baseStyleLabel2,
  filledTrack: baseStyleFilledTrack(props),
  track: baseStyleTrack2(props)
}));
var sizes8 = {
  xs: definePartsStyle7({
    track: { h: "1" }
  }),
  sm: definePartsStyle7({
    track: { h: "2" }
  }),
  md: definePartsStyle7({
    track: { h: "3" }
  }),
  lg: definePartsStyle7({
    track: { h: "4" }
  })
};
var progressTheme = defineMultiStyleConfig7({
  sizes: sizes8,
  baseStyle: baseStyle10,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-UV3F75RF.mjs
var isFunction2 = (value) => typeof value === "function";
function runIfFn2(valueOrFn, ...args) {
  return isFunction2(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-XHYVH6UO.mjs
var { definePartsStyle: definePartsStyle8, defineMultiStyleConfig: defineMultiStyleConfig8 } = createMultiStyleConfigHelpers(checkboxAnatomy.keys);
var $size2 = cssVar2("checkbox-size");
var baseStyleControl = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    w: $size2.reference,
    h: $size2.reference,
    transitionProperty: "box-shadow",
    transitionDuration: "normal",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode(`${c}.500`, `${c}.200`)(props),
      borderColor: mode(`${c}.500`, `${c}.200`)(props),
      color: mode("white", "gray.900")(props),
      _hover: {
        bg: mode(`${c}.600`, `${c}.300`)(props),
        borderColor: mode(`${c}.600`, `${c}.300`)(props)
      },
      _disabled: {
        borderColor: mode("gray.200", "transparent")(props),
        bg: mode("gray.200", "whiteAlpha.300")(props),
        color: mode("gray.500", "whiteAlpha.500")(props)
      }
    },
    _indeterminate: {
      bg: mode(`${c}.500`, `${c}.200`)(props),
      borderColor: mode(`${c}.500`, `${c}.200`)(props),
      color: mode("white", "gray.900")(props)
    },
    _disabled: {
      bg: mode("gray.100", "whiteAlpha.100")(props),
      borderColor: mode("gray.100", "transparent")(props)
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode("red.500", "red.300")(props)
    }
  };
});
var baseStyleContainer2 = defineStyle({
  _disabled: { cursor: "not-allowed" }
});
var baseStyleLabel3 = defineStyle({
  userSelect: "none",
  _disabled: { opacity: 0.4 }
});
var baseStyleIcon = defineStyle({
  transitionProperty: "transform",
  transitionDuration: "normal"
});
var baseStyle11 = definePartsStyle8((props) => ({
  icon: baseStyleIcon,
  container: baseStyleContainer2,
  control: runIfFn2(baseStyleControl, props),
  label: baseStyleLabel3
}));
var sizes9 = {
  sm: definePartsStyle8({
    control: { [$size2.variable]: "sizes.3" },
    label: { fontSize: "sm" },
    icon: { fontSize: "3xs" }
  }),
  md: definePartsStyle8({
    control: { [$size2.variable]: "sizes.4" },
    label: { fontSize: "md" },
    icon: { fontSize: "2xs" }
  }),
  lg: definePartsStyle8({
    control: { [$size2.variable]: "sizes.5" },
    label: { fontSize: "lg" },
    icon: { fontSize: "2xs" }
  })
};
var checkboxTheme = defineMultiStyleConfig8({
  baseStyle: baseStyle11,
  sizes: sizes9,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-VZUATZ4E.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig9, definePartsStyle: definePartsStyle9 } = createMultiStyleConfigHelpers(radioAnatomy.keys);
var baseStyleControl2 = defineStyle((props) => {
  var _a10;
  const controlStyle = (_a10 = runIfFn2(checkboxTheme.baseStyle, props)) == null ? void 0 : _a10.control;
  return {
    ...controlStyle,
    borderRadius: "full",
    _checked: {
      ...controlStyle == null ? void 0 : controlStyle["_checked"],
      _before: {
        content: `""`,
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    }
  };
});
var baseStyle12 = definePartsStyle9((props) => {
  var _a10, _b8, _c5, _d5;
  return {
    label: (_b8 = (_a10 = checkboxTheme).baseStyle) == null ? void 0 : _b8.call(_a10, props).label,
    container: (_d5 = (_c5 = checkboxTheme).baseStyle) == null ? void 0 : _d5.call(_c5, props).container,
    control: baseStyleControl2(props)
  };
});
var sizes10 = {
  md: definePartsStyle9({
    control: { w: "4", h: "4" },
    label: { fontSize: "md" }
  }),
  lg: definePartsStyle9({
    control: { w: "5", h: "5" },
    label: { fontSize: "lg" }
  }),
  sm: definePartsStyle9({
    control: { width: "3", height: "3" },
    label: { fontSize: "sm" }
  })
};
var radioTheme = defineMultiStyleConfig9({
  baseStyle: baseStyle12,
  sizes: sizes10,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-NNA4E64A.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig10, definePartsStyle: definePartsStyle10 } = createMultiStyleConfigHelpers(selectAnatomy.keys);
var $bg5 = cssVar2("select-bg");
var _a4;
var baseStyleField = defineStyle({
  ...(_a4 = inputTheme.baseStyle) == null ? void 0 : _a4.field,
  appearance: "none",
  paddingBottom: "1px",
  lineHeight: "normal",
  bg: $bg5.reference,
  [$bg5.variable]: "colors.white",
  _dark: {
    [$bg5.variable]: "colors.gray.700"
  },
  "> option, > optgroup": {
    bg: $bg5.reference
  }
});
var baseStyleIcon2 = defineStyle({
  width: "6",
  height: "100%",
  insetEnd: "2",
  position: "relative",
  color: "currentColor",
  fontSize: "xl",
  _disabled: {
    opacity: 0.5
  }
});
var baseStyle13 = definePartsStyle10({
  field: baseStyleField,
  icon: baseStyleIcon2
});
var iconSpacing = defineStyle({
  paddingInlineEnd: "8"
});
var _a22;
var _b3;
var _c2;
var _d2;
var _e2;
var _f2;
var _g2;
var _h2;
var sizes11 = {
  lg: {
    ...(_a22 = inputTheme.sizes) == null ? void 0 : _a22.lg,
    field: {
      ...(_b3 = inputTheme.sizes) == null ? void 0 : _b3.lg.field,
      ...iconSpacing
    }
  },
  md: {
    ...(_c2 = inputTheme.sizes) == null ? void 0 : _c2.md,
    field: {
      ...(_d2 = inputTheme.sizes) == null ? void 0 : _d2.md.field,
      ...iconSpacing
    }
  },
  sm: {
    ...(_e2 = inputTheme.sizes) == null ? void 0 : _e2.sm,
    field: {
      ...(_f2 = inputTheme.sizes) == null ? void 0 : _f2.sm.field,
      ...iconSpacing
    }
  },
  xs: {
    ...(_g2 = inputTheme.sizes) == null ? void 0 : _g2.xs,
    field: {
      ...(_h2 = inputTheme.sizes) == null ? void 0 : _h2.xs.field,
      ...iconSpacing
    },
    icon: {
      insetEnd: "1"
    }
  }
};
var selectTheme = defineMultiStyleConfig10({
  baseStyle: baseStyle13,
  sizes: sizes11,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-X6XFE4TF.mjs
var $startColor = cssVar2("skeleton-start-color");
var $endColor = cssVar2("skeleton-end-color");
var baseStyle14 = defineStyle({
  [$startColor.variable]: "colors.gray.100",
  [$endColor.variable]: "colors.gray.400",
  _dark: {
    [$startColor.variable]: "colors.gray.800",
    [$endColor.variable]: "colors.gray.600"
  },
  background: $startColor.reference,
  borderColor: $endColor.reference,
  opacity: 0.7,
  borderRadius: "sm"
});
var skeletonTheme = defineStyleConfig({
  baseStyle: baseStyle14
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-ZREGO6US.mjs
var $bg6 = cssVar2("skip-link-bg");
var baseStyle15 = defineStyle({
  borderRadius: "md",
  fontWeight: "semibold",
  _focusVisible: {
    boxShadow: "outline",
    padding: "4",
    position: "fixed",
    top: "6",
    insetStart: "6",
    [$bg6.variable]: "colors.white",
    _dark: {
      [$bg6.variable]: "colors.gray.700"
    },
    bg: $bg6.reference
  }
});
var skipLinkTheme = defineStyleConfig({
  baseStyle: baseStyle15
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-5FA7Y3RP.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig11, definePartsStyle: definePartsStyle11 } = createMultiStyleConfigHelpers(sliderAnatomy.keys);
var $thumbSize = cssVar2("slider-thumb-size");
var $trackSize = cssVar2("slider-track-size");
var $bg7 = cssVar2("slider-bg");
var baseStyleContainer3 = defineStyle((props) => {
  const { orientation } = props;
  return {
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    },
    ...orient({
      orientation,
      vertical: { h: "100%" },
      horizontal: { w: "100%" }
    })
  };
});
var baseStyleTrack3 = defineStyle((props) => {
  const orientationStyles = orient({
    orientation: props.orientation,
    horizontal: { h: $trackSize.reference },
    vertical: { w: $trackSize.reference }
  });
  return {
    ...orientationStyles,
    overflow: "hidden",
    borderRadius: "sm",
    [$bg7.variable]: "colors.gray.200",
    _dark: {
      [$bg7.variable]: "colors.whiteAlpha.200"
    },
    _disabled: {
      [$bg7.variable]: "colors.gray.300",
      _dark: {
        [$bg7.variable]: "colors.whiteAlpha.300"
      }
    },
    bg: $bg7.reference
  };
});
var baseStyleThumb2 = defineStyle((props) => {
  const { orientation } = props;
  const orientationStyle = orient({
    orientation,
    vertical: {
      left: "50%",
      transform: `translateX(-50%)`,
      _active: {
        transform: `translateX(-50%) scale(1.15)`
      }
    },
    horizontal: {
      top: "50%",
      transform: `translateY(-50%)`,
      _active: {
        transform: `translateY(-50%) scale(1.15)`
      }
    }
  });
  return {
    ...orientationStyle,
    w: $thumbSize.reference,
    h: $thumbSize.reference,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0,
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transitionProperty: "transform",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  };
});
var baseStyleFilledTrack2 = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    width: "inherit",
    height: "inherit",
    [$bg7.variable]: `colors.${c}.500`,
    _dark: {
      [$bg7.variable]: `colors.${c}.200`
    },
    bg: $bg7.reference
  };
});
var baseStyle16 = definePartsStyle11((props) => ({
  container: baseStyleContainer3(props),
  track: baseStyleTrack3(props),
  thumb: baseStyleThumb2(props),
  filledTrack: baseStyleFilledTrack2(props)
}));
var sizeLg = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.4`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeMd = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.3.5`,
    [$trackSize.variable]: `sizes.1`
  }
});
var sizeSm = definePartsStyle11({
  container: {
    [$thumbSize.variable]: `sizes.2.5`,
    [$trackSize.variable]: `sizes.0.5`
  }
});
var sizes12 = {
  lg: sizeLg,
  md: sizeMd,
  sm: sizeSm
};
var sliderTheme = defineMultiStyleConfig11({
  baseStyle: baseStyle16,
  sizes: sizes12,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-L3YAB6CV.mjs
var $size3 = cssVar3("spinner-size");
var baseStyle17 = defineStyle({
  width: [$size3.reference],
  height: [$size3.reference]
});
var sizes13 = {
  xs: defineStyle({
    [$size3.variable]: "sizes.3"
  }),
  sm: defineStyle({
    [$size3.variable]: "sizes.4"
  }),
  md: defineStyle({
    [$size3.variable]: "sizes.6"
  }),
  lg: defineStyle({
    [$size3.variable]: "sizes.8"
  }),
  xl: defineStyle({
    [$size3.variable]: "sizes.12"
  })
};
var spinnerTheme = defineStyleConfig({
  baseStyle: baseStyle17,
  sizes: sizes13,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-2KWJXISX.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig12, definePartsStyle: definePartsStyle12 } = createMultiStyleConfigHelpers(statAnatomy.keys);
var baseStyleLabel4 = defineStyle({
  fontWeight: "medium"
});
var baseStyleHelpText = defineStyle({
  opacity: 0.8,
  marginBottom: "2"
});
var baseStyleNumber = defineStyle({
  verticalAlign: "baseline",
  fontWeight: "semibold"
});
var baseStyleIcon3 = defineStyle({
  marginEnd: 1,
  w: "3.5",
  h: "3.5",
  verticalAlign: "middle"
});
var baseStyle18 = definePartsStyle12({
  container: {},
  label: baseStyleLabel4,
  helpText: baseStyleHelpText,
  number: baseStyleNumber,
  icon: baseStyleIcon3
});
var sizes14 = {
  md: definePartsStyle12({
    label: { fontSize: "sm" },
    helpText: { fontSize: "sm" },
    number: { fontSize: "2xl" }
  })
};
var statTheme = defineMultiStyleConfig12({
  baseStyle: baseStyle18,
  sizes: sizes14,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-AFCBUAM5.mjs
var $bg8 = cssVar2("kbd-bg");
var baseStyle19 = defineStyle({
  [$bg8.variable]: "colors.gray.100",
  _dark: {
    [$bg8.variable]: "colors.whiteAlpha.100"
  },
  bg: $bg8.reference,
  borderRadius: "md",
  borderWidth: "1px",
  borderBottomWidth: "3px",
  fontSize: "0.8em",
  fontWeight: "bold",
  lineHeight: "normal",
  px: "0.4em",
  whiteSpace: "nowrap"
});
var kbdTheme = defineStyleConfig({
  baseStyle: baseStyle19
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-V5KSHSOQ.mjs
var baseStyle20 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var linkTheme = defineStyleConfig({
  baseStyle: baseStyle20
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-MGNM2WZQ.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig13, definePartsStyle: definePartsStyle13 } = createMultiStyleConfigHelpers(listAnatomy.keys);
var baseStyleIcon4 = defineStyle({
  marginEnd: "2",
  display: "inline",
  verticalAlign: "text-bottom"
});
var baseStyle21 = definePartsStyle13({
  icon: baseStyleIcon4
});
var listTheme = defineMultiStyleConfig13({
  baseStyle: baseStyle21
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-N2GP2AF7.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig14, definePartsStyle: definePartsStyle14 } = createMultiStyleConfigHelpers(menuAnatomy.keys);
var $bg9 = cssVar2("menu-bg");
var $shadow2 = cssVar2("menu-shadow");
var baseStyleList = defineStyle({
  [$bg9.variable]: "#fff",
  [$shadow2.variable]: "shadows.sm",
  _dark: {
    [$bg9.variable]: "colors.gray.700",
    [$shadow2.variable]: "shadows.dark-lg"
  },
  color: "inherit",
  minW: "3xs",
  py: "2",
  zIndex: 1,
  borderRadius: "md",
  borderWidth: "1px",
  bg: $bg9.reference,
  boxShadow: $shadow2.reference
});
var baseStyleItem = defineStyle({
  py: "1.5",
  px: "3",
  transitionProperty: "background",
  transitionDuration: "ultra-fast",
  transitionTimingFunction: "ease-in",
  _focus: {
    [$bg9.variable]: "colors.gray.100",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg9.variable]: "colors.gray.200",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.200"
    }
  },
  _expanded: {
    [$bg9.variable]: "colors.gray.100",
    _dark: {
      [$bg9.variable]: "colors.whiteAlpha.100"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  bg: $bg9.reference
});
var baseStyleGroupTitle = defineStyle({
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
});
var baseStyleIcon5 = defineStyle({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0
});
var baseStyleCommand = defineStyle({
  opacity: 0.6
});
var baseStyleDivider = defineStyle({
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "2",
  opacity: 0.6
});
var baseStyleButton = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyle22 = definePartsStyle14({
  button: baseStyleButton,
  list: baseStyleList,
  item: baseStyleItem,
  groupTitle: baseStyleGroupTitle,
  icon: baseStyleIcon5,
  command: baseStyleCommand,
  divider: baseStyleDivider
});
var menuTheme = defineMultiStyleConfig14({
  baseStyle: baseStyle22
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-JN6QBAR6.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig15, definePartsStyle: definePartsStyle15 } = createMultiStyleConfigHelpers(modalAnatomy.keys);
var $bg10 = cssVar2("modal-bg");
var $shadow3 = cssVar2("modal-shadow");
var baseStyleOverlay = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer = defineStyle((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto",
    overscrollBehaviorY: "none"
  };
});
var baseStyleDialog = defineStyle((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    borderRadius: "md",
    color: "inherit",
    my: isCentered ? "auto" : "16",
    mx: isCentered ? "auto" : void 0,
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    [$bg10.variable]: "colors.white",
    [$shadow3.variable]: "shadows.lg",
    _dark: {
      [$bg10.variable]: "colors.gray.700",
      [$shadow3.variable]: "shadows.dark-lg"
    },
    bg: $bg10.reference,
    boxShadow: $shadow3.reference
  };
});
var baseStyleHeader = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton2 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody = defineStyle((props) => {
  const { scrollBehavior } = props;
  return {
    px: "6",
    py: "2",
    flex: "1",
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
});
var baseStyleFooter = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle23 = definePartsStyle15((props) => ({
  overlay: baseStyleOverlay,
  dialogContainer: runIfFn2(baseStyleDialogContainer, props),
  dialog: runIfFn2(baseStyleDialog, props),
  header: baseStyleHeader,
  closeButton: baseStyleCloseButton2,
  body: runIfFn2(baseStyleBody, props),
  footer: baseStyleFooter
}));
function getSize(value) {
  if (value === "full") {
    return definePartsStyle15({
      dialog: {
        maxW: "100vw",
        minH: "$100vh",
        my: "0",
        borderRadius: "0"
      }
    });
  }
  return definePartsStyle15({
    dialog: { maxW: value }
  });
}
var sizes15 = {
  xs: getSize("xs"),
  sm: getSize("sm"),
  md: getSize("md"),
  lg: getSize("lg"),
  xl: getSize("xl"),
  "2xl": getSize("2xl"),
  "3xl": getSize("3xl"),
  "4xl": getSize("4xl"),
  "5xl": getSize("5xl"),
  "6xl": getSize("6xl"),
  full: getSize("full")
};
var modalTheme = defineMultiStyleConfig15({
  baseStyle: baseStyle23,
  sizes: sizes15,
  defaultProps: { size: "md" }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-57T4IAPW.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig16, definePartsStyle: definePartsStyle16 } = createMultiStyleConfigHelpers(numberInputAnatomy.keys);
var $stepperWidth = cssVar3("number-input-stepper-width");
var $inputPadding = cssVar3("number-input-input-padding");
var inputPaddingValue = calc3($stepperWidth).add("0.5rem").toString();
var $bg11 = cssVar3("number-input-bg");
var $fg3 = cssVar3("number-input-color");
var $border2 = cssVar3("number-input-border-color");
var baseStyleRoot2 = defineStyle({
  [$stepperWidth.variable]: "sizes.6",
  [$inputPadding.variable]: inputPaddingValue
});
var baseStyleField2 = defineStyle(
  (props) => {
    var _a10, _b8;
    return (_b8 = (_a10 = runIfFn2(inputTheme.baseStyle, props)) == null ? void 0 : _a10.field) != null ? _b8 : {};
  }
);
var baseStyleStepperGroup = defineStyle({
  width: $stepperWidth.reference
});
var baseStyleStepper = defineStyle({
  borderStart: "1px solid",
  borderStartColor: $border2.reference,
  color: $fg3.reference,
  bg: $bg11.reference,
  [$fg3.variable]: "colors.chakra-body-text",
  [$border2.variable]: "colors.chakra-border-color",
  _dark: {
    [$fg3.variable]: "colors.whiteAlpha.800",
    [$border2.variable]: "colors.whiteAlpha.300"
  },
  _active: {
    [$bg11.variable]: "colors.gray.200",
    _dark: {
      [$bg11.variable]: "colors.whiteAlpha.300"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  }
});
var baseStyle24 = definePartsStyle16((props) => {
  var _a10;
  return {
    root: baseStyleRoot2,
    field: (_a10 = runIfFn2(baseStyleField2, props)) != null ? _a10 : {},
    stepperGroup: baseStyleStepperGroup,
    stepper: baseStyleStepper
  };
});
function getSize2(size3) {
  var _a10, _b8, _c5;
  const sizeStyle = (_a10 = inputTheme.sizes) == null ? void 0 : _a10[size3];
  const radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  const _fontSize = (_c5 = (_b8 = sizeStyle.field) == null ? void 0 : _b8.fontSize) != null ? _c5 : "md";
  const fontSize = typography_default.fontSizes[_fontSize];
  return definePartsStyle16({
    field: {
      ...sizeStyle.field,
      paddingInlineEnd: $inputPadding.reference,
      verticalAlign: "top"
    },
    stepper: {
      fontSize: calc3(fontSize).multiply(0.75).toString(),
      _first: {
        borderTopEndRadius: radius[size3]
      },
      _last: {
        borderBottomEndRadius: radius[size3],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  });
}
var sizes16 = {
  xs: getSize2("xs"),
  sm: getSize2("sm"),
  md: getSize2("md"),
  lg: getSize2("lg")
};
var numberInputTheme = defineMultiStyleConfig16({
  baseStyle: baseStyle24,
  sizes: sizes16,
  variants: inputTheme.variants,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-OEFJDLVS.mjs
var _a5;
var baseStyle25 = defineStyle({
  ...(_a5 = inputTheme.baseStyle) == null ? void 0 : _a5.field,
  textAlign: "center"
});
var sizes17 = {
  lg: defineStyle({
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  }),
  md: defineStyle({
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  }),
  sm: defineStyle({
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  }),
  xs: defineStyle({
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  })
};
var _a23;
var _b4;
var variants7 = {
  outline: defineStyle(
    (props) => {
      var _a33, _b23, _c5;
      return (_c5 = (_b23 = runIfFn2((_a33 = inputTheme.variants) == null ? void 0 : _a33.outline, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  flushed: defineStyle(
    (props) => {
      var _a33, _b23, _c5;
      return (_c5 = (_b23 = runIfFn2((_a33 = inputTheme.variants) == null ? void 0 : _a33.flushed, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  filled: defineStyle(
    (props) => {
      var _a33, _b23, _c5;
      return (_c5 = (_b23 = runIfFn2((_a33 = inputTheme.variants) == null ? void 0 : _a33.filled, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  unstyled: (_b4 = (_a23 = inputTheme.variants) == null ? void 0 : _a23.unstyled.field) != null ? _b4 : {}
};
var pinInputTheme = defineStyleConfig({
  baseStyle: baseStyle25,
  sizes: sizes17,
  variants: variants7,
  defaultProps: inputTheme.defaultProps
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-U3INMHUO.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig17, definePartsStyle: definePartsStyle17 } = createMultiStyleConfigHelpers(popoverAnatomy.keys);
var $popperBg = cssVar3("popper-bg");
var $arrowBg2 = cssVar3("popper-arrow-bg");
var $arrowShadowColor = cssVar3("popper-arrow-shadow-color");
var baseStylePopper = defineStyle({ zIndex: 10 });
var baseStyleContent = defineStyle({
  [$popperBg.variable]: `colors.white`,
  bg: $popperBg.reference,
  [$arrowBg2.variable]: $popperBg.reference,
  [$arrowShadowColor.variable]: `colors.gray.200`,
  _dark: {
    [$popperBg.variable]: `colors.gray.700`,
    [$arrowShadowColor.variable]: `colors.whiteAlpha.300`
  },
  width: "xs",
  border: "1px solid",
  borderColor: "inherit",
  borderRadius: "md",
  boxShadow: "sm",
  zIndex: "inherit",
  _focusVisible: {
    outline: 0,
    boxShadow: "outline"
  }
});
var baseStyleHeader2 = defineStyle({
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
});
var baseStyleBody2 = defineStyle({
  px: 3,
  py: 2
});
var baseStyleFooter2 = defineStyle({
  px: 3,
  py: 2,
  borderTopWidth: "1px"
});
var baseStyleCloseButton3 = defineStyle({
  position: "absolute",
  borderRadius: "md",
  top: 1,
  insetEnd: 2,
  padding: 2
});
var baseStyle26 = definePartsStyle17({
  popper: baseStylePopper,
  content: baseStyleContent,
  header: baseStyleHeader2,
  body: baseStyleBody2,
  footer: baseStyleFooter2,
  closeButton: baseStyleCloseButton3
});
var popoverTheme = defineMultiStyleConfig17({
  baseStyle: baseStyle26
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-VWP3ZVQT.mjs
var { definePartsStyle: definePartsStyle18, defineMultiStyleConfig: defineMultiStyleConfig18 } = createMultiStyleConfigHelpers(drawerAnatomy.keys);
var $bg12 = cssVar2("drawer-bg");
var $bs = cssVar2("drawer-box-shadow");
function getSize3(value) {
  if (value === "full") {
    return definePartsStyle18({
      dialog: { maxW: "100vw", h: "100vh" }
    });
  }
  return definePartsStyle18({
    dialog: { maxW: value }
  });
}
var baseStyleOverlay2 = defineStyle({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer2 = defineStyle({
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
});
var baseStyleDialog2 = defineStyle((props) => {
  const { isFullHeight } = props;
  return {
    ...isFullHeight && { height: "100vh" },
    zIndex: "modal",
    maxH: "100vh",
    color: "inherit",
    [$bg12.variable]: "colors.white",
    [$bs.variable]: "shadows.lg",
    _dark: {
      [$bg12.variable]: "colors.gray.700",
      [$bs.variable]: "shadows.dark-lg"
    },
    bg: $bg12.reference,
    boxShadow: $bs.reference
  };
});
var baseStyleHeader3 = defineStyle({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton4 = defineStyle({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody3 = defineStyle({
  px: "6",
  py: "2",
  flex: "1",
  overflow: "auto"
});
var baseStyleFooter3 = defineStyle({
  px: "6",
  py: "4"
});
var baseStyle27 = definePartsStyle18((props) => ({
  overlay: baseStyleOverlay2,
  dialogContainer: baseStyleDialogContainer2,
  dialog: runIfFn2(baseStyleDialog2, props),
  header: baseStyleHeader3,
  closeButton: baseStyleCloseButton4,
  body: baseStyleBody3,
  footer: baseStyleFooter3
}));
var sizes18 = {
  xs: getSize3("xs"),
  sm: getSize3("md"),
  md: getSize3("lg"),
  lg: getSize3("2xl"),
  xl: getSize3("4xl"),
  full: getSize3("full")
};
var drawerTheme = defineMultiStyleConfig18({
  baseStyle: baseStyle27,
  sizes: sizes18,
  defaultProps: {
    size: "xs"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-D6DZ26HA.mjs
var { definePartsStyle: definePartsStyle19, defineMultiStyleConfig: defineMultiStyleConfig19 } = createMultiStyleConfigHelpers(editableAnatomy.keys);
var baseStylePreview = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyleInput = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyleTextarea = defineStyle({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyle28 = definePartsStyle19({
  preview: baseStylePreview,
  input: baseStyleInput,
  textarea: baseStyleTextarea
});
var editableTheme = defineMultiStyleConfig19({
  baseStyle: baseStyle28
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-O6GGGS4Y.mjs
var { definePartsStyle: definePartsStyle20, defineMultiStyleConfig: defineMultiStyleConfig20 } = createMultiStyleConfigHelpers(formAnatomy.keys);
var $fg4 = cssVar2("form-control-color");
var baseStyleRequiredIndicator = defineStyle({
  marginStart: "1",
  [$fg4.variable]: "colors.red.500",
  _dark: {
    [$fg4.variable]: "colors.red.300"
  },
  color: $fg4.reference
});
var baseStyleHelperText = defineStyle({
  mt: "2",
  [$fg4.variable]: "colors.gray.600",
  _dark: {
    [$fg4.variable]: "colors.whiteAlpha.600"
  },
  color: $fg4.reference,
  lineHeight: "normal",
  fontSize: "sm"
});
var baseStyle29 = definePartsStyle20({
  container: {
    width: "100%",
    position: "relative"
  },
  requiredIndicator: baseStyleRequiredIndicator,
  helperText: baseStyleHelperText
});
var formTheme = defineMultiStyleConfig20({
  baseStyle: baseStyle29
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-SRBDDT7F.mjs
var { definePartsStyle: definePartsStyle21, defineMultiStyleConfig: defineMultiStyleConfig21 } = createMultiStyleConfigHelpers(formErrorAnatomy.keys);
var $fg5 = cssVar2("form-error-color");
var baseStyleText = defineStyle({
  [$fg5.variable]: `colors.red.500`,
  _dark: {
    [$fg5.variable]: `colors.red.300`
  },
  color: $fg5.reference,
  mt: "2",
  fontSize: "sm",
  lineHeight: "normal"
});
var baseStyleIcon6 = defineStyle({
  marginEnd: "0.5em",
  [$fg5.variable]: `colors.red.500`,
  _dark: {
    [$fg5.variable]: `colors.red.300`
  },
  color: $fg5.reference
});
var baseStyle30 = definePartsStyle21({
  text: baseStyleText,
  icon: baseStyleIcon6
});
var formErrorTheme = defineMultiStyleConfig21({
  baseStyle: baseStyle30
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-VHM7WLW6.mjs
var baseStyle31 = defineStyle({
  fontSize: "md",
  marginEnd: "3",
  mb: "2",
  fontWeight: "medium",
  transitionProperty: "common",
  transitionDuration: "normal",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
});
var formLabelTheme = defineStyleConfig({
  baseStyle: baseStyle31
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-WXARPSDQ.mjs
var baseStyle32 = defineStyle({
  fontFamily: "heading",
  fontWeight: "bold"
});
var sizes19 = {
  "4xl": defineStyle({
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  }),
  "3xl": defineStyle({
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  }),
  "2xl": defineStyle({
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  }),
  xl: defineStyle({
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  lg: defineStyle({
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  md: defineStyle({
    fontSize: "xl",
    lineHeight: 1.2
  }),
  sm: defineStyle({
    fontSize: "md",
    lineHeight: 1.2
  }),
  xs: defineStyle({
    fontSize: "sm",
    lineHeight: 1.2
  })
};
var headingTheme = defineStyleConfig({
  baseStyle: baseStyle32,
  sizes: sizes19,
  defaultProps: {
    size: "xl"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-FU5DDBRC.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig22, definePartsStyle: definePartsStyle22 } = createMultiStyleConfigHelpers(breadcrumbAnatomy.keys);
var $decor = cssVar2("breadcrumb-link-decor");
var baseStyleLink = defineStyle({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  outline: "none",
  color: "inherit",
  textDecoration: $decor.reference,
  [$decor.variable]: "none",
  "&:not([aria-current=page])": {
    cursor: "pointer",
    _hover: {
      [$decor.variable]: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  }
});
var baseStyle33 = definePartsStyle22({
  link: baseStyleLink
});
var breadcrumbTheme = defineMultiStyleConfig22({
  baseStyle: baseStyle33
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-MBVM6PEK.mjs
var baseStyle34 = defineStyle({
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  transitionProperty: "common",
  transitionDuration: "normal",
  _focusVisible: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
});
var variantGhost = defineStyle((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  if (c === "gray") {
    return {
      color: mode(`gray.800`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode(`gray.100`, `whiteAlpha.200`)(props)
      },
      _active: { bg: mode(`gray.200`, `whiteAlpha.300`)(props) }
    };
  }
  const darkHoverBg = transparentize2(`${c}.200`, 0.12)(theme3);
  const darkActiveBg = transparentize2(`${c}.200`, 0.24)(theme3);
  return {
    color: mode(`${c}.600`, `${c}.200`)(props),
    bg: "transparent",
    _hover: {
      bg: mode(`${c}.50`, darkHoverBg)(props)
    },
    _active: {
      bg: mode(`${c}.100`, darkActiveBg)(props)
    }
  };
});
var variantOutline3 = defineStyle((props) => {
  const { colorScheme: c } = props;
  const borderColor = mode(`gray.200`, `whiteAlpha.300`)(props);
  return {
    border: "1px solid",
    borderColor: c === "gray" ? borderColor : "currentColor",
    ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
    ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" },
    ...runIfFn2(variantGhost, props)
  };
});
var accessibleColorMap = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
var variantSolid2 = defineStyle((props) => {
  var _a10;
  const { colorScheme: c } = props;
  if (c === "gray") {
    const bg2 = mode(`gray.100`, `whiteAlpha.200`)(props);
    return {
      bg: bg2,
      color: mode(`gray.800`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode(`gray.200`, `whiteAlpha.300`)(props),
        _disabled: {
          bg: bg2
        }
      },
      _active: { bg: mode(`gray.300`, `whiteAlpha.400`)(props) }
    };
  }
  const {
    bg = `${c}.500`,
    color: color4 = "white",
    hoverBg = `${c}.600`,
    activeBg = `${c}.700`
  } = (_a10 = accessibleColorMap[c]) != null ? _a10 : {};
  const background4 = mode(bg, `${c}.200`)(props);
  return {
    bg: background4,
    color: mode(color4, `gray.800`)(props),
    _hover: {
      bg: mode(hoverBg, `${c}.300`)(props),
      _disabled: {
        bg: background4
      }
    },
    _active: { bg: mode(activeBg, `${c}.400`)(props) }
  };
});
var variantLink = defineStyle((props) => {
  const { colorScheme: c } = props;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode(`${c}.500`, `${c}.200`)(props),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode(`${c}.700`, `${c}.500`)(props)
    }
  };
});
var variantUnstyled3 = defineStyle({
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: "0",
  p: "0"
});
var variants8 = {
  ghost: variantGhost,
  outline: variantOutline3,
  solid: variantSolid2,
  link: variantLink,
  unstyled: variantUnstyled3
};
var sizes20 = {
  lg: defineStyle({
    h: "12",
    minW: "12",
    fontSize: "lg",
    px: "6"
  }),
  md: defineStyle({
    h: "10",
    minW: "10",
    fontSize: "md",
    px: "4"
  }),
  sm: defineStyle({
    h: "8",
    minW: "8",
    fontSize: "sm",
    px: "3"
  }),
  xs: defineStyle({
    h: "6",
    minW: "6",
    fontSize: "xs",
    px: "2"
  })
};
var buttonTheme = defineStyleConfig({
  baseStyle: baseStyle34,
  variants: variants8,
  sizes: sizes20,
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-F7CKIHPM.mjs
var { definePartsStyle: definePartsStyle23, defineMultiStyleConfig: defineMultiStyleConfig23 } = createMultiStyleConfigHelpers(cardAnatomy.keys);
var $bg13 = cssVar2("card-bg");
var $padding2 = cssVar2("card-padding");
var $shadow4 = cssVar2("card-shadow");
var $radius = cssVar2("card-radius");
var $border3 = cssVar2("card-border-width", "0");
var $borderColor = cssVar2("card-border-color");
var baseStyle35 = definePartsStyle23({
  container: {
    [$bg13.variable]: "colors.chakra-body-bg",
    backgroundColor: $bg13.reference,
    boxShadow: $shadow4.reference,
    borderRadius: $radius.reference,
    color: "chakra-body-text",
    borderWidth: $border3.reference,
    borderColor: $borderColor.reference
  },
  body: {
    padding: $padding2.reference,
    flex: "1 1 0%"
  },
  header: {
    padding: $padding2.reference
  },
  footer: {
    padding: $padding2.reference
  }
});
var sizes21 = {
  sm: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.base",
      [$padding2.variable]: "space.3"
    }
  }),
  md: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.md",
      [$padding2.variable]: "space.5"
    }
  }),
  lg: definePartsStyle23({
    container: {
      [$radius.variable]: "radii.xl",
      [$padding2.variable]: "space.7"
    }
  })
};
var variants9 = {
  elevated: definePartsStyle23({
    container: {
      [$shadow4.variable]: "shadows.base",
      _dark: {
        [$bg13.variable]: "colors.gray.700"
      }
    }
  }),
  outline: definePartsStyle23({
    container: {
      [$border3.variable]: "1px",
      [$borderColor.variable]: "colors.chakra-border-color"
    }
  }),
  filled: definePartsStyle23({
    container: {
      [$bg13.variable]: "colors.chakra-subtle-bg"
    }
  }),
  unstyled: {
    body: {
      [$padding2.variable]: 0
    },
    header: {
      [$padding2.variable]: 0
    },
    footer: {
      [$padding2.variable]: 0
    }
  }
};
var cardTheme = defineMultiStyleConfig23({
  baseStyle: baseStyle35,
  variants: variants9,
  sizes: sizes21,
  defaultProps: {
    variant: "elevated",
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-OB7MMEC3.mjs
var $size4 = cssVar3("close-button-size");
var $bg14 = cssVar3("close-button-bg");
var baseStyle36 = defineStyle({
  w: [$size4.reference],
  h: [$size4.reference],
  borderRadius: "md",
  transitionProperty: "common",
  transitionDuration: "normal",
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    [$bg14.variable]: "colors.blackAlpha.100",
    _dark: {
      [$bg14.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg14.variable]: "colors.blackAlpha.200",
    _dark: {
      [$bg14.variable]: "colors.whiteAlpha.200"
    }
  },
  _focusVisible: {
    boxShadow: "outline"
  },
  bg: $bg14.reference
});
var sizes22 = {
  lg: defineStyle({
    [$size4.variable]: "sizes.10",
    fontSize: "md"
  }),
  md: defineStyle({
    [$size4.variable]: "sizes.8",
    fontSize: "xs"
  }),
  sm: defineStyle({
    [$size4.variable]: "sizes.6",
    fontSize: "2xs"
  })
};
var closeButtonTheme = defineStyleConfig({
  baseStyle: baseStyle36,
  sizes: sizes22,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-K3RH7Y2L.mjs
var { variants: variants10, defaultProps } = badgeTheme;
var baseStyle37 = defineStyle({
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm",
  bg: vars.bg.reference,
  color: vars.color.reference,
  boxShadow: vars.shadow.reference
});
var codeTheme = defineStyleConfig({
  baseStyle: baseStyle37,
  variants: variants10,
  defaultProps
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-TECE6HDR.mjs
var baseStyle38 = defineStyle({
  w: "100%",
  mx: "auto",
  maxW: "prose",
  px: "4"
});
var containerTheme = defineStyleConfig({
  baseStyle: baseStyle38
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-5S44M2O4.mjs
var baseStyle39 = defineStyle({
  opacity: 0.6,
  borderColor: "inherit"
});
var variantSolid3 = defineStyle({
  borderStyle: "solid"
});
var variantDashed = defineStyle({
  borderStyle: "dashed"
});
var variants11 = {
  solid: variantSolid3,
  dashed: variantDashed
};
var dividerTheme = defineStyleConfig({
  baseStyle: baseStyle39,
  variants: variants11,
  defaultProps: {
    variant: "solid"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-J7AGDWFO.mjs
var { definePartsStyle: definePartsStyle24, defineMultiStyleConfig: defineMultiStyleConfig24 } = createMultiStyleConfigHelpers(accordionAnatomy.keys);
var baseStyleContainer4 = defineStyle({
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
});
var baseStyleButton2 = defineStyle({
  transitionProperty: "common",
  transitionDuration: "normal",
  fontSize: "md",
  _focusVisible: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: "4",
  py: "2"
});
var baseStylePanel = defineStyle({
  pt: "2",
  px: "4",
  pb: "5"
});
var baseStyleIcon7 = defineStyle({
  fontSize: "1.25em"
});
var baseStyle40 = definePartsStyle24({
  container: baseStyleContainer4,
  button: baseStyleButton2,
  panel: baseStylePanel,
  icon: baseStyleIcon7
});
var accordionTheme = defineMultiStyleConfig24({ baseStyle: baseStyle40 });

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-BNQWYFTH.mjs
var { definePartsStyle: definePartsStyle25, defineMultiStyleConfig: defineMultiStyleConfig25 } = createMultiStyleConfigHelpers(alertAnatomy.keys);
var $fg6 = cssVar2("alert-fg");
var $bg15 = cssVar2("alert-bg");
var baseStyle41 = definePartsStyle25({
  container: {
    bg: $bg15.reference,
    px: "4",
    py: "3"
  },
  title: {
    fontWeight: "bold",
    lineHeight: "6",
    marginEnd: "2"
  },
  description: {
    lineHeight: "6"
  },
  icon: {
    color: $fg6.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "6"
  },
  spinner: {
    color: $fg6.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "5"
  }
});
function getBg(props) {
  const { theme: theme3, colorScheme: c } = props;
  const darkBg = transparentize2(`${c}.200`, 0.16)(theme3);
  return {
    light: `colors.${c}.100`,
    dark: darkBg
  };
}
var variantSubtle2 = definePartsStyle25((props) => {
  const { colorScheme: c } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.600`,
      [$bg15.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg15.variable]: bg.dark
      }
    }
  };
});
var variantLeftAccent = definePartsStyle25((props) => {
  const { colorScheme: c } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.600`,
      [$bg15.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg15.variable]: bg.dark
      },
      paddingStart: "3",
      borderStartWidth: "4px",
      borderStartColor: $fg6.reference
    }
  };
});
var variantTopAccent = definePartsStyle25((props) => {
  const { colorScheme: c } = props;
  const bg = getBg(props);
  return {
    container: {
      [$fg6.variable]: `colors.${c}.600`,
      [$bg15.variable]: bg.light,
      _dark: {
        [$fg6.variable]: `colors.${c}.200`,
        [$bg15.variable]: bg.dark
      },
      pt: "2",
      borderTopWidth: "4px",
      borderTopColor: $fg6.reference
    }
  };
});
var variantSolid4 = definePartsStyle25((props) => {
  const { colorScheme: c } = props;
  return {
    container: {
      [$fg6.variable]: `colors.white`,
      [$bg15.variable]: `colors.${c}.600`,
      _dark: {
        [$fg6.variable]: `colors.gray.900`,
        [$bg15.variable]: `colors.${c}.200`
      },
      color: $fg6.reference
    }
  };
});
var variants12 = {
  subtle: variantSubtle2,
  "left-accent": variantLeftAccent,
  "top-accent": variantTopAccent,
  solid: variantSolid4
};
var alertTheme = defineMultiStyleConfig25({
  baseStyle: baseStyle41,
  variants: variants12,
  defaultProps: {
    variant: "subtle",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-Q5ZQE4MD.mjs
var { definePartsStyle: definePartsStyle26, defineMultiStyleConfig: defineMultiStyleConfig26 } = createMultiStyleConfigHelpers(avatarAnatomy.keys);
var $border4 = cssVar2("avatar-border-color");
var $bg16 = cssVar2("avatar-bg");
var $fs = cssVar2("avatar-font-size");
var $size5 = cssVar2("avatar-size");
var baseStyleBadge = defineStyle({
  borderRadius: "full",
  border: "0.2em solid",
  borderColor: $border4.reference,
  [$border4.variable]: "white",
  _dark: {
    [$border4.variable]: "colors.gray.800"
  }
});
var baseStyleExcessLabel = defineStyle({
  bg: $bg16.reference,
  fontSize: $fs.reference,
  width: $size5.reference,
  height: $size5.reference,
  lineHeight: "1",
  [$bg16.variable]: "colors.gray.200",
  _dark: {
    [$bg16.variable]: "colors.whiteAlpha.400"
  }
});
var baseStyleContainer5 = defineStyle((props) => {
  const { name, theme: theme3 } = props;
  const bg = name ? randomColor({ string: name }) : "colors.gray.400";
  const isBgDark = isDark(bg)(theme3);
  let color4 = "white";
  if (!isBgDark)
    color4 = "gray.800";
  return {
    bg: $bg16.reference,
    fontSize: $fs.reference,
    color: color4,
    borderColor: $border4.reference,
    verticalAlign: "top",
    width: $size5.reference,
    height: $size5.reference,
    "&:not([data-loaded])": {
      [$bg16.variable]: bg
    },
    [$border4.variable]: "colors.white",
    _dark: {
      [$border4.variable]: "colors.gray.800"
    }
  };
});
var baseStyleLabel5 = defineStyle({
  fontSize: $fs.reference,
  lineHeight: "1"
});
var baseStyle42 = definePartsStyle26((props) => ({
  badge: runIfFn2(baseStyleBadge, props),
  excessLabel: runIfFn2(baseStyleExcessLabel, props),
  container: runIfFn2(baseStyleContainer5, props),
  label: baseStyleLabel5
}));
function getSize4(size3) {
  const themeSize = size3 !== "100%" ? sizes_default[size3] : void 0;
  return definePartsStyle26({
    container: {
      [$size5.variable]: themeSize != null ? themeSize : size3,
      [$fs.variable]: `calc(${themeSize != null ? themeSize : size3} / 2.5)`
    },
    excessLabel: {
      [$size5.variable]: themeSize != null ? themeSize : size3,
      [$fs.variable]: `calc(${themeSize != null ? themeSize : size3} / 2.5)`
    }
  });
}
var sizes23 = {
  "2xs": getSize4(4),
  xs: getSize4(6),
  sm: getSize4(8),
  md: getSize4(12),
  lg: getSize4(16),
  xl: getSize4(24),
  "2xl": getSize4(32),
  full: getSize4("100%")
};
var avatarTheme = defineMultiStyleConfig26({
  baseStyle: baseStyle42,
  sizes: sizes23,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-P7SDT22G.mjs
var components = {
  Accordion: accordionTheme,
  Alert: alertTheme,
  Avatar: avatarTheme,
  Badge: badgeTheme,
  Breadcrumb: breadcrumbTheme,
  Button: buttonTheme,
  Checkbox: checkboxTheme,
  CloseButton: closeButtonTheme,
  Code: codeTheme,
  Container: containerTheme,
  Divider: dividerTheme,
  Drawer: drawerTheme,
  Editable: editableTheme,
  Form: formTheme,
  FormError: formErrorTheme,
  FormLabel: formLabelTheme,
  Heading: headingTheme,
  Input: inputTheme,
  Kbd: kbdTheme,
  Link: linkTheme,
  List: listTheme,
  Menu: menuTheme,
  Modal: modalTheme,
  NumberInput: numberInputTheme,
  PinInput: pinInputTheme,
  Popover: popoverTheme,
  Progress: progressTheme,
  Radio: radioTheme,
  Select: selectTheme,
  Skeleton: skeletonTheme,
  SkipLink: skipLinkTheme,
  Slider: sliderTheme,
  Spinner: spinnerTheme,
  Stat: statTheme,
  Switch: switchTheme,
  Table: tableTheme,
  Tabs: tabsTheme,
  Tag: tagTheme,
  Textarea: textareaTheme,
  Tooltip: tooltipTheme,
  Card: cardTheme,
  Stepper: stepperTheme
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-5GOSZLB7.mjs
var semanticTokens = {
  colors: {
    "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
    "chakra-body-bg": { _light: "white", _dark: "gray.800" },
    "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
    "chakra-inverse-text": { _light: "white", _dark: "gray.800" },
    "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
    "chakra-subtle-text": { _light: "gray.600", _dark: "gray.400" },
    "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
  }
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/chunk-3F7U33P5.mjs
var styles = {
  global: {
    body: {
      fontFamily: "body",
      color: "chakra-body-text",
      bg: "chakra-body-bg",
      transitionProperty: "background-color",
      transitionDuration: "normal",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: "chakra-placeholder-color"
    },
    "*, *::before, &::after": {
      borderColor: "chakra-border-color"
    }
  }
};

// node_modules/@chakra-ui/theme-utils/node_modules/@chakra-ui/theme/dist/index.mjs
var direction = "ltr";
var config = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme = {
  semanticTokens,
  direction,
  ...foundations,
  components,
  styles,
  config
};
var baseTheme = {
  semanticTokens,
  direction,
  components: {},
  ...foundations,
  styles,
  config
};

// node_modules/@chakra-ui/theme-utils/dist/chunk-LIR5QAZY.mjs
var import_lodash9 = __toESM(require_lodash(), 1);
function isFunction3(value) {
  return typeof value === "function";
}
function pipe3(...fns) {
  return (v) => fns.reduce((a, b) => b(a), v);
}
var createExtendTheme = (theme22) => {
  return function extendTheme2(...extensions) {
    let overrides = [...extensions];
    let activeTheme = extensions[extensions.length - 1];
    if (isChakraTheme(activeTheme) && // this ensures backward compatibility
    // previously only `extendTheme(override, activeTheme?)` was allowed
    overrides.length > 1) {
      overrides = overrides.slice(0, overrides.length - 1);
    } else {
      activeTheme = theme22;
    }
    return pipe3(
      ...overrides.map(
        (extension) => (prevTheme) => isFunction3(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension)
      )
    )(activeTheme);
  };
};
var extendTheme = createExtendTheme(theme);
var extendBaseTheme = createExtendTheme(baseTheme);
function mergeThemeOverride(...overrides) {
  return (0, import_lodash9.default)({}, ...overrides, mergeThemeCustomizer);
}
function mergeThemeCustomizer(source, override, key, object) {
  if ((isFunction3(source) || isFunction3(override)) && Object.prototype.hasOwnProperty.call(object, key)) {
    return (...args) => {
      const sourceValue = isFunction3(source) ? source(...args) : source;
      const overrideValue = isFunction3(override) ? override(...args) : override;
      return (0, import_lodash9.default)({}, sourceValue, overrideValue, mergeThemeCustomizer);
    };
  }
  return void 0;
}

// node_modules/@chakra-ui/system/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
function canUseDOM() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser = canUseDOM();

// node_modules/@chakra-ui/system/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
var import_lodash10 = __toESM(require_lodash(), 1);
function omit2(object, keys2) {
  const result = {};
  Object.keys(object).forEach((key) => {
    if (keys2.includes(key))
      return;
    result[key] = object[key];
  });
  return result;
}
function get3(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize3 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet3 = memoize3(get3);
function objectFilter(object, fn) {
  const result = {};
  Object.keys(object).forEach((key) => {
    const value = object[key];
    const shouldPass = fn(value, key, object);
    if (shouldPass) {
      result[key] = value;
    }
  });
  return result;
}
var filterUndefined = (object) => objectFilter(object, (val) => val !== null && val !== void 0);

// node_modules/@chakra-ui/system/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
function isFunction4(value) {
  return typeof value === "function";
}
var __DEV__ = true;

// node_modules/@chakra-ui/system/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
function runIfFn3(valueOrFn, ...args) {
  return isFunction4(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}
function once(fn) {
  let result;
  return function func(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn2 = once((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__) {
    console.warn(message);
  }
});
var error = once((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/system/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/system/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints2 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/system/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector = focusableElList.join();

// node_modules/@chakra-ui/system/dist/chunk-DMO4EI7P.mjs
var import_react9 = __toESM(require_react(), 1);
var import_react_fast_compare = __toESM(require_react_fast_compare(), 1);
function useStyleConfigImpl(themeKey, props = {}) {
  var _a10;
  const { styleConfig: styleConfigProp, ...rest } = props;
  const { theme: theme3, colorMode } = useChakra();
  const themeStyleConfig = themeKey ? memoizedGet3(theme3, `components.${themeKey}`) : void 0;
  const styleConfig = styleConfigProp || themeStyleConfig;
  const mergedProps = (0, import_lodash10.default)(
    { theme: theme3, colorMode },
    (_a10 = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a10 : {},
    filterUndefined(omit2(rest, ["children"]))
  );
  const stylesRef = (0, import_react9.useRef)({});
  if (styleConfig) {
    const getStyles = resolveStyleConfig(styleConfig);
    const styles3 = getStyles(mergedProps);
    const isStyleEqual = (0, import_react_fast_compare.default)(stylesRef.current, styles3);
    if (!isStyleEqual) {
      stylesRef.current = styles3;
    }
  }
  return stylesRef.current;
}
function useStyleConfig(themeKey, props = {}) {
  return useStyleConfigImpl(themeKey, props);
}
function useMultiStyleConfig(themeKey, props = {}) {
  return useStyleConfigImpl(themeKey, props);
}

// node_modules/@chakra-ui/system/dist/chunk-FDQH4LQI.mjs
var allPropNames = /* @__PURE__ */ new Set([
  ...propNames,
  "textStyle",
  "layerStyle",
  "apply",
  "noOfLines",
  "focusBorderColor",
  "errorBorderColor",
  "as",
  "__css",
  "css",
  "sx"
]);
var validHTMLProps = /* @__PURE__ */ new Set([
  "htmlWidth",
  "htmlHeight",
  "htmlSize",
  "htmlTranslate"
]);
function shouldForwardProp(prop) {
  return validHTMLProps.has(prop) || !allPropNames.has(prop);
}

// node_modules/@chakra-ui/object-utils/dist/chunk-OLTBUDV5.mjs
function assignAfter(target, ...sources) {
  if (target == null) {
    throw new TypeError("Cannot convert undefined or null to object");
  }
  const result = { ...target };
  for (const nextSource of sources) {
    if (nextSource == null)
      continue;
    for (const nextKey in nextSource) {
      if (!Object.prototype.hasOwnProperty.call(nextSource, nextKey))
        continue;
      if (nextKey in result)
        delete result[nextKey];
      result[nextKey] = nextSource[nextKey];
    }
  }
  return result;
}

// node_modules/@chakra-ui/system/dist/chunk-5PL47M24.mjs
var import_react10 = __toESM(require_react(), 1);
var _a6;
var emotion_styled = (_a6 = newStyled.default) != null ? _a6 : newStyled;
var toCSSObject = ({ baseStyle: baseStyle85 }) => (props) => {
  const { theme: theme3, css: cssProp, __css, sx, ...rest } = props;
  const styleProps4 = objectFilter(rest, (_, prop) => isStyleProp(prop));
  const finalBaseStyle = runIfFn3(baseStyle85, props);
  const finalStyles = assignAfter(
    {},
    __css,
    finalBaseStyle,
    filterUndefined(styleProps4),
    sx
  );
  const computedCSS = css(finalStyles)(props.theme);
  return cssProp ? [computedCSS, cssProp] : computedCSS;
};
function styled(component, options) {
  const { baseStyle: baseStyle85, ...styledOptions } = options != null ? options : {};
  if (!styledOptions.shouldForwardProp) {
    styledOptions.shouldForwardProp = shouldForwardProp;
  }
  const styleObject = toCSSObject({ baseStyle: baseStyle85 });
  const Component = emotion_styled(
    component,
    styledOptions
  )(styleObject);
  const chakraComponent = import_react10.default.forwardRef(function ChakraComponent(props, ref) {
    const { colorMode, forced } = useColorMode();
    return import_react10.default.createElement(Component, {
      ref,
      "data-theme": forced ? colorMode : void 0,
      ...props
    });
  });
  return chakraComponent;
}

// node_modules/@chakra-ui/system/dist/chunk-ZHQNHOQS.mjs
function factory() {
  const cache = /* @__PURE__ */ new Map();
  return new Proxy(styled, {
    /**
     * @example
     * const Div = chakra("div")
     * const WithChakra = chakra(AnotherComponent)
     */
    apply(target, thisArg, argArray) {
      return styled(...argArray);
    },
    /**
     * @example
     * <chakra.div />
     */
    get(_, element) {
      if (!cache.has(element)) {
        cache.set(element, styled(element));
      }
      return cache.get(element);
    }
  });
}
var chakra = factory();

// node_modules/@chakra-ui/system/dist/chunk-ZJJGQIVY.mjs
var import_react11 = __toESM(require_react(), 1);
function forwardRef(component) {
  return (0, import_react11.forwardRef)(component);
}

// node_modules/@chakra-ui/react-utils/dist/chunk-IH2MM24A.mjs
var import_react12 = __toESM(require_react(), 1);

// node_modules/@chakra-ui/react-utils/dist/chunk-ITIKTQWJ.mjs
var import_react13 = __toESM(require_react(), 1);
function createContext2(options = {}) {
  const {
    strict = true,
    errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
    name
  } = options;
  const Context = (0, import_react13.createContext)(void 0);
  Context.displayName = name;
  function useContext3() {
    var _a10;
    const context = (0, import_react13.useContext)(Context);
    if (!context && strict) {
      const error3 = new Error(errorMessage);
      error3.name = "ContextError";
      (_a10 = Error.captureStackTrace) == null ? void 0 : _a10.call(Error, error3, useContext3);
      throw error3;
    }
    return context;
  }
  return [
    Context.Provider,
    useContext3,
    Context
  ];
}

// node_modules/@chakra-ui/react-utils/node_modules/@chakra-ui/utils/dist/chunk-O3SWHQEE.mjs
function canUseDOM2() {
  return !!(typeof window !== "undefined" && window.document && window.document.createElement);
}
var isBrowser2 = canUseDOM2();

// node_modules/@chakra-ui/react-utils/node_modules/@chakra-ui/utils/dist/chunk-YTQ3XZ3T.mjs
var import_lodash11 = __toESM(require_lodash(), 1);
function get4(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize4 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet4 = memoize4(get4);

// node_modules/@chakra-ui/react-utils/node_modules/@chakra-ui/utils/dist/chunk-Y5FGD7DM.mjs
var __DEV__2 = true;

// node_modules/@chakra-ui/react-utils/node_modules/@chakra-ui/utils/dist/chunk-M3TFMUOL.mjs
function once2(fn) {
  let result;
  return function func(...args) {
    if (fn) {
      result = fn.apply(this, args);
      fn = null;
    }
    return result;
  };
}
var warn3 = once2((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__2) {
    console.warn(message);
  }
});
var error2 = once2((options) => () => {
  const { condition, message } = options;
  if (condition && __DEV__2) {
    console.error(message);
  }
});

// node_modules/@chakra-ui/react-utils/node_modules/@chakra-ui/utils/dist/chunk-YAFHXCR4.mjs
var minSafeInteger2 = Number.MIN_SAFE_INTEGER || -9007199254740991;
var maxSafeInteger2 = Number.MAX_SAFE_INTEGER || 9007199254740991;

// node_modules/@chakra-ui/react-utils/node_modules/@chakra-ui/utils/dist/chunk-FGAEJGLB.mjs
var breakpoints3 = Object.freeze([
  "base",
  "sm",
  "md",
  "lg",
  "xl",
  "2xl"
]);

// node_modules/@chakra-ui/react-utils/node_modules/@chakra-ui/utils/dist/chunk-5LUSIWEA.mjs
var focusableElList2 = [
  "input:not(:disabled):not([disabled])",
  "select:not(:disabled):not([disabled])",
  "textarea:not(:disabled):not([disabled])",
  "embed",
  "iframe",
  "object",
  "a[href]",
  "area[href]",
  "button:not(:disabled):not([disabled])",
  "[tabindex]",
  "audio[controls]",
  "video[controls]",
  "*[tabindex]:not([aria-disabled])",
  "*[contenteditable]"
];
var focusableElSelector2 = focusableElList2.join();

// node_modules/@chakra-ui/system/dist/chunk-MFVQSVQB.mjs
var import_react15 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
function ThemeProvider2(props) {
  const { cssVarsRoot, theme: theme3, children } = props;
  const computedTheme = (0, import_react15.useMemo)(() => toCSSVar(theme3), [theme3]);
  return (0, import_jsx_runtime3.jsxs)(ThemeProvider, { theme: computedTheme, children: [
    (0, import_jsx_runtime3.jsx)(CSSVars, { root: cssVarsRoot }),
    children
  ] });
}
function CSSVars({ root = ":host, :root" }) {
  const selector = [root, `[data-theme]`].join(",");
  return (0, import_jsx_runtime3.jsx)(Global, { styles: (theme3) => ({ [selector]: theme3.__cssVars }) });
}
var [StylesProvider, useStyles] = createContext2({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});

// node_modules/@chakra-ui/toast/dist/chunk-VXESY33O.mjs
var import_react17 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var toastMotionVariants = {
  initial: (props) => {
    const { position: position4 } = props;
    const dir = ["top", "bottom"].includes(position4) ? "y" : "x";
    let factor = ["top-right", "bottom-right"].includes(position4) ? 1 : -1;
    if (position4 === "bottom")
      factor = 1;
    return {
      opacity: 0,
      [dir]: factor * 24
    };
  },
  animate: {
    opacity: 1,
    y: 0,
    x: 0,
    scale: 1,
    transition: {
      duration: 0.4,
      ease: [0.4, 0, 0.2, 1]
    }
  },
  exit: {
    opacity: 0,
    scale: 0.85,
    transition: {
      duration: 0.2,
      ease: [0.4, 0, 1, 1]
    }
  }
};
var ToastComponent = (0, import_react17.memo)((props) => {
  const {
    id,
    message,
    onCloseComplete,
    onRequestRemove,
    requestClose = false,
    position: position4 = "bottom",
    duration = 5e3,
    containerStyle,
    motionVariants = toastMotionVariants,
    toastSpacing = "0.5rem"
  } = props;
  const [delay, setDelay] = (0, import_react17.useState)(duration);
  const isPresent = useIsPresent();
  useUpdateEffect(() => {
    if (!isPresent) {
      onCloseComplete == null ? void 0 : onCloseComplete();
    }
  }, [isPresent]);
  useUpdateEffect(() => {
    setDelay(duration);
  }, [duration]);
  const onMouseEnter = () => setDelay(null);
  const onMouseLeave = () => setDelay(duration);
  const close = () => {
    if (isPresent)
      onRequestRemove();
  };
  (0, import_react17.useEffect)(() => {
    if (isPresent && requestClose) {
      onRequestRemove();
    }
  }, [isPresent, requestClose, onRequestRemove]);
  useTimeout(close, delay);
  const containerStyles = (0, import_react17.useMemo)(
    () => ({
      pointerEvents: "auto",
      maxWidth: 560,
      minWidth: 300,
      margin: toastSpacing,
      ...containerStyle
    }),
    [containerStyle, toastSpacing]
  );
  const toastStyle = (0, import_react17.useMemo)(() => getToastStyle(position4), [position4]);
  return (0, import_jsx_runtime4.jsx)(
    motion.div,
    {
      layout: true,
      className: "chakra-toast",
      variants: motionVariants,
      initial: "initial",
      animate: "animate",
      exit: "exit",
      onHoverStart: onMouseEnter,
      onHoverEnd: onMouseLeave,
      custom: { position: position4 },
      style: toastStyle,
      children: (0, import_jsx_runtime4.jsx)(
        chakra.div,
        {
          role: "status",
          "aria-atomic": "true",
          className: "chakra-toast__inner",
          __css: containerStyles,
          children: runIfFn(message, { id, onClose: close })
        }
      )
    }
  );
});
ToastComponent.displayName = "ToastComponent";

// node_modules/@chakra-ui/toast/dist/chunk-LHPMGMGT.mjs
function getToastPlacement(position4, dir) {
  var _a10;
  const computedPosition = position4 != null ? position4 : "bottom";
  const logicals = {
    "top-start": { ltr: "top-left", rtl: "top-right" },
    "top-end": { ltr: "top-right", rtl: "top-left" },
    "bottom-start": { ltr: "bottom-left", rtl: "bottom-right" },
    "bottom-end": { ltr: "bottom-right", rtl: "bottom-left" }
  };
  const logical4 = logicals[computedPosition];
  return (_a10 = logical4 == null ? void 0 : logical4[dir]) != null ? _a10 : computedPosition;
}

// node_modules/@chakra-ui/icon/dist/chunk-2GBDXOMA.mjs
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var fallbackIcon = {
  path: (0, import_jsx_runtime5.jsxs)("g", { stroke: "currentColor", strokeWidth: "1.5", children: [
    (0, import_jsx_runtime5.jsx)(
      "path",
      {
        strokeLinecap: "round",
        fill: "none",
        d: "M9,9a3,3,0,1,1,4,2.829,1.5,1.5,0,0,0-1,1.415V14.25"
      }
    ),
    (0, import_jsx_runtime5.jsx)(
      "path",
      {
        fill: "currentColor",
        strokeLinecap: "round",
        d: "M12,17.25a.375.375,0,1,0,.375.375A.375.375,0,0,0,12,17.25h0"
      }
    ),
    (0, import_jsx_runtime5.jsx)("circle", { fill: "none", strokeMiterlimit: "10", cx: "12", cy: "12", r: "11.25" })
  ] }),
  viewBox: "0 0 24 24"
};
var Icon = forwardRef((props, ref) => {
  const {
    as: element,
    viewBox,
    color: color4 = "currentColor",
    focusable = false,
    children,
    className,
    __css,
    ...rest
  } = props;
  const _className = cx("chakra-icon", className);
  const customStyles = useStyleConfig("Icon", props);
  const styles3 = {
    w: "1em",
    h: "1em",
    display: "inline-block",
    lineHeight: "1em",
    flexShrink: 0,
    color: color4,
    ...__css,
    ...customStyles
  };
  const shared = {
    ref,
    focusable,
    className: _className,
    __css: styles3
  };
  const _viewBox = viewBox != null ? viewBox : fallbackIcon.viewBox;
  if (element && typeof element !== "string") {
    return (0, import_jsx_runtime5.jsx)(chakra.svg, { as: element, ...shared, ...rest });
  }
  const _path = children != null ? children : fallbackIcon.path;
  return (0, import_jsx_runtime5.jsx)(chakra.svg, { verticalAlign: "middle", viewBox: _viewBox, ...shared, ...rest, children: _path });
});
Icon.displayName = "Icon";

// node_modules/@chakra-ui/icon/dist/chunk-DEQZ7DVA.mjs
var import_react18 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);

// node_modules/@chakra-ui/alert/dist/chunk-NEDBTDT2.mjs
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function CheckIcon(props) {
  return (0, import_jsx_runtime7.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime7.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.014,12.014,0,0,0,12,0Zm6.927,8.2-6.845,9.289a1.011,1.011,0,0,1-1.43.188L5.764,13.769a1,1,0,1,1,1.25-1.562l4.076,3.261,6.227-8.451A1,1,0,1,1,18.927,8.2Z"
    }
  ) });
}
function InfoIcon(props) {
  return (0, import_jsx_runtime7.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime7.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M12,0A12,12,0,1,0,24,12,12.013,12.013,0,0,0,12,0Zm.25,5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,12.25,5ZM14.5,18.5h-4a1,1,0,0,1,0-2h.75a.25.25,0,0,0,.25-.25v-4.5a.25.25,0,0,0-.25-.25H10.5a1,1,0,0,1,0-2h1a2,2,0,0,1,2,2v4.75a.25.25,0,0,0,.25.25h.75a1,1,0,1,1,0,2Z"
    }
  ) });
}
function WarningIcon(props) {
  return (0, import_jsx_runtime7.jsx)(Icon, { viewBox: "0 0 24 24", ...props, children: (0, import_jsx_runtime7.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M11.983,0a12.206,12.206,0,0,0-8.51,3.653A11.8,11.8,0,0,0,0,12.207,11.779,11.779,0,0,0,11.8,24h.214A12.111,12.111,0,0,0,24,11.791h0A11.766,11.766,0,0,0,11.983,0ZM10.5,16.542a1.476,1.476,0,0,1,1.449-1.53h.027a1.527,1.527,0,0,1,1.523,1.47,1.475,1.475,0,0,1-1.449,1.53h-.027A1.529,1.529,0,0,1,10.5,16.542ZM11,12.5v-6a1,1,0,0,1,2,0v6a1,1,0,1,1-2,0Z"
    }
  ) });
}

// node_modules/@chakra-ui/react-context/dist/index.mjs
var import_react19 = __toESM(require_react(), 1);
function getErrorMessage(hook, provider) {
  return `${hook} returned \`undefined\`. Seems you forgot to wrap component within ${provider}`;
}
function createContext3(options = {}) {
  const {
    name,
    strict = true,
    hookName = "useContext",
    providerName = "Provider",
    errorMessage,
    defaultValue
  } = options;
  const Context = (0, import_react19.createContext)(defaultValue);
  Context.displayName = name;
  function useContext3() {
    var _a10;
    const context = (0, import_react19.useContext)(Context);
    if (!context && strict) {
      const error3 = new Error(
        errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName)
      );
      error3.name = "ContextError";
      (_a10 = Error.captureStackTrace) == null ? void 0 : _a10.call(Error, error3, useContext3);
      throw error3;
    }
    return context;
  }
  return [Context.Provider, useContext3, Context];
}

// node_modules/@chakra-ui/spinner/dist/chunk-5PH6ULNP.mjs
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var spin = keyframes({
  "0%": {
    transform: "rotate(0deg)"
  },
  "100%": {
    transform: "rotate(360deg)"
  }
});
var Spinner = forwardRef((props, ref) => {
  const styles3 = useStyleConfig("Spinner", props);
  const {
    label = "Loading...",
    thickness = "2px",
    speed = "0.45s",
    emptyColor = "transparent",
    className,
    ...rest
  } = omitThemingProps(props);
  const _className = cx("chakra-spinner", className);
  const spinnerStyles = {
    display: "inline-block",
    borderColor: "currentColor",
    borderStyle: "solid",
    borderRadius: "99999px",
    borderWidth: thickness,
    borderBottomColor: emptyColor,
    borderLeftColor: emptyColor,
    animation: `${spin} ${speed} linear infinite`,
    ...styles3
  };
  return (0, import_jsx_runtime8.jsx)(
    chakra.div,
    {
      ref,
      __css: spinnerStyles,
      className: _className,
      ...rest,
      children: label && (0, import_jsx_runtime8.jsx)(chakra.span, { srOnly: true, children: label })
    }
  );
});
Spinner.displayName = "Spinner";

// node_modules/@chakra-ui/alert/dist/chunk-XCES3W5V.mjs
var [AlertProvider, useAlertContext] = createContext3({
  name: "AlertContext",
  hookName: "useAlertContext",
  providerName: "<Alert />"
});
var [AlertStylesProvider, useAlertStyles] = createContext3({
  name: `AlertStylesContext`,
  hookName: `useAlertStyles`,
  providerName: "<Alert />"
});
var STATUSES = {
  info: { icon: InfoIcon, colorScheme: "blue" },
  warning: { icon: WarningIcon, colorScheme: "orange" },
  success: { icon: CheckIcon, colorScheme: "green" },
  error: { icon: WarningIcon, colorScheme: "red" },
  loading: { icon: Spinner, colorScheme: "blue" }
};
function getStatusColorScheme(status) {
  return STATUSES[status].colorScheme;
}
function getStatusIcon(status) {
  return STATUSES[status].icon;
}

// node_modules/@chakra-ui/alert/dist/chunk-CUKBNH6U.mjs
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var AlertDescription = forwardRef(
  function AlertDescription2(props, ref) {
    const styles3 = useAlertStyles();
    const { status } = useAlertContext();
    const descriptionStyles = {
      display: "inline",
      ...styles3.description
    };
    return (0, import_jsx_runtime9.jsx)(
      chakra.div,
      {
        ref,
        "data-status": status,
        ...props,
        className: cx("chakra-alert__desc", props.className),
        __css: descriptionStyles
      }
    );
  }
);
AlertDescription.displayName = "AlertDescription";

// node_modules/@chakra-ui/alert/dist/chunk-ALC6QPCI.mjs
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
function AlertIcon(props) {
  const { status } = useAlertContext();
  const BaseIcon = getStatusIcon(status);
  const styles3 = useAlertStyles();
  const css2 = status === "loading" ? styles3.spinner : styles3.icon;
  return (0, import_jsx_runtime10.jsx)(
    chakra.span,
    {
      display: "inherit",
      "data-status": status,
      ...props,
      className: cx("chakra-alert__icon", props.className),
      __css: css2,
      children: props.children || (0, import_jsx_runtime10.jsx)(BaseIcon, { h: "100%", w: "100%" })
    }
  );
}
AlertIcon.displayName = "AlertIcon";

// node_modules/@chakra-ui/alert/dist/chunk-QURMB2UJ.mjs
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var AlertTitle = forwardRef(
  function AlertTitle2(props, ref) {
    const styles3 = useAlertStyles();
    const { status } = useAlertContext();
    return (0, import_jsx_runtime11.jsx)(
      chakra.div,
      {
        ref,
        "data-status": status,
        ...props,
        className: cx("chakra-alert__title", props.className),
        __css: styles3.title
      }
    );
  }
);
AlertTitle.displayName = "AlertTitle";

// node_modules/@chakra-ui/alert/dist/chunk-3KCBMPN5.mjs
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var Alert = forwardRef(function Alert2(props, ref) {
  var _a10;
  const { status = "info", addRole = true, ...rest } = omitThemingProps(props);
  const colorScheme = (_a10 = props.colorScheme) != null ? _a10 : getStatusColorScheme(status);
  const styles3 = useMultiStyleConfig("Alert", { ...props, colorScheme });
  const alertStyles = {
    width: "100%",
    display: "flex",
    alignItems: "center",
    position: "relative",
    overflow: "hidden",
    ...styles3.container
  };
  return (0, import_jsx_runtime12.jsx)(AlertProvider, { value: { status }, children: (0, import_jsx_runtime12.jsx)(AlertStylesProvider, { value: styles3, children: (0, import_jsx_runtime12.jsx)(
    chakra.div,
    {
      "data-status": status,
      role: addRole ? "alert" : void 0,
      ref,
      ...rest,
      className: cx("chakra-alert", props.className),
      __css: alertStyles
    }
  ) }) });
});
Alert.displayName = "Alert";

// node_modules/@chakra-ui/close-button/dist/chunk-37N6GCLA.mjs
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
function CloseIcon(props) {
  return (0, import_jsx_runtime13.jsx)(Icon, { focusable: "false", "aria-hidden": true, ...props, children: (0, import_jsx_runtime13.jsx)(
    "path",
    {
      fill: "currentColor",
      d: "M.439,21.44a1.5,1.5,0,0,0,2.122,2.121L11.823,14.3a.25.25,0,0,1,.354,0l9.262,9.263a1.5,1.5,0,1,0,2.122-2.121L14.3,12.177a.25.25,0,0,1,0-.354l9.263-9.262A1.5,1.5,0,0,0,21.439.44L12.177,9.7a.25.25,0,0,1-.354,0L2.561.44A1.5,1.5,0,0,0,.439,2.561L9.7,11.823a.25.25,0,0,1,0,.354Z"
    }
  ) });
}
var CloseButton = forwardRef(
  function CloseButton2(props, ref) {
    const styles3 = useStyleConfig("CloseButton", props);
    const { children, isDisabled: isDisabled3, __css, ...rest } = omitThemingProps(props);
    const baseStyle85 = {
      outline: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      flexShrink: 0
    };
    return (0, import_jsx_runtime13.jsx)(
      chakra.button,
      {
        type: "button",
        "aria-label": "Close",
        ref,
        disabled: isDisabled3,
        __css: {
          ...baseStyle85,
          ...styles3,
          ...__css
        },
        ...rest,
        children: children || (0, import_jsx_runtime13.jsx)(CloseIcon, { width: "1em", height: "1em" })
      }
    );
  }
);
CloseButton.displayName = "CloseButton";

// node_modules/@chakra-ui/toast/dist/chunk-HYCJNCPE.mjs
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var initialState = {
  top: [],
  "top-left": [],
  "top-right": [],
  "bottom-left": [],
  bottom: [],
  "bottom-right": []
};
var toastStore = createStore(initialState);
function createStore(initialState2) {
  let state4 = initialState2;
  const listeners = /* @__PURE__ */ new Set();
  const setState = (setStateFn) => {
    state4 = setStateFn(state4);
    listeners.forEach((l) => l());
  };
  return {
    getState: () => state4,
    subscribe: (listener) => {
      listeners.add(listener);
      return () => {
        setState(() => initialState2);
        listeners.delete(listener);
      };
    },
    /**
     * Delete a toast record at its position
     */
    removeToast: (id, position4) => {
      setState((prevState) => ({
        ...prevState,
        // id may be string or number
        // eslint-disable-next-line eqeqeq
        [position4]: prevState[position4].filter((toast) => toast.id != id)
      }));
    },
    notify: (message, options) => {
      const toast = createToast(message, options);
      const { position: position4, id } = toast;
      setState((prevToasts) => {
        var _a10, _b8;
        const isTop = position4.includes("top");
        const toasts = isTop ? [toast, ...(_a10 = prevToasts[position4]) != null ? _a10 : []] : [...(_b8 = prevToasts[position4]) != null ? _b8 : [], toast];
        return {
          ...prevToasts,
          [position4]: toasts
        };
      });
      return id;
    },
    update: (id, options) => {
      if (!id)
        return;
      setState((prevState) => {
        const nextState = { ...prevState };
        const { position: position4, index } = findToast(nextState, id);
        if (position4 && index !== -1) {
          nextState[position4][index] = {
            ...nextState[position4][index],
            ...options,
            message: createRenderToast(options)
          };
        }
        return nextState;
      });
    },
    closeAll: ({ positions } = {}) => {
      setState((prev) => {
        const allPositions = [
          "bottom",
          "bottom-right",
          "bottom-left",
          "top",
          "top-left",
          "top-right"
        ];
        const positionsToClose = positions != null ? positions : allPositions;
        return positionsToClose.reduce(
          (acc, position4) => {
            acc[position4] = prev[position4].map((toast) => ({
              ...toast,
              requestClose: true
            }));
            return acc;
          },
          { ...prev }
        );
      });
    },
    close: (id) => {
      setState((prevState) => {
        const position4 = getToastPosition(prevState, id);
        if (!position4)
          return prevState;
        return {
          ...prevState,
          [position4]: prevState[position4].map((toast) => {
            if (toast.id == id) {
              return {
                ...toast,
                requestClose: true
              };
            }
            return toast;
          })
        };
      });
    },
    isActive: (id) => Boolean(findToast(toastStore.getState(), id).position)
  };
}
var counter = 0;
function createToast(message, options = {}) {
  var _a10, _b8;
  counter += 1;
  const id = (_a10 = options.id) != null ? _a10 : counter;
  const position4 = (_b8 = options.position) != null ? _b8 : "bottom";
  return {
    id,
    message,
    position: position4,
    duration: options.duration,
    onCloseComplete: options.onCloseComplete,
    onRequestRemove: () => toastStore.removeToast(String(id), position4),
    status: options.status,
    requestClose: false,
    containerStyle: options.containerStyle
  };
}
var Toast = (props) => {
  const {
    status,
    variant = "solid",
    id,
    title,
    isClosable,
    onClose,
    description,
    colorScheme,
    icon
  } = props;
  const ids = id ? {
    root: `toast-${id}`,
    title: `toast-${id}-title`,
    description: `toast-${id}-description`
  } : void 0;
  return (0, import_jsx_runtime14.jsxs)(
    Alert,
    {
      addRole: false,
      status,
      variant,
      id: ids == null ? void 0 : ids.root,
      alignItems: "start",
      borderRadius: "md",
      boxShadow: "lg",
      paddingEnd: 8,
      textAlign: "start",
      width: "auto",
      colorScheme,
      children: [
        (0, import_jsx_runtime14.jsx)(AlertIcon, { children: icon }),
        (0, import_jsx_runtime14.jsxs)(chakra.div, { flex: "1", maxWidth: "100%", children: [
          title && (0, import_jsx_runtime14.jsx)(AlertTitle, { id: ids == null ? void 0 : ids.title, children: title }),
          description && (0, import_jsx_runtime14.jsx)(AlertDescription, { id: ids == null ? void 0 : ids.description, display: "block", children: description })
        ] }),
        isClosable && (0, import_jsx_runtime14.jsx)(
          CloseButton,
          {
            size: "sm",
            onClick: onClose,
            position: "absolute",
            insetEnd: 1,
            top: 1
          }
        )
      ]
    }
  );
};
function createRenderToast(options = {}) {
  const { render, toastComponent: ToastComponent2 = Toast } = options;
  const renderToast = (props) => {
    if (typeof render === "function") {
      return render({ ...props, ...options });
    }
    return (0, import_jsx_runtime14.jsx)(ToastComponent2, { ...props, ...options });
  };
  return renderToast;
}
function createToastFn(dir, defaultOptions) {
  const normalizeToastOptions = (options) => {
    var _a10;
    return {
      ...defaultOptions,
      ...options,
      position: getToastPlacement(
        (_a10 = options == null ? void 0 : options.position) != null ? _a10 : defaultOptions == null ? void 0 : defaultOptions.position,
        dir
      )
    };
  };
  const toast = (options) => {
    const normalizedToastOptions = normalizeToastOptions(options);
    const Message = createRenderToast(normalizedToastOptions);
    return toastStore.notify(Message, normalizedToastOptions);
  };
  toast.update = (id, options) => {
    toastStore.update(id, normalizeToastOptions(options));
  };
  toast.promise = (promise, options) => {
    const id = toast({
      ...options.loading,
      status: "loading",
      duration: null
    });
    promise.then(
      (data) => toast.update(id, {
        status: "success",
        duration: 5e3,
        ...runIfFn(options.success, data)
      })
    ).catch(
      (error3) => toast.update(id, {
        status: "error",
        duration: 5e3,
        ...runIfFn(options.error, error3)
      })
    );
  };
  toast.closeAll = toastStore.closeAll;
  toast.close = toastStore.close;
  toast.isActive = toastStore.isActive;
  return toast;
}

// node_modules/@chakra-ui/portal/dist/chunk-HK66PB7M.mjs
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var [PortalManagerContextProvider, usePortalManager] = createContext3({
  strict: false,
  name: "PortalManagerContext"
});
function PortalManager(props) {
  const { children, zIndex } = props;
  return (0, import_jsx_runtime15.jsx)(PortalManagerContextProvider, { value: { zIndex }, children });
}
PortalManager.displayName = "PortalManager";

// node_modules/@chakra-ui/portal/dist/chunk-34PD6CUK.mjs
var import_react_dom = __toESM(require_react_dom(), 1);
var import_react20 = __toESM(require_react(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var [PortalContextProvider, usePortalContext] = createContext3({
  strict: false,
  name: "PortalContext"
});
var PORTAL_CLASSNAME = "chakra-portal";
var PORTAL_SELECTOR = `.chakra-portal`;
var Container = (props) => (0, import_jsx_runtime16.jsx)(
  "div",
  {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: props.zIndex,
      top: 0,
      left: 0,
      right: 0
      // NB: Don't add `bottom: 0`, it makes the entire app unusable
      // @see https://github.com/chakra-ui/chakra-ui/issues/3201
    },
    children: props.children
  }
);
var DefaultPortal = (props) => {
  const { appendToParentPortal, children } = props;
  const [tempNode, setTempNode] = (0, import_react20.useState)(null);
  const portal = (0, import_react20.useRef)(null);
  const [, forceUpdate] = (0, import_react20.useState)({});
  (0, import_react20.useEffect)(() => forceUpdate({}), []);
  const parentPortal = usePortalContext();
  const manager = usePortalManager();
  useSafeLayoutEffect(() => {
    if (!tempNode)
      return;
    const doc = tempNode.ownerDocument;
    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;
    if (!host)
      return;
    portal.current = doc.createElement("div");
    portal.current.className = PORTAL_CLASSNAME;
    host.appendChild(portal.current);
    forceUpdate({});
    const portalNode = portal.current;
    return () => {
      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, [tempNode]);
  const _children = (manager == null ? void 0 : manager.zIndex) ? (0, import_jsx_runtime16.jsx)(Container, { zIndex: manager == null ? void 0 : manager.zIndex, children }) : children;
  return portal.current ? (0, import_react_dom.createPortal)(
    (0, import_jsx_runtime16.jsx)(PortalContextProvider, { value: portal.current, children: _children }),
    portal.current
  ) : (0, import_jsx_runtime16.jsx)(
    "span",
    {
      ref: (el) => {
        if (el)
          setTempNode(el);
      }
    }
  );
};
var ContainerPortal = (props) => {
  const { children, containerRef, appendToParentPortal } = props;
  const containerEl = containerRef.current;
  const host = containerEl != null ? containerEl : typeof window !== "undefined" ? document.body : void 0;
  const portal = (0, import_react20.useMemo)(() => {
    const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement("div");
    if (node)
      node.className = PORTAL_CLASSNAME;
    return node;
  }, [containerEl]);
  const [, forceUpdate] = (0, import_react20.useState)({});
  useSafeLayoutEffect(() => forceUpdate({}), []);
  useSafeLayoutEffect(() => {
    if (!portal || !host)
      return;
    host.appendChild(portal);
    return () => {
      host.removeChild(portal);
    };
  }, [portal, host]);
  if (host && portal) {
    return (0, import_react_dom.createPortal)(
      (0, import_jsx_runtime16.jsx)(PortalContextProvider, { value: appendToParentPortal ? portal : null, children }),
      portal
    );
  }
  return null;
};
function Portal(props) {
  const portalProps = {
    appendToParentPortal: true,
    ...props
  };
  const { containerRef, ...rest } = portalProps;
  return containerRef ? (0, import_jsx_runtime16.jsx)(ContainerPortal, { containerRef, ...rest }) : (0, import_jsx_runtime16.jsx)(DefaultPortal, { ...rest });
}
Portal.className = PORTAL_CLASSNAME;
Portal.selector = PORTAL_SELECTOR;
Portal.displayName = "Portal";

// node_modules/@chakra-ui/toast/dist/chunk-3Y4YXCR2.mjs
var import_react21 = __toESM(require_react(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var [ToastOptionProvider, useToastOptionContext] = createContext3({
  name: `ToastOptionsContext`,
  strict: false
});
var ToastProvider = (props) => {
  const state4 = (0, import_react21.useSyncExternalStore)(
    toastStore.subscribe,
    toastStore.getState,
    toastStore.getState
  );
  const {
    motionVariants,
    component: Component = ToastComponent,
    portalProps
  } = props;
  const stateKeys = Object.keys(state4);
  const toastList = stateKeys.map((position4) => {
    const toasts = state4[position4];
    return (0, import_jsx_runtime17.jsx)(
      "div",
      {
        role: "region",
        "aria-live": "polite",
        "aria-label": `Notifications-${position4}`,
        id: `chakra-toast-manager-${position4}`,
        style: getToastListStyle(position4),
        children: (0, import_jsx_runtime17.jsx)(AnimatePresence, { initial: false, children: toasts.map((toast) => (0, import_jsx_runtime17.jsx)(
          Component,
          {
            motionVariants,
            ...toast
          },
          toast.id
        )) })
      },
      position4
    );
  });
  return (0, import_jsx_runtime17.jsx)(Portal, { ...portalProps, children: toastList });
};

// node_modules/@chakra-ui/toast/dist/chunk-6RSEZNRH.mjs
var import_react22 = __toESM(require_react(), 1);
function useToast(options) {
  const { theme: theme3 } = useChakra();
  const defaultOptions = useToastOptionContext();
  return (0, import_react22.useMemo)(
    () => createToastFn(theme3.direction, {
      ...defaultOptions,
      ...options
    }),
    [options, theme3.direction, defaultOptions]
  );
}

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-SIH73G3H.mjs
var transitionProperty2 = {
  common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
  colors: "background-color, border-color, color, fill, stroke",
  dimensions: "width, height",
  position: "left, right, top, bottom",
  background: "background-color, background-image, background-position"
};
var transitionTimingFunction2 = {
  "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
  "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
};
var transitionDuration2 = {
  "ultra-fast": "50ms",
  faster: "100ms",
  fast: "150ms",
  normal: "200ms",
  slow: "300ms",
  slower: "400ms",
  "ultra-slow": "500ms"
};
var transition4 = {
  property: transitionProperty2,
  easing: transitionTimingFunction2,
  duration: transitionDuration2
};
var transition_default2 = transition4;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-45VJLTIL.mjs
var zIndices2 = {
  hide: -1,
  auto: "auto",
  base: 0,
  docked: 10,
  dropdown: 1e3,
  sticky: 1100,
  banner: 1200,
  overlay: 1300,
  modal: 1400,
  popover: 1500,
  skipLink: 1600,
  toast: 1700,
  tooltip: 1800
};
var z_index_default2 = zIndices2;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-B75T2J64.mjs
var borders2 = {
  none: 0,
  "1px": "1px solid",
  "2px": "2px solid",
  "4px": "4px solid",
  "8px": "8px solid"
};
var borders_default2 = borders2;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-TXLFBUTF.mjs
var breakpoints4 = {
  base: "0em",
  sm: "30em",
  md: "48em",
  lg: "62em",
  xl: "80em",
  "2xl": "96em"
};
var breakpoints_default2 = breakpoints4;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-E47HH2QS.mjs
var colors2 = {
  transparent: "transparent",
  current: "currentColor",
  black: "#000000",
  white: "#FFFFFF",
  whiteAlpha: {
    50: "rgba(255, 255, 255, 0.04)",
    100: "rgba(255, 255, 255, 0.06)",
    200: "rgba(255, 255, 255, 0.08)",
    300: "rgba(255, 255, 255, 0.16)",
    400: "rgba(255, 255, 255, 0.24)",
    500: "rgba(255, 255, 255, 0.36)",
    600: "rgba(255, 255, 255, 0.48)",
    700: "rgba(255, 255, 255, 0.64)",
    800: "rgba(255, 255, 255, 0.80)",
    900: "rgba(255, 255, 255, 0.92)"
  },
  blackAlpha: {
    50: "rgba(0, 0, 0, 0.04)",
    100: "rgba(0, 0, 0, 0.06)",
    200: "rgba(0, 0, 0, 0.08)",
    300: "rgba(0, 0, 0, 0.16)",
    400: "rgba(0, 0, 0, 0.24)",
    500: "rgba(0, 0, 0, 0.36)",
    600: "rgba(0, 0, 0, 0.48)",
    700: "rgba(0, 0, 0, 0.64)",
    800: "rgba(0, 0, 0, 0.80)",
    900: "rgba(0, 0, 0, 0.92)"
  },
  gray: {
    50: "#F7FAFC",
    100: "#EDF2F7",
    200: "#E2E8F0",
    300: "#CBD5E0",
    400: "#A0AEC0",
    500: "#718096",
    600: "#4A5568",
    700: "#2D3748",
    800: "#1A202C",
    900: "#171923"
  },
  red: {
    50: "#FFF5F5",
    100: "#FED7D7",
    200: "#FEB2B2",
    300: "#FC8181",
    400: "#F56565",
    500: "#E53E3E",
    600: "#C53030",
    700: "#9B2C2C",
    800: "#822727",
    900: "#63171B"
  },
  orange: {
    50: "#FFFAF0",
    100: "#FEEBC8",
    200: "#FBD38D",
    300: "#F6AD55",
    400: "#ED8936",
    500: "#DD6B20",
    600: "#C05621",
    700: "#9C4221",
    800: "#7B341E",
    900: "#652B19"
  },
  yellow: {
    50: "#FFFFF0",
    100: "#FEFCBF",
    200: "#FAF089",
    300: "#F6E05E",
    400: "#ECC94B",
    500: "#D69E2E",
    600: "#B7791F",
    700: "#975A16",
    800: "#744210",
    900: "#5F370E"
  },
  green: {
    50: "#F0FFF4",
    100: "#C6F6D5",
    200: "#9AE6B4",
    300: "#68D391",
    400: "#48BB78",
    500: "#38A169",
    600: "#2F855A",
    700: "#276749",
    800: "#22543D",
    900: "#1C4532"
  },
  teal: {
    50: "#E6FFFA",
    100: "#B2F5EA",
    200: "#81E6D9",
    300: "#4FD1C5",
    400: "#38B2AC",
    500: "#319795",
    600: "#2C7A7B",
    700: "#285E61",
    800: "#234E52",
    900: "#1D4044"
  },
  blue: {
    50: "#ebf8ff",
    100: "#bee3f8",
    200: "#90cdf4",
    300: "#63b3ed",
    400: "#4299e1",
    500: "#3182ce",
    600: "#2b6cb0",
    700: "#2c5282",
    800: "#2a4365",
    900: "#1A365D"
  },
  cyan: {
    50: "#EDFDFD",
    100: "#C4F1F9",
    200: "#9DECF9",
    300: "#76E4F7",
    400: "#0BC5EA",
    500: "#00B5D8",
    600: "#00A3C4",
    700: "#0987A0",
    800: "#086F83",
    900: "#065666"
  },
  purple: {
    50: "#FAF5FF",
    100: "#E9D8FD",
    200: "#D6BCFA",
    300: "#B794F4",
    400: "#9F7AEA",
    500: "#805AD5",
    600: "#6B46C1",
    700: "#553C9A",
    800: "#44337A",
    900: "#322659"
  },
  pink: {
    50: "#FFF5F7",
    100: "#FED7E2",
    200: "#FBB6CE",
    300: "#F687B3",
    400: "#ED64A6",
    500: "#D53F8C",
    600: "#B83280",
    700: "#97266D",
    800: "#702459",
    900: "#521B41"
  },
  linkedin: {
    50: "#E8F4F9",
    100: "#CFEDFB",
    200: "#9BDAF3",
    300: "#68C7EC",
    400: "#34B3E4",
    500: "#00A0DC",
    600: "#008CC9",
    700: "#0077B5",
    800: "#005E93",
    900: "#004471"
  },
  facebook: {
    50: "#E8F4F9",
    100: "#D9DEE9",
    200: "#B7C2DA",
    300: "#6482C0",
    400: "#4267B2",
    500: "#385898",
    600: "#314E89",
    700: "#29487D",
    800: "#223B67",
    900: "#1E355B"
  },
  messenger: {
    50: "#D0E6FF",
    100: "#B9DAFF",
    200: "#A2CDFF",
    300: "#7AB8FF",
    400: "#2E90FF",
    500: "#0078FF",
    600: "#0063D1",
    700: "#0052AC",
    800: "#003C7E",
    900: "#002C5C"
  },
  whatsapp: {
    50: "#dffeec",
    100: "#b9f5d0",
    200: "#90edb3",
    300: "#65e495",
    400: "#3cdd78",
    500: "#22c35e",
    600: "#179848",
    700: "#0c6c33",
    800: "#01421c",
    900: "#001803"
  },
  twitter: {
    50: "#E5F4FD",
    100: "#C8E9FB",
    200: "#A8DCFA",
    300: "#83CDF7",
    400: "#57BBF5",
    500: "#1DA1F2",
    600: "#1A94DA",
    700: "#1681BF",
    800: "#136B9E",
    900: "#0D4D71"
  },
  telegram: {
    50: "#E3F2F9",
    100: "#C5E4F3",
    200: "#A2D4EC",
    300: "#7AC1E4",
    400: "#47A9DA",
    500: "#0088CC",
    600: "#007AB8",
    700: "#006BA1",
    800: "#005885",
    900: "#003F5E"
  }
};
var colors_default2 = colors2;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-VIVTPWHP.mjs
var radii2 = {
  none: "0",
  sm: "0.125rem",
  base: "0.25rem",
  md: "0.375rem",
  lg: "0.5rem",
  xl: "0.75rem",
  "2xl": "1rem",
  "3xl": "1.5rem",
  full: "9999px"
};
var radius_default2 = radii2;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-IZUFFCXS.mjs
var shadows2 = {
  xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
  sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
  base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
  md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
  lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
  xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
  "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
  outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
  inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
  none: "none",
  "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
};
var shadows_default2 = shadows2;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-HQ6WXDYV.mjs
var blur2 = {
  none: 0,
  sm: "4px",
  base: "8px",
  md: "12px",
  lg: "16px",
  xl: "24px",
  "2xl": "40px",
  "3xl": "64px"
};
var blur_default2 = blur2;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-6XA2KDUD.mjs
var typography4 = {
  letterSpacings: {
    tighter: "-0.05em",
    tight: "-0.025em",
    normal: "0",
    wide: "0.025em",
    wider: "0.05em",
    widest: "0.1em"
  },
  lineHeights: {
    normal: "normal",
    none: 1,
    shorter: 1.25,
    short: 1.375,
    base: 1.5,
    tall: 1.625,
    taller: "2",
    "3": ".75rem",
    "4": "1rem",
    "5": "1.25rem",
    "6": "1.5rem",
    "7": "1.75rem",
    "8": "2rem",
    "9": "2.25rem",
    "10": "2.5rem"
  },
  fontWeights: {
    hairline: 100,
    thin: 200,
    light: 300,
    normal: 400,
    medium: 500,
    semibold: 600,
    bold: 700,
    extrabold: 800,
    black: 900
  },
  fonts: {
    heading: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    body: `-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    mono: `SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace`
  },
  fontSizes: {
    "3xs": "0.45rem",
    "2xs": "0.625rem",
    xs: "0.75rem",
    sm: "0.875rem",
    md: "1rem",
    lg: "1.125rem",
    xl: "1.25rem",
    "2xl": "1.5rem",
    "3xl": "1.875rem",
    "4xl": "2.25rem",
    "5xl": "3rem",
    "6xl": "3.75rem",
    "7xl": "4.5rem",
    "8xl": "6rem",
    "9xl": "8rem"
  }
};
var typography_default2 = typography4;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-V7WMN6TQ.mjs
var spacing2 = {
  px: "1px",
  0.5: "0.125rem",
  1: "0.25rem",
  1.5: "0.375rem",
  2: "0.5rem",
  2.5: "0.625rem",
  3: "0.75rem",
  3.5: "0.875rem",
  4: "1rem",
  5: "1.25rem",
  6: "1.5rem",
  7: "1.75rem",
  8: "2rem",
  9: "2.25rem",
  10: "2.5rem",
  12: "3rem",
  14: "3.5rem",
  16: "4rem",
  20: "5rem",
  24: "6rem",
  28: "7rem",
  32: "8rem",
  36: "9rem",
  40: "10rem",
  44: "11rem",
  48: "12rem",
  52: "13rem",
  56: "14rem",
  60: "15rem",
  64: "16rem",
  72: "18rem",
  80: "20rem",
  96: "24rem"
};

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-NJCYBKFH.mjs
var largeSizes2 = {
  max: "max-content",
  min: "min-content",
  full: "100%",
  "3xs": "14rem",
  "2xs": "16rem",
  xs: "20rem",
  sm: "24rem",
  md: "28rem",
  lg: "32rem",
  xl: "36rem",
  "2xl": "42rem",
  "3xl": "48rem",
  "4xl": "56rem",
  "5xl": "64rem",
  "6xl": "72rem",
  "7xl": "80rem",
  "8xl": "90rem",
  prose: "60ch"
};
var container2 = {
  sm: "640px",
  md: "768px",
  lg: "1024px",
  xl: "1280px"
};
var sizes24 = {
  ...spacing2,
  ...largeSizes2,
  container: container2
};
var sizes_default2 = sizes24;

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-3WO5B3NB.mjs
var foundations2 = {
  breakpoints: breakpoints_default2,
  zIndices: z_index_default2,
  radii: radius_default2,
  blur: blur_default2,
  colors: colors_default2,
  ...typography_default2,
  sizes: sizes_default2,
  shadows: shadows_default2,
  space: spacing2,
  borders: borders_default2,
  transition: transition_default2
};

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/styled-system/dist/index.mjs
var import_lodash12 = __toESM(require_lodash(), 1);
var import_lodash13 = __toESM(require_lodash(), 1);
var import_lodash14 = __toESM(require_lodash(), 1);
var import_lodash15 = __toESM(require_lodash(), 1);
var isImportant3 = (value) => /!(important)?$/.test(value);
var withoutImportant3 = (value) => typeof value === "string" ? value.replace(/!(important)?$/, "").trim() : value;
var tokenToCSSVar3 = (scale, value) => (theme3) => {
  const valueStr = String(value);
  const important = isImportant3(valueStr);
  const valueWithoutImportant = withoutImportant3(valueStr);
  const key = scale ? `${scale}.${valueWithoutImportant}` : valueWithoutImportant;
  let transformed = isObject(theme3.__cssMap) && key in theme3.__cssMap ? theme3.__cssMap[key].varRef : value;
  transformed = withoutImportant3(transformed);
  return important ? `${transformed} !important` : transformed;
};
function createTransform3(options) {
  const { scale, transform: transform22, compose: compose3 } = options;
  const fn = (value, theme3) => {
    var _a10;
    const _value = tokenToCSSVar3(scale, value)(theme3);
    let result = (_a10 = transform22 == null ? void 0 : transform22(_value, theme3)) != null ? _a10 : _value;
    if (compose3) {
      result = compose3(result, theme3);
    }
    return result;
  };
  return fn;
}
var pipe6 = (...fns) => (v) => fns.reduce((a, b) => b(a), v);
function toConfig3(scale, transform22) {
  return (property) => {
    const result = { property, scale };
    result.transform = createTransform3({
      scale,
      transform: transform22
    });
    return result;
  };
}
var getRtl3 = ({ rtl, ltr }) => (theme3) => theme3.direction === "rtl" ? rtl : ltr;
function logical3(options) {
  const { property, scale, transform: transform22 } = options;
  return {
    scale,
    property: getRtl3(property),
    transform: scale ? createTransform3({
      scale,
      compose: transform22
    }) : transform22
  };
}
var transformTemplate3 = [
  "rotate(var(--chakra-rotate, 0))",
  "scaleX(var(--chakra-scale-x, 1))",
  "scaleY(var(--chakra-scale-y, 1))",
  "skewX(var(--chakra-skew-x, 0))",
  "skewY(var(--chakra-skew-y, 0))"
];
function getTransformTemplate3() {
  return [
    "translateX(var(--chakra-translate-x, 0))",
    "translateY(var(--chakra-translate-y, 0))",
    ...transformTemplate3
  ].join(" ");
}
function getTransformGpuTemplate3() {
  return [
    "translate3d(var(--chakra-translate-x, 0), var(--chakra-translate-y, 0), 0)",
    ...transformTemplate3
  ].join(" ");
}
var filterTemplate3 = {
  "--chakra-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-sepia": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-drop-shadow": "var(--chakra-empty,/*!*/ /*!*/)",
  filter: [
    "var(--chakra-blur)",
    "var(--chakra-brightness)",
    "var(--chakra-contrast)",
    "var(--chakra-grayscale)",
    "var(--chakra-hue-rotate)",
    "var(--chakra-invert)",
    "var(--chakra-saturate)",
    "var(--chakra-sepia)",
    "var(--chakra-drop-shadow)"
  ].join(" ")
};
var backdropFilterTemplate3 = {
  backdropFilter: [
    "var(--chakra-backdrop-blur)",
    "var(--chakra-backdrop-brightness)",
    "var(--chakra-backdrop-contrast)",
    "var(--chakra-backdrop-grayscale)",
    "var(--chakra-backdrop-hue-rotate)",
    "var(--chakra-backdrop-invert)",
    "var(--chakra-backdrop-opacity)",
    "var(--chakra-backdrop-saturate)",
    "var(--chakra-backdrop-sepia)"
  ].join(" "),
  "--chakra-backdrop-blur": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-brightness": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-contrast": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-grayscale": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-hue-rotate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-invert": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-opacity": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-saturate": "var(--chakra-empty,/*!*/ /*!*/)",
  "--chakra-backdrop-sepia": "var(--chakra-empty,/*!*/ /*!*/)"
};
function getRingTemplate3(value) {
  return {
    "--chakra-ring-offset-shadow": `var(--chakra-ring-inset) 0 0 0 var(--chakra-ring-offset-width) var(--chakra-ring-offset-color)`,
    "--chakra-ring-shadow": `var(--chakra-ring-inset) 0 0 0 calc(var(--chakra-ring-width) + var(--chakra-ring-offset-width)) var(--chakra-ring-color)`,
    "--chakra-ring-width": value,
    boxShadow: [
      `var(--chakra-ring-offset-shadow)`,
      `var(--chakra-ring-shadow)`,
      `var(--chakra-shadow, 0 0 #0000)`
    ].join(", ")
  };
}
var flexDirectionTemplate3 = {
  "row-reverse": {
    space: "--chakra-space-x-reverse",
    divide: "--chakra-divide-x-reverse"
  },
  "column-reverse": {
    space: "--chakra-space-y-reverse",
    divide: "--chakra-divide-y-reverse"
  }
};
var directionMap3 = {
  "to-t": "to top",
  "to-tr": "to top right",
  "to-r": "to right",
  "to-br": "to bottom right",
  "to-b": "to bottom",
  "to-bl": "to bottom left",
  "to-l": "to left",
  "to-tl": "to top left"
};
var valueSet3 = new Set(Object.values(directionMap3));
var globalSet3 = /* @__PURE__ */ new Set([
  "none",
  "-moz-initial",
  "inherit",
  "initial",
  "revert",
  "unset"
]);
var trimSpace3 = (str) => str.trim();
function parseGradient3(value, theme3) {
  if (value == null || globalSet3.has(value))
    return value;
  const prevent = isCSSFunction3(value) || globalSet3.has(value);
  if (!prevent)
    return `url('${value}')`;
  const regex = /(^[a-z-A-Z]+)\((.*)\)/g;
  const results = regex.exec(value);
  const type = results == null ? void 0 : results[1];
  const values = results == null ? void 0 : results[2];
  if (!type || !values)
    return value;
  const _type = type.includes("-gradient") ? type : `${type}-gradient`;
  const [maybeDirection, ...stops] = values.split(",").map(trimSpace3).filter(Boolean);
  if ((stops == null ? void 0 : stops.length) === 0)
    return value;
  const direction3 = maybeDirection in directionMap3 ? directionMap3[maybeDirection] : maybeDirection;
  stops.unshift(direction3);
  const _values = stops.map((stop) => {
    if (valueSet3.has(stop))
      return stop;
    const firstStop = stop.indexOf(" ");
    const [_color, _stop] = firstStop !== -1 ? [stop.substr(0, firstStop), stop.substr(firstStop + 1)] : [stop];
    const _stopOrFunc = isCSSFunction3(_stop) ? _stop : _stop && _stop.split(" ");
    const key = `colors.${_color}`;
    const color22 = key in theme3.__cssMap ? theme3.__cssMap[key].varRef : _color;
    return _stopOrFunc ? [
      color22,
      ...Array.isArray(_stopOrFunc) ? _stopOrFunc : [_stopOrFunc]
    ].join(" ") : color22;
  });
  return `${_type}(${_values.join(", ")})`;
}
var isCSSFunction3 = (value) => {
  return typeof value === "string" && value.includes("(") && value.includes(")");
};
var gradientTransform3 = (value, theme3) => parseGradient3(value, theme3 != null ? theme3 : {});
function isCssVar6(value) {
  return /^var\(--.+\)$/.test(value);
}
var analyzeCSSValue4 = (value) => {
  const num = parseFloat(value.toString());
  const unit = value.toString().replace(String(num), "");
  return { unitless: !unit, value: num, unit };
};
var wrap3 = (str) => (value) => `${str}(${value})`;
var transformFunctions3 = {
  filter(value) {
    return value !== "auto" ? value : filterTemplate3;
  },
  backdropFilter(value) {
    return value !== "auto" ? value : backdropFilterTemplate3;
  },
  ring(value) {
    return getRingTemplate3(transformFunctions3.px(value));
  },
  bgClip(value) {
    return value === "text" ? { color: "transparent", backgroundClip: "text" } : { backgroundClip: value };
  },
  transform(value) {
    if (value === "auto")
      return getTransformTemplate3();
    if (value === "auto-gpu")
      return getTransformGpuTemplate3();
    return value;
  },
  vh(value) {
    return value === "$100vh" ? "var(--chakra-vh)" : value;
  },
  px(value) {
    if (value == null)
      return value;
    const { unitless } = analyzeCSSValue4(value);
    return unitless || typeof value === "number" ? `${value}px` : value;
  },
  fraction(value) {
    return !(typeof value === "number") || value > 1 ? value : `${value * 100}%`;
  },
  float(value, theme3) {
    const map = { left: "right", right: "left" };
    return theme3.direction === "rtl" ? map[value] : value;
  },
  degree(value) {
    if (isCssVar6(value) || value == null)
      return value;
    const unitless = typeof value === "string" && !value.endsWith("deg");
    return typeof value === "number" || unitless ? `${value}deg` : value;
  },
  gradient: gradientTransform3,
  blur: wrap3("blur"),
  opacity: wrap3("opacity"),
  brightness: wrap3("brightness"),
  contrast: wrap3("contrast"),
  dropShadow: wrap3("drop-shadow"),
  grayscale: wrap3("grayscale"),
  hueRotate: (value) => wrap3("hue-rotate")(transformFunctions3.degree(value)),
  invert: wrap3("invert"),
  saturate: wrap3("saturate"),
  sepia: wrap3("sepia"),
  bgImage(value) {
    if (value == null)
      return value;
    const prevent = isCSSFunction3(value) || globalSet3.has(value);
    return !prevent ? `url(${value})` : value;
  },
  outline(value) {
    const isNoneOrZero = String(value) === "0" || String(value) === "none";
    return value !== null && isNoneOrZero ? { outline: "2px solid transparent", outlineOffset: "2px" } : { outline: value };
  },
  flexDirection(value) {
    var _a10;
    const { space: space22, divide: divide22 } = (_a10 = flexDirectionTemplate3[value]) != null ? _a10 : {};
    const result = { flexDirection: value };
    if (space22)
      result[space22] = 1;
    if (divide22)
      result[divide22] = 1;
    return result;
  }
};
var t3 = {
  borderWidths: toConfig3("borderWidths"),
  borderStyles: toConfig3("borderStyles"),
  colors: toConfig3("colors"),
  borders: toConfig3("borders"),
  gradients: toConfig3("gradients", transformFunctions3.gradient),
  radii: toConfig3("radii", transformFunctions3.px),
  space: toConfig3("space", pipe6(transformFunctions3.vh, transformFunctions3.px)),
  spaceT: toConfig3("space", pipe6(transformFunctions3.vh, transformFunctions3.px)),
  degreeT(property) {
    return { property, transform: transformFunctions3.degree };
  },
  prop(property, scale, transform22) {
    return {
      property,
      scale,
      ...scale && {
        transform: createTransform3({ scale, transform: transform22 })
      }
    };
  },
  propT(property, transform22) {
    return { property, transform: transform22 };
  },
  sizes: toConfig3("sizes", pipe6(transformFunctions3.vh, transformFunctions3.px)),
  sizesT: toConfig3("sizes", pipe6(transformFunctions3.vh, transformFunctions3.fraction)),
  shadows: toConfig3("shadows"),
  logical: logical3,
  blur: toConfig3("blur", transformFunctions3.blur)
};
var background3 = {
  background: t3.colors("background"),
  backgroundColor: t3.colors("backgroundColor"),
  backgroundImage: t3.gradients("backgroundImage"),
  backgroundSize: true,
  backgroundPosition: true,
  backgroundRepeat: true,
  backgroundAttachment: true,
  backgroundClip: { transform: transformFunctions3.bgClip },
  bgSize: t3.prop("backgroundSize"),
  bgPosition: t3.prop("backgroundPosition"),
  bg: t3.colors("background"),
  bgColor: t3.colors("backgroundColor"),
  bgPos: t3.prop("backgroundPosition"),
  bgRepeat: t3.prop("backgroundRepeat"),
  bgAttachment: t3.prop("backgroundAttachment"),
  bgGradient: t3.gradients("backgroundImage"),
  bgClip: { transform: transformFunctions3.bgClip }
};
Object.assign(background3, {
  bgImage: background3.backgroundImage,
  bgImg: background3.backgroundImage
});
var border3 = {
  border: t3.borders("border"),
  borderWidth: t3.borderWidths("borderWidth"),
  borderStyle: t3.borderStyles("borderStyle"),
  borderColor: t3.colors("borderColor"),
  borderRadius: t3.radii("borderRadius"),
  borderTop: t3.borders("borderTop"),
  borderBlockStart: t3.borders("borderBlockStart"),
  borderTopLeftRadius: t3.radii("borderTopLeftRadius"),
  borderStartStartRadius: t3.logical({
    scale: "radii",
    property: {
      ltr: "borderTopLeftRadius",
      rtl: "borderTopRightRadius"
    }
  }),
  borderEndStartRadius: t3.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomLeftRadius",
      rtl: "borderBottomRightRadius"
    }
  }),
  borderTopRightRadius: t3.radii("borderTopRightRadius"),
  borderStartEndRadius: t3.logical({
    scale: "radii",
    property: {
      ltr: "borderTopRightRadius",
      rtl: "borderTopLeftRadius"
    }
  }),
  borderEndEndRadius: t3.logical({
    scale: "radii",
    property: {
      ltr: "borderBottomRightRadius",
      rtl: "borderBottomLeftRadius"
    }
  }),
  borderRight: t3.borders("borderRight"),
  borderInlineEnd: t3.borders("borderInlineEnd"),
  borderBottom: t3.borders("borderBottom"),
  borderBlockEnd: t3.borders("borderBlockEnd"),
  borderBottomLeftRadius: t3.radii("borderBottomLeftRadius"),
  borderBottomRightRadius: t3.radii("borderBottomRightRadius"),
  borderLeft: t3.borders("borderLeft"),
  borderInlineStart: {
    property: "borderInlineStart",
    scale: "borders"
  },
  borderInlineStartRadius: t3.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      rtl: ["borderTopRightRadius", "borderBottomRightRadius"]
    }
  }),
  borderInlineEndRadius: t3.logical({
    scale: "radii",
    property: {
      ltr: ["borderTopRightRadius", "borderBottomRightRadius"],
      rtl: ["borderTopLeftRadius", "borderBottomLeftRadius"]
    }
  }),
  borderX: t3.borders(["borderLeft", "borderRight"]),
  borderInline: t3.borders("borderInline"),
  borderY: t3.borders(["borderTop", "borderBottom"]),
  borderBlock: t3.borders("borderBlock"),
  borderTopWidth: t3.borderWidths("borderTopWidth"),
  borderBlockStartWidth: t3.borderWidths("borderBlockStartWidth"),
  borderTopColor: t3.colors("borderTopColor"),
  borderBlockStartColor: t3.colors("borderBlockStartColor"),
  borderTopStyle: t3.borderStyles("borderTopStyle"),
  borderBlockStartStyle: t3.borderStyles("borderBlockStartStyle"),
  borderBottomWidth: t3.borderWidths("borderBottomWidth"),
  borderBlockEndWidth: t3.borderWidths("borderBlockEndWidth"),
  borderBottomColor: t3.colors("borderBottomColor"),
  borderBlockEndColor: t3.colors("borderBlockEndColor"),
  borderBottomStyle: t3.borderStyles("borderBottomStyle"),
  borderBlockEndStyle: t3.borderStyles("borderBlockEndStyle"),
  borderLeftWidth: t3.borderWidths("borderLeftWidth"),
  borderInlineStartWidth: t3.borderWidths("borderInlineStartWidth"),
  borderLeftColor: t3.colors("borderLeftColor"),
  borderInlineStartColor: t3.colors("borderInlineStartColor"),
  borderLeftStyle: t3.borderStyles("borderLeftStyle"),
  borderInlineStartStyle: t3.borderStyles("borderInlineStartStyle"),
  borderRightWidth: t3.borderWidths("borderRightWidth"),
  borderInlineEndWidth: t3.borderWidths("borderInlineEndWidth"),
  borderRightColor: t3.colors("borderRightColor"),
  borderInlineEndColor: t3.colors("borderInlineEndColor"),
  borderRightStyle: t3.borderStyles("borderRightStyle"),
  borderInlineEndStyle: t3.borderStyles("borderInlineEndStyle"),
  borderTopRadius: t3.radii(["borderTopLeftRadius", "borderTopRightRadius"]),
  borderBottomRadius: t3.radii([
    "borderBottomLeftRadius",
    "borderBottomRightRadius"
  ]),
  borderLeftRadius: t3.radii(["borderTopLeftRadius", "borderBottomLeftRadius"]),
  borderRightRadius: t3.radii([
    "borderTopRightRadius",
    "borderBottomRightRadius"
  ])
};
Object.assign(border3, {
  rounded: border3.borderRadius,
  roundedTop: border3.borderTopRadius,
  roundedTopLeft: border3.borderTopLeftRadius,
  roundedTopRight: border3.borderTopRightRadius,
  roundedTopStart: border3.borderStartStartRadius,
  roundedTopEnd: border3.borderStartEndRadius,
  roundedBottom: border3.borderBottomRadius,
  roundedBottomLeft: border3.borderBottomLeftRadius,
  roundedBottomRight: border3.borderBottomRightRadius,
  roundedBottomStart: border3.borderEndStartRadius,
  roundedBottomEnd: border3.borderEndEndRadius,
  roundedLeft: border3.borderLeftRadius,
  roundedRight: border3.borderRightRadius,
  roundedStart: border3.borderInlineStartRadius,
  roundedEnd: border3.borderInlineEndRadius,
  borderStart: border3.borderInlineStart,
  borderEnd: border3.borderInlineEnd,
  borderTopStartRadius: border3.borderStartStartRadius,
  borderTopEndRadius: border3.borderStartEndRadius,
  borderBottomStartRadius: border3.borderEndStartRadius,
  borderBottomEndRadius: border3.borderEndEndRadius,
  borderStartRadius: border3.borderInlineStartRadius,
  borderEndRadius: border3.borderInlineEndRadius,
  borderStartWidth: border3.borderInlineStartWidth,
  borderEndWidth: border3.borderInlineEndWidth,
  borderStartColor: border3.borderInlineStartColor,
  borderEndColor: border3.borderInlineEndColor,
  borderStartStyle: border3.borderInlineStartStyle,
  borderEndStyle: border3.borderInlineEndStyle
});
var color3 = {
  color: t3.colors("color"),
  textColor: t3.colors("color"),
  fill: t3.colors("fill"),
  stroke: t3.colors("stroke")
};
var effect3 = {
  boxShadow: t3.shadows("boxShadow"),
  mixBlendMode: true,
  blendMode: t3.prop("mixBlendMode"),
  backgroundBlendMode: true,
  bgBlendMode: t3.prop("backgroundBlendMode"),
  opacity: true
};
Object.assign(effect3, {
  shadow: effect3.boxShadow
});
var filter3 = {
  filter: { transform: transformFunctions3.filter },
  blur: t3.blur("--chakra-blur"),
  brightness: t3.propT("--chakra-brightness", transformFunctions3.brightness),
  contrast: t3.propT("--chakra-contrast", transformFunctions3.contrast),
  hueRotate: t3.propT("--chakra-hue-rotate", transformFunctions3.hueRotate),
  invert: t3.propT("--chakra-invert", transformFunctions3.invert),
  saturate: t3.propT("--chakra-saturate", transformFunctions3.saturate),
  dropShadow: t3.propT("--chakra-drop-shadow", transformFunctions3.dropShadow),
  backdropFilter: { transform: transformFunctions3.backdropFilter },
  backdropBlur: t3.blur("--chakra-backdrop-blur"),
  backdropBrightness: t3.propT(
    "--chakra-backdrop-brightness",
    transformFunctions3.brightness
  ),
  backdropContrast: t3.propT("--chakra-backdrop-contrast", transformFunctions3.contrast),
  backdropHueRotate: t3.propT(
    "--chakra-backdrop-hue-rotate",
    transformFunctions3.hueRotate
  ),
  backdropInvert: t3.propT("--chakra-backdrop-invert", transformFunctions3.invert),
  backdropSaturate: t3.propT("--chakra-backdrop-saturate", transformFunctions3.saturate)
};
var flexbox3 = {
  alignItems: true,
  alignContent: true,
  justifyItems: true,
  justifyContent: true,
  flexWrap: true,
  flexDirection: { transform: transformFunctions3.flexDirection },
  flex: true,
  flexFlow: true,
  flexGrow: true,
  flexShrink: true,
  flexBasis: t3.sizes("flexBasis"),
  justifySelf: true,
  alignSelf: true,
  order: true,
  placeItems: true,
  placeContent: true,
  placeSelf: true,
  gap: t3.space("gap"),
  rowGap: t3.space("rowGap"),
  columnGap: t3.space("columnGap")
};
Object.assign(flexbox3, {
  flexDir: flexbox3.flexDirection
});
var grid3 = {
  gridGap: t3.space("gridGap"),
  gridColumnGap: t3.space("gridColumnGap"),
  gridRowGap: t3.space("gridRowGap"),
  gridColumn: true,
  gridRow: true,
  gridAutoFlow: true,
  gridAutoColumns: true,
  gridColumnStart: true,
  gridColumnEnd: true,
  gridRowStart: true,
  gridRowEnd: true,
  gridAutoRows: true,
  gridTemplate: true,
  gridTemplateColumns: true,
  gridTemplateRows: true,
  gridTemplateAreas: true,
  gridArea: true
};
var interactivity3 = {
  appearance: true,
  cursor: true,
  resize: true,
  userSelect: true,
  pointerEvents: true,
  outline: { transform: transformFunctions3.outline },
  outlineOffset: true,
  outlineColor: t3.colors("outlineColor")
};
var layout3 = {
  width: t3.sizesT("width"),
  inlineSize: t3.sizesT("inlineSize"),
  height: t3.sizes("height"),
  blockSize: t3.sizes("blockSize"),
  boxSize: t3.sizes(["width", "height"]),
  minWidth: t3.sizes("minWidth"),
  minInlineSize: t3.sizes("minInlineSize"),
  minHeight: t3.sizes("minHeight"),
  minBlockSize: t3.sizes("minBlockSize"),
  maxWidth: t3.sizes("maxWidth"),
  maxInlineSize: t3.sizes("maxInlineSize"),
  maxHeight: t3.sizes("maxHeight"),
  maxBlockSize: t3.sizes("maxBlockSize"),
  overflow: true,
  overflowX: true,
  overflowY: true,
  overscrollBehavior: true,
  overscrollBehaviorX: true,
  overscrollBehaviorY: true,
  display: true,
  aspectRatio: true,
  hideFrom: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a10, _b8, _c5;
      const breakpoint = (_c5 = (_b8 = (_a10 = theme3.__breakpoints) == null ? void 0 : _a10.get(value)) == null ? void 0 : _b8.minW) != null ? _c5 : value;
      const mq = `@media screen and (min-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  hideBelow: {
    scale: "breakpoints",
    transform: (value, theme3) => {
      var _a10, _b8, _c5;
      const breakpoint = (_c5 = (_b8 = (_a10 = theme3.__breakpoints) == null ? void 0 : _a10.get(value)) == null ? void 0 : _b8._minW) != null ? _c5 : value;
      const mq = `@media screen and (max-width: ${breakpoint})`;
      return { [mq]: { display: "none" } };
    }
  },
  verticalAlign: true,
  boxSizing: true,
  boxDecorationBreak: true,
  float: t3.propT("float", transformFunctions3.float),
  objectFit: true,
  objectPosition: true,
  visibility: true,
  isolation: true
};
Object.assign(layout3, {
  w: layout3.width,
  h: layout3.height,
  minW: layout3.minWidth,
  maxW: layout3.maxWidth,
  minH: layout3.minHeight,
  maxH: layout3.maxHeight,
  overscroll: layout3.overscrollBehavior,
  overscrollX: layout3.overscrollBehaviorX,
  overscrollY: layout3.overscrollBehaviorY
});
var list3 = {
  listStyleType: true,
  listStylePosition: true,
  listStylePos: t3.prop("listStylePosition"),
  listStyleImage: true,
  listStyleImg: t3.prop("listStyleImage")
};
function get5(obj, path, fallback, index) {
  const key = typeof path === "string" ? path.split(".") : [path];
  for (index = 0; index < key.length; index += 1) {
    if (!obj)
      break;
    obj = obj[key[index]];
  }
  return obj === void 0 ? fallback : obj;
}
var memoize5 = (fn) => {
  const cache = /* @__PURE__ */ new WeakMap();
  const memoizedFn = (obj, path, fallback, index) => {
    if (typeof obj === "undefined") {
      return fn(obj, path, fallback);
    }
    if (!cache.has(obj)) {
      cache.set(obj, /* @__PURE__ */ new Map());
    }
    const map = cache.get(obj);
    if (map.has(path)) {
      return map.get(path);
    }
    const value = fn(obj, path, fallback, index);
    map.set(path, value);
    return value;
  };
  return memoizedFn;
};
var memoizedGet5 = memoize5(get5);
var srOnly3 = {
  border: "0px",
  clip: "rect(0, 0, 0, 0)",
  width: "1px",
  height: "1px",
  margin: "-1px",
  padding: "0px",
  overflow: "hidden",
  whiteSpace: "nowrap",
  position: "absolute"
};
var srFocusable3 = {
  position: "static",
  width: "auto",
  height: "auto",
  clip: "auto",
  padding: "0",
  margin: "0",
  overflow: "visible",
  whiteSpace: "normal"
};
var getWithPriority3 = (theme3, key, styles3) => {
  const result = {};
  const obj = memoizedGet5(theme3, key, {});
  for (const prop in obj) {
    const isInStyles = prop in styles3 && styles3[prop] != null;
    if (!isInStyles)
      result[prop] = obj[prop];
  }
  return result;
};
var others3 = {
  srOnly: {
    transform(value) {
      if (value === true)
        return srOnly3;
      if (value === "focusable")
        return srFocusable3;
      return {};
    }
  },
  layerStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority3(theme3, `layerStyles.${value}`, styles3)
  },
  textStyle: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority3(theme3, `textStyles.${value}`, styles3)
  },
  apply: {
    processResult: true,
    transform: (value, theme3, styles3) => getWithPriority3(theme3, value, styles3)
  }
};
var position3 = {
  position: true,
  pos: t3.prop("position"),
  zIndex: t3.prop("zIndex", "zIndices"),
  inset: t3.spaceT("inset"),
  insetX: t3.spaceT(["left", "right"]),
  insetInline: t3.spaceT("insetInline"),
  insetY: t3.spaceT(["top", "bottom"]),
  insetBlock: t3.spaceT("insetBlock"),
  top: t3.spaceT("top"),
  insetBlockStart: t3.spaceT("insetBlockStart"),
  bottom: t3.spaceT("bottom"),
  insetBlockEnd: t3.spaceT("insetBlockEnd"),
  left: t3.spaceT("left"),
  insetInlineStart: t3.logical({
    scale: "space",
    property: { ltr: "left", rtl: "right" }
  }),
  right: t3.spaceT("right"),
  insetInlineEnd: t3.logical({
    scale: "space",
    property: { ltr: "right", rtl: "left" }
  })
};
Object.assign(position3, {
  insetStart: position3.insetInlineStart,
  insetEnd: position3.insetInlineEnd
});
var ring3 = {
  ring: { transform: transformFunctions3.ring },
  ringColor: t3.colors("--chakra-ring-color"),
  ringOffset: t3.prop("--chakra-ring-offset-width"),
  ringOffsetColor: t3.colors("--chakra-ring-offset-color"),
  ringInset: t3.prop("--chakra-ring-inset")
};
var space3 = {
  margin: t3.spaceT("margin"),
  marginTop: t3.spaceT("marginTop"),
  marginBlockStart: t3.spaceT("marginBlockStart"),
  marginRight: t3.spaceT("marginRight"),
  marginInlineEnd: t3.spaceT("marginInlineEnd"),
  marginBottom: t3.spaceT("marginBottom"),
  marginBlockEnd: t3.spaceT("marginBlockEnd"),
  marginLeft: t3.spaceT("marginLeft"),
  marginInlineStart: t3.spaceT("marginInlineStart"),
  marginX: t3.spaceT(["marginInlineStart", "marginInlineEnd"]),
  marginInline: t3.spaceT("marginInline"),
  marginY: t3.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t3.spaceT("marginBlock"),
  padding: t3.space("padding"),
  paddingTop: t3.space("paddingTop"),
  paddingBlockStart: t3.space("paddingBlockStart"),
  paddingRight: t3.space("paddingRight"),
  paddingBottom: t3.space("paddingBottom"),
  paddingBlockEnd: t3.space("paddingBlockEnd"),
  paddingLeft: t3.space("paddingLeft"),
  paddingInlineStart: t3.space("paddingInlineStart"),
  paddingInlineEnd: t3.space("paddingInlineEnd"),
  paddingX: t3.space(["paddingInlineStart", "paddingInlineEnd"]),
  paddingInline: t3.space("paddingInline"),
  paddingY: t3.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t3.space("paddingBlock")
};
Object.assign(space3, {
  m: space3.margin,
  mt: space3.marginTop,
  mr: space3.marginRight,
  me: space3.marginInlineEnd,
  marginEnd: space3.marginInlineEnd,
  mb: space3.marginBottom,
  ml: space3.marginLeft,
  ms: space3.marginInlineStart,
  marginStart: space3.marginInlineStart,
  mx: space3.marginX,
  my: space3.marginY,
  p: space3.padding,
  pt: space3.paddingTop,
  py: space3.paddingY,
  px: space3.paddingX,
  pb: space3.paddingBottom,
  pl: space3.paddingLeft,
  ps: space3.paddingInlineStart,
  paddingStart: space3.paddingInlineStart,
  pr: space3.paddingRight,
  pe: space3.paddingInlineEnd,
  paddingEnd: space3.paddingInlineEnd
});
var textDecoration3 = {
  textDecorationColor: t3.colors("textDecorationColor"),
  textDecoration: true,
  textDecor: { property: "textDecoration" },
  textDecorationLine: true,
  textDecorationStyle: true,
  textDecorationThickness: true,
  textUnderlineOffset: true,
  textShadow: t3.shadows("textShadow")
};
var transform3 = {
  clipPath: true,
  transform: t3.propT("transform", transformFunctions3.transform),
  transformOrigin: true,
  translateX: t3.spaceT("--chakra-translate-x"),
  translateY: t3.spaceT("--chakra-translate-y"),
  skewX: t3.degreeT("--chakra-skew-x"),
  skewY: t3.degreeT("--chakra-skew-y"),
  scaleX: t3.prop("--chakra-scale-x"),
  scaleY: t3.prop("--chakra-scale-y"),
  scale: t3.prop(["--chakra-scale-x", "--chakra-scale-y"]),
  rotate: t3.degreeT("--chakra-rotate")
};
var transition5 = {
  transition: true,
  transitionDelay: true,
  animation: true,
  willChange: true,
  transitionDuration: t3.prop("transitionDuration", "transition.duration"),
  transitionProperty: t3.prop("transitionProperty", "transition.property"),
  transitionTimingFunction: t3.prop(
    "transitionTimingFunction",
    "transition.easing"
  )
};
var typography5 = {
  fontFamily: t3.prop("fontFamily", "fonts"),
  fontSize: t3.prop("fontSize", "fontSizes", transformFunctions3.px),
  fontWeight: t3.prop("fontWeight", "fontWeights"),
  lineHeight: t3.prop("lineHeight", "lineHeights"),
  letterSpacing: t3.prop("letterSpacing", "letterSpacings"),
  textAlign: true,
  fontStyle: true,
  textIndent: true,
  wordBreak: true,
  overflowWrap: true,
  textOverflow: true,
  textTransform: true,
  whiteSpace: true,
  isTruncated: {
    transform(value) {
      if (value === true) {
        return {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        };
      }
    }
  },
  noOfLines: {
    static: {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitBoxOrient: "vertical",
      //@ts-ignore
      WebkitLineClamp: "var(--chakra-line-clamp)"
    },
    property: "--chakra-line-clamp"
  }
};
var scroll3 = {
  scrollBehavior: true,
  scrollSnapAlign: true,
  scrollSnapStop: true,
  scrollSnapType: true,
  // scroll margin
  scrollMargin: t3.spaceT("scrollMargin"),
  scrollMarginTop: t3.spaceT("scrollMarginTop"),
  scrollMarginBottom: t3.spaceT("scrollMarginBottom"),
  scrollMarginLeft: t3.spaceT("scrollMarginLeft"),
  scrollMarginRight: t3.spaceT("scrollMarginRight"),
  scrollMarginX: t3.spaceT(["scrollMarginLeft", "scrollMarginRight"]),
  scrollMarginY: t3.spaceT(["scrollMarginTop", "scrollMarginBottom"]),
  // scroll padding
  scrollPadding: t3.spaceT("scrollPadding"),
  scrollPaddingTop: t3.spaceT("scrollPaddingTop"),
  scrollPaddingBottom: t3.spaceT("scrollPaddingBottom"),
  scrollPaddingLeft: t3.spaceT("scrollPaddingLeft"),
  scrollPaddingRight: t3.spaceT("scrollPaddingRight"),
  scrollPaddingX: t3.spaceT(["scrollPaddingLeft", "scrollPaddingRight"]),
  scrollPaddingY: t3.spaceT(["scrollPaddingTop", "scrollPaddingBottom"])
};
function resolveReference3(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpression3 = (operator, ...operands) => operands.map(resolveReference3).join(` ${operator} `).replace(/calc/g, "");
var add4 = (...operands) => `calc(${toExpression3("+", ...operands)})`;
var subtract5 = (...operands) => `calc(${toExpression3("-", ...operands)})`;
var multiply4 = (...operands) => `calc(${toExpression3("*", ...operands)})`;
var divide4 = (...operands) => `calc(${toExpression3("/", ...operands)})`;
var negate4 = (x) => {
  const value = resolveReference3(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply4(value, -1);
};
var calc4 = Object.assign(
  (x) => ({
    add: (...operands) => calc4(add4(x, ...operands)),
    subtract: (...operands) => calc4(subtract5(x, ...operands)),
    multiply: (...operands) => calc4(multiply4(x, ...operands)),
    divide: (...operands) => calc4(divide4(x, ...operands)),
    negate: () => calc4(negate4(x)),
    toString: () => x.toString()
  }),
  {
    add: add4,
    subtract: subtract5,
    multiply: multiply4,
    divide: divide4,
    negate: negate4
  }
);
function replaceWhiteSpace4(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape4(value) {
  const valueStr = replaceWhiteSpace4(value.toString());
  return escapeSymbol3(escapeDot3(valueStr));
}
function escapeDot3(value) {
  if (value.includes("\\."))
    return value;
  const isDecimal3 = !Number.isInteger(parseFloat(value.toString()));
  return isDecimal3 ? value.replace(".", `\\.`) : value;
}
function escapeSymbol3(value) {
  return value.replace(/[!-,/:-@[-^`{-~]/g, "\\$&");
}
function addPrefix4(value, prefix = "") {
  return [prefix, value].filter(Boolean).join("-");
}
function toVarReference3(name, fallback) {
  return `var(${name}${fallback ? `, ${fallback}` : ""})`;
}
function toVarDefinition3(value, prefix = "") {
  return escape4(`--${addPrefix4(value, prefix)}`);
}
function cssVar4(name, fallback, cssVarPrefix) {
  const cssVariable = toVarDefinition3(name, cssVarPrefix);
  return {
    variable: cssVariable,
    reference: toVarReference3(cssVariable, fallback)
  };
}
function defineCssVars2(scope, keys2) {
  const vars3 = {};
  for (const key of keys2) {
    if (Array.isArray(key)) {
      const [name, fallback] = key;
      vars3[name] = cssVar4(`${scope}-${name}`, fallback);
      continue;
    }
    vars3[key] = cssVar4(`${scope}-${key}`);
  }
  return vars3;
}
var state3 = {
  hover: (str, post) => `${str}:hover ${post}, ${str}[data-hover] ${post}`,
  focus: (str, post) => `${str}:focus ${post}, ${str}[data-focus] ${post}`,
  focusVisible: (str, post) => `${str}:focus-visible ${post}`,
  focusWithin: (str, post) => `${str}:focus-within ${post}`,
  active: (str, post) => `${str}:active ${post}, ${str}[data-active] ${post}`,
  disabled: (str, post) => `${str}:disabled ${post}, ${str}[data-disabled] ${post}`,
  invalid: (str, post) => `${str}:invalid ${post}, ${str}[data-invalid] ${post}`,
  checked: (str, post) => `${str}:checked ${post}, ${str}[data-checked] ${post}`,
  indeterminate: (str, post) => `${str}:indeterminate ${post}, ${str}[aria-checked=mixed] ${post}, ${str}[data-indeterminate] ${post}`,
  readOnly: (str, post) => `${str}:read-only ${post}, ${str}[readonly] ${post}, ${str}[data-read-only] ${post}`,
  expanded: (str, post) => `${str}:read-only ${post}, ${str}[aria-expanded=true] ${post}, ${str}[data-expanded] ${post}`,
  placeholderShown: (str, post) => `${str}:placeholder-shown ${post}`
};
var toGroup3 = (fn) => merge3((v) => fn(v, "&"), "[role=group]", "[data-group]", ".group");
var toPeer3 = (fn) => merge3((v) => fn(v, "~ &"), "[data-peer]", ".peer");
var merge3 = (fn, ...selectors) => selectors.map(fn).join(", ");
var pseudoSelectors3 = {
  /**
   * Styles for CSS selector `&:hover`
   */
  _hover: "&:hover, &[data-hover]",
  /**
   * Styles for CSS Selector `&:active`
   */
  _active: "&:active, &[data-active]",
  /**
   * Styles for CSS selector `&:focus`
   *
   */
  _focus: "&:focus, &[data-focus]",
  /**
   * Styles for the highlighted state.
   */
  _highlighted: "&[data-highlighted]",
  /**
   * Styles to apply when a child of this element has received focus
   * - CSS Selector `&:focus-within`
   */
  _focusWithin: "&:focus-within",
  /**
   * Styles to apply when this element has received focus via tabbing
   * - CSS Selector `&:focus-visible`
   */
  _focusVisible: "&:focus-visible, &[data-focus-visible]",
  /**
   * Styles to apply when this element is disabled. The passed styles are applied to these CSS selectors:
   * - `&[aria-disabled=true]`
   * - `&:disabled`
   * - `&[data-disabled]`
   * - `&[disabled]`
   */
  _disabled: "&:disabled, &[disabled], &[aria-disabled=true], &[data-disabled]",
  /**
   * Styles for CSS Selector `&:readonly`
   */
  _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
  /**
   * Styles for CSS selector `&::before`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _before={{content:`""` }}/>
   * ```
   */
  _before: "&::before",
  /**
   * Styles for CSS selector `&::after`
   *
   * NOTE:When using this, ensure the `content` is wrapped in a backtick.
   * @example
   * ```jsx
   * <Box _after={{content:`""` }}/>
   * ```
   */
  _after: "&::after",
  /**
   * Styles for CSS selector `&:empty`
   */
  _empty: "&:empty",
  /**
   * Styles to apply when the ARIA attribute `aria-expanded` is `true`
   * - CSS selector `&[aria-expanded=true]`
   */
  _expanded: "&[aria-expanded=true], &[data-expanded]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `true`
   * - CSS selector `&[aria-checked=true]`
   */
  _checked: "&[aria-checked=true], &[data-checked]",
  /**
   * Styles to apply when the ARIA attribute `aria-grabbed` is `true`
   * - CSS selector `&[aria-grabbed=true]`
   */
  _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
  /**
   * Styles for CSS Selector `&[aria-pressed=true]`
   * Typically used to style the current "pressed" state of toggle buttons
   */
  _pressed: "&[aria-pressed=true], &[data-pressed]",
  /**
   * Styles to apply when the ARIA attribute `aria-invalid` is `true`
   * - CSS selector `&[aria-invalid=true]`
   */
  _invalid: "&[aria-invalid=true], &[data-invalid]",
  /**
   * Styles for the valid state
   * - CSS selector `&[data-valid], &[data-state=valid]`
   */
  _valid: "&[data-valid], &[data-state=valid]",
  /**
   * Styles for CSS Selector `&[aria-busy=true]` or `&[data-loading=true]`.
   * Useful for styling loading states
   */
  _loading: "&[data-loading], &[aria-busy=true]",
  /**
   * Styles to apply when the ARIA attribute `aria-selected` is `true`
   *
   * - CSS selector `&[aria-selected=true]`
   */
  _selected: "&[aria-selected=true], &[data-selected]",
  /**
   * Styles for CSS Selector `[hidden=true]`
   */
  _hidden: "&[hidden], &[data-hidden]",
  /**
   * Styles for CSS Selector `&:-webkit-autofill`
   */
  _autofill: "&:-webkit-autofill",
  /**
   * Styles for CSS Selector `&:nth-child(even)`
   */
  _even: "&:nth-of-type(even)",
  /**
   * Styles for CSS Selector `&:nth-child(odd)`
   */
  _odd: "&:nth-of-type(odd)",
  /**
   * Styles for CSS Selector `&:first-of-type`
   */
  _first: "&:first-of-type",
  /**
   * Styles for CSS selector `&::first-letter`
   *
   * NOTE: This selector is only applied for block-level elements and not preceded by an image or table.
   * @example
   * ```jsx
   * <Text _firstLetter={{ textDecoration: 'underline' }}>Once upon a time</Text>
   * ```
   */
  _firstLetter: "&::first-letter",
  /**
   * Styles for CSS Selector `&:last-of-type`
   */
  _last: "&:last-of-type",
  /**
   * Styles for CSS Selector `&:not(:first-of-type)`
   */
  _notFirst: "&:not(:first-of-type)",
  /**
   * Styles for CSS Selector `&:not(:last-of-type)`
   */
  _notLast: "&:not(:last-of-type)",
  /**
   * Styles for CSS Selector `&:visited`
   */
  _visited: "&:visited",
  /**
   * Used to style the active link in a navigation
   * Styles for CSS Selector `&[aria-current=page]`
   */
  _activeLink: "&[aria-current=page]",
  /**
   * Used to style the current step within a process
   * Styles for CSS Selector `&[aria-current=step]`
   */
  _activeStep: "&[aria-current=step]",
  /**
   * Styles to apply when the ARIA attribute `aria-checked` is `mixed`
   * - CSS selector `&[aria-checked=mixed]`
   */
  _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is hovered
   */
  _groupHover: toGroup3(state3.hover),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is hovered
   */
  _peerHover: toPeer3(state3.hover),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is focused
   */
  _groupFocus: toGroup3(state3.focus),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is focused
   */
  _peerFocus: toPeer3(state3.focus),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` has visible focus
   */
  _groupFocusVisible: toGroup3(state3.focusVisible),
  /**
   * Styles to apply when a sibling element with `.peer`or `data-peer` has visible focus
   */
  _peerFocusVisible: toPeer3(state3.focusVisible),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is active
   */
  _groupActive: toGroup3(state3.active),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is active
   */
  _peerActive: toPeer3(state3.active),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is disabled
   */
  _groupDisabled: toGroup3(state3.disabled),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is disabled
   */
  _peerDisabled: toPeer3(state3.disabled),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` is invalid
   */
  _groupInvalid: toGroup3(state3.invalid),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` is invalid
   */
  _peerInvalid: toPeer3(state3.invalid),
  /**
   * Styles to apply when a parent element with `.group`, `data-group` or `role=group` is checked
   */
  _groupChecked: toGroup3(state3.checked),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` is checked
   */
  _peerChecked: toPeer3(state3.checked),
  /**
   *  Styles to apply when a parent element with `.group`, `data-group` or `role=group` has focus within
   */
  _groupFocusWithin: toGroup3(state3.focusWithin),
  /**
   *  Styles to apply when a sibling element with `.peer` or `data-peer` has focus within
   */
  _peerFocusWithin: toPeer3(state3.focusWithin),
  /**
   * Styles to apply when a sibling element with `.peer` or `data-peer` has placeholder shown
   */
  _peerPlaceholderShown: toPeer3(state3.placeholderShown),
  /**
   * Styles for CSS Selector `&::placeholder`.
   */
  _placeholder: "&::placeholder",
  /**
   * Styles for CSS Selector `&:placeholder-shown`.
   */
  _placeholderShown: "&:placeholder-shown",
  /**
   * Styles for CSS Selector `&:fullscreen`.
   */
  _fullScreen: "&:fullscreen",
  /**
   * Styles for CSS Selector `&::selection`
   */
  _selection: "&::selection",
  /**
   * Styles for CSS Selector `[dir=rtl] &`
   * It is applied when a parent element or this element has `dir="rtl"`
   */
  _rtl: "[dir=rtl] &, &[dir=rtl]",
  /**
   * Styles for CSS Selector `[dir=ltr] &`
   * It is applied when a parent element or this element has `dir="ltr"`
   */
  _ltr: "[dir=ltr] &, &[dir=ltr]",
  /**
   * Styles for CSS Selector `@media (prefers-color-scheme: dark)`
   * It is used when the user has requested the system use a light or dark color theme.
   */
  _mediaDark: "@media (prefers-color-scheme: dark)",
  /**
   * Styles for CSS Selector `@media (prefers-reduced-motion: reduce)`
   * It is used when the user has requested the system to reduce the amount of animations.
   */
  _mediaReduceMotion: "@media (prefers-reduced-motion: reduce)",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _dark: ".chakra-ui-dark &:not([data-theme]),[data-theme=dark] &:not([data-theme]),&[data-theme=dark]",
  /**
   * Styles for when `data-theme` is applied to any parent of
   * this component or element.
   */
  _light: ".chakra-ui-light &:not([data-theme]),[data-theme=light] &:not([data-theme]),&[data-theme=light]",
  /**
   * Styles for the CSS Selector `&[data-orientation=horizontal]`
   */
  _horizontal: "&[data-orientation=horizontal]",
  /**
   * Styles for the CSS Selector `&[data-orientation=vertical]`
   */
  _vertical: "&[data-orientation=vertical]"
};
var pseudoPropNames3 = Object.keys(
  pseudoSelectors3
);
var systemProps3 = (0, import_lodash14.default)(
  {},
  background3,
  border3,
  color3,
  flexbox3,
  layout3,
  filter3,
  ring3,
  interactivity3,
  grid3,
  others3,
  position3,
  effect3,
  space3,
  scroll3,
  typography5,
  textDecoration3,
  transform3,
  list3,
  transition5
);
var layoutSystem3 = Object.assign({}, space3, layout3, flexbox3, grid3, position3);
var layoutPropNames3 = Object.keys(
  layoutSystem3
);
var propNames3 = [...Object.keys(systemProps3), ...pseudoPropNames3];
var styleProps3 = { ...systemProps3, ...pseudoSelectors3 };
function defineStyle2(styles3) {
  return styles3;
}
function defineStyleConfig2(config3) {
  return config3;
}
function createMultiStyleConfigHelpers2(parts) {
  return {
    definePartsStyle(config3) {
      return config3;
    },
    defineMultiStyleConfig(config3) {
      return { parts, ...config3 };
    }
  };
}

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-Q5NOVGYN.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig27, definePartsStyle: definePartsStyle27 } = createMultiStyleConfigHelpers2([
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
]);
var $size6 = cssVar4("stepper-indicator-size");
var $iconSize2 = cssVar4("stepper-icon-size");
var $titleFontSize2 = cssVar4("stepper-title-font-size");
var $descFontSize2 = cssVar4("stepper-description-font-size");
var $accentColor2 = cssVar4("stepper-accent-color");
var baseStyle43 = definePartsStyle27(({ colorScheme: c }) => ({
  stepper: {
    display: "flex",
    justifyContent: "space-between",
    gap: "4",
    "&[data-orientation=vertical]": {
      flexDirection: "column",
      alignItems: "flex-start"
    },
    "&[data-orientation=horizontal]": {
      flexDirection: "row",
      alignItems: "center"
    },
    [$accentColor2.variable]: `colors.${c}.500`,
    _dark: {
      [$accentColor2.variable]: `colors.${c}.200`
    }
  },
  title: {
    fontSize: $titleFontSize2.reference,
    fontWeight: "medium"
  },
  description: {
    fontSize: $descFontSize2.reference,
    color: "chakra-subtle-text"
  },
  number: {
    fontSize: $titleFontSize2.reference
  },
  step: {
    flexShrink: 0,
    position: "relative",
    display: "flex",
    gap: "2",
    "&[data-orientation=horizontal]": {
      alignItems: "center"
    },
    flex: "1",
    "&:last-of-type:not([data-stretch])": {
      flex: "initial"
    }
  },
  icon: {
    flexShrink: 0,
    width: $iconSize2.reference,
    height: $iconSize2.reference
  },
  indicator: {
    flexShrink: 0,
    borderRadius: "full",
    width: $size6.reference,
    height: $size6.reference,
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    "&[data-status=active]": {
      borderWidth: "2px",
      borderColor: $accentColor2.reference
    },
    "&[data-status=complete]": {
      bg: $accentColor2.reference,
      color: "chakra-inverse-text"
    },
    "&[data-status=incomplete]": {
      borderWidth: "2px"
    }
  },
  separator: {
    bg: "chakra-border-color",
    flex: "1",
    "&[data-status=complete]": {
      bg: $accentColor2.reference
    },
    "&[data-orientation=horizontal]": {
      width: "100%",
      height: "2px",
      marginStart: "2"
    },
    "&[data-orientation=vertical]": {
      width: "2px",
      position: "absolute",
      height: "100%",
      maxHeight: `calc(100% - ${$size6.reference} - 8px)`,
      top: `calc(${$size6.reference} + 4px)`,
      insetStart: `calc(${$size6.reference} / 2 - 1px)`
    }
  }
}));
var stepperTheme2 = defineMultiStyleConfig27({
  baseStyle: baseStyle43,
  sizes: {
    xs: definePartsStyle27({
      stepper: {
        [$size6.variable]: "sizes.4",
        [$iconSize2.variable]: "sizes.3",
        [$titleFontSize2.variable]: "fontSizes.xs",
        [$descFontSize2.variable]: "fontSizes.xs"
      }
    }),
    sm: definePartsStyle27({
      stepper: {
        [$size6.variable]: "sizes.6",
        [$iconSize2.variable]: "sizes.4",
        [$titleFontSize2.variable]: "fontSizes.sm",
        [$descFontSize2.variable]: "fontSizes.xs"
      }
    }),
    md: definePartsStyle27({
      stepper: {
        [$size6.variable]: "sizes.8",
        [$iconSize2.variable]: "sizes.5",
        [$titleFontSize2.variable]: "fontSizes.md",
        [$descFontSize2.variable]: "fontSizes.sm"
      }
    }),
    lg: definePartsStyle27({
      stepper: {
        [$size6.variable]: "sizes.10",
        [$iconSize2.variable]: "sizes.6",
        [$titleFontSize2.variable]: "fontSizes.lg",
        [$descFontSize2.variable]: "fontSizes.md"
      }
    })
  },
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/anatomy/dist/chunk-OA3DH5LS.mjs
function anatomy2(name, map = {}) {
  let called = false;
  function assert() {
    if (!called) {
      called = true;
      return;
    }
    throw new Error(
      "[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?"
    );
  }
  function parts(...values) {
    assert();
    for (const part of values) {
      ;
      map[part] = toPart(part);
    }
    return anatomy2(name, map);
  }
  function extend(...parts2) {
    for (const part of parts2) {
      if (part in map)
        continue;
      map[part] = toPart(part);
    }
    return anatomy2(name, map);
  }
  function selectors() {
    const value = Object.fromEntries(
      Object.entries(map).map(([key, part]) => [key, part.selector])
    );
    return value;
  }
  function classnames() {
    const value = Object.fromEntries(
      Object.entries(map).map(([key, part]) => [key, part.className])
    );
    return value;
  }
  function toPart(part) {
    const el = ["container", "root"].includes(part != null ? part : "") ? [name] : [name, part];
    const attr = el.filter(Boolean).join("__");
    const className = `chakra-${attr}`;
    const partObj = {
      className,
      selector: `.${className}`,
      toString: () => part
    };
    return partObj;
  }
  const __type = {};
  return {
    parts,
    toPart,
    extend,
    selectors,
    classnames,
    get keys() {
      return Object.keys(map);
    },
    __type
  };
}

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/anatomy/dist/chunk-7OOI6RFH.mjs
var accordionAnatomy2 = anatomy2("accordion").parts("root", "container", "button", "panel").extend("icon");
var alertAnatomy2 = anatomy2("alert").parts("title", "description", "container").extend("icon", "spinner");
var avatarAnatomy2 = anatomy2("avatar").parts("label", "badge", "container").extend("excessLabel", "group");
var breadcrumbAnatomy2 = anatomy2("breadcrumb").parts("link", "item", "container").extend("separator");
var buttonAnatomy2 = anatomy2("button").parts();
var checkboxAnatomy2 = anatomy2("checkbox").parts("control", "icon", "container").extend("label");
var circularProgressAnatomy2 = anatomy2("progress").parts("track", "filledTrack").extend("label");
var drawerAnatomy2 = anatomy2("drawer").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var editableAnatomy2 = anatomy2("editable").parts(
  "preview",
  "input",
  "textarea"
);
var formAnatomy2 = anatomy2("form").parts(
  "container",
  "requiredIndicator",
  "helperText"
);
var formErrorAnatomy2 = anatomy2("formError").parts("text", "icon");
var inputAnatomy2 = anatomy2("input").parts(
  "addon",
  "field",
  "element",
  "group"
);
var listAnatomy2 = anatomy2("list").parts("container", "item", "icon");
var menuAnatomy2 = anatomy2("menu").parts("button", "list", "item").extend("groupTitle", "icon", "command", "divider");
var modalAnatomy2 = anatomy2("modal").parts("overlay", "dialogContainer", "dialog").extend("header", "closeButton", "body", "footer");
var numberInputAnatomy2 = anatomy2("numberinput").parts(
  "root",
  "field",
  "stepperGroup",
  "stepper"
);
var pinInputAnatomy2 = anatomy2("pininput").parts("field");
var popoverAnatomy2 = anatomy2("popover").parts("content", "header", "body", "footer").extend("popper", "arrow", "closeButton");
var progressAnatomy2 = anatomy2("progress").parts(
  "label",
  "filledTrack",
  "track"
);
var radioAnatomy2 = anatomy2("radio").parts(
  "container",
  "control",
  "label"
);
var selectAnatomy2 = anatomy2("select").parts("field", "icon");
var sliderAnatomy2 = anatomy2("slider").parts(
  "container",
  "track",
  "thumb",
  "filledTrack",
  "mark"
);
var statAnatomy2 = anatomy2("stat").parts(
  "container",
  "label",
  "helpText",
  "number",
  "icon"
);
var switchAnatomy2 = anatomy2("switch").parts(
  "container",
  "track",
  "thumb",
  "label"
);
var tableAnatomy2 = anatomy2("table").parts(
  "table",
  "thead",
  "tbody",
  "tr",
  "th",
  "td",
  "tfoot",
  "caption"
);
var tabsAnatomy2 = anatomy2("tabs").parts(
  "root",
  "tab",
  "tablist",
  "tabpanel",
  "tabpanels",
  "indicator"
);
var tagAnatomy2 = anatomy2("tag").parts(
  "container",
  "label",
  "closeButton"
);
var cardAnatomy2 = anatomy2("card").parts(
  "container",
  "header",
  "body",
  "footer"
);
var stepperAnatomy2 = anatomy2("stepper").parts(
  "stepper",
  "step",
  "title",
  "description",
  "indicator",
  "separator",
  "icon",
  "number"
);

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme-tools/dist/chunk-6IC2I3BY.mjs
function dlv_es_default2(t4, e, l, n, r) {
  for (e = e.split ? e.split(".") : e, n = 0; n < e.length; n++)
    t4 = t4 ? t4[e[n]] : r;
  return t4 === r ? l : t4;
}
var isEmptyObject4 = (obj) => Object.keys(obj).length === 0;
var getColor2 = (theme3, color4, fallback) => {
  const hex = dlv_es_default2(theme3, `colors.${color4}`, color4);
  try {
    toHex(hex);
    return hex;
  } catch {
    return fallback != null ? fallback : "#000000";
  }
};
var getBrightness2 = (color4) => {
  const [r, g, b] = parseToRgba(color4);
  return (r * 299 + g * 587 + b * 114) / 1e3;
};
var tone2 = (color4) => (theme3) => {
  const hex = getColor2(theme3, color4);
  const brightness = getBrightness2(hex);
  const isDark22 = brightness < 128;
  return isDark22 ? "dark" : "light";
};
var isDark2 = (color4) => (theme3) => tone2(color4)(theme3) === "dark";
var transparentize3 = (color4, opacity) => (theme3) => {
  const raw = getColor2(theme3, color4);
  return transparentize(raw, 1 - opacity);
};
function generateStripe2(size3 = "1rem", color4 = "rgba(255, 255, 255, 0.15)") {
  return {
    backgroundImage: `linear-gradient(
    45deg,
    ${color4} 25%,
    transparent 25%,
    transparent 50%,
    ${color4} 50%,
    ${color4} 75%,
    transparent 75%,
    transparent
  )`,
    backgroundSize: `${size3} ${size3}`
  };
}
var randomHex2 = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, "0")}`;
function randomColor2(opts) {
  const fallback = randomHex2();
  if (!opts || isEmptyObject4(opts)) {
    return fallback;
  }
  if (opts.string && opts.colors) {
    return randomColorFromList2(opts.string, opts.colors);
  }
  if (opts.string && !opts.colors) {
    return randomColorFromString2(opts.string);
  }
  if (opts.colors && !opts.string) {
    return randomFromList2(opts.colors);
  }
  return fallback;
}
function randomColorFromString2(str) {
  let hash = 0;
  if (str.length === 0)
    return hash.toString();
  for (let i = 0; i < str.length; i += 1) {
    hash = str.charCodeAt(i) + ((hash << 5) - hash);
    hash = hash & hash;
  }
  let color4 = "#";
  for (let j = 0; j < 3; j += 1) {
    const value = hash >> j * 8 & 255;
    color4 += `00${value.toString(16)}`.substr(-2);
  }
  return color4;
}
function randomColorFromList2(str, list4) {
  let index = 0;
  if (str.length === 0)
    return list4[0];
  for (let i = 0; i < str.length; i += 1) {
    index = str.charCodeAt(i) + ((index << 5) - index);
    index = index & index;
  }
  index = (index % list4.length + list4.length) % list4.length;
  return list4[index];
}
function randomFromList2(list4) {
  return list4[Math.floor(Math.random() * list4.length)];
}

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme-tools/dist/chunk-FNB7ZWWX.mjs
function mode2(light, dark) {
  return (props) => props.colorMode === "dark" ? dark : light;
}
function orient2(options) {
  const { orientation, vertical, horizontal } = options;
  if (!orientation)
    return {};
  return orientation === "vertical" ? vertical : horizontal;
}

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme-tools/dist/chunk-XMZHFSTS.mjs
function toRef2(operand) {
  if (isObject(operand) && operand.reference) {
    return operand.reference;
  }
  return String(operand);
}
var toExpr2 = (operator, ...operands) => operands.map(toRef2).join(` ${operator} `).replace(/calc/g, "");
var add5 = (...operands) => `calc(${toExpr2("+", ...operands)})`;
var subtract6 = (...operands) => `calc(${toExpr2("-", ...operands)})`;
var multiply5 = (...operands) => `calc(${toExpr2("*", ...operands)})`;
var divide5 = (...operands) => `calc(${toExpr2("/", ...operands)})`;
var negate5 = (x) => {
  const value = toRef2(x);
  if (value != null && !Number.isNaN(parseFloat(value))) {
    return String(value).startsWith("-") ? String(value).slice(1) : `-${value}`;
  }
  return multiply5(value, -1);
};
var calc5 = Object.assign(
  (x) => ({
    add: (...operands) => calc5(add5(x, ...operands)),
    subtract: (...operands) => calc5(subtract6(x, ...operands)),
    multiply: (...operands) => calc5(multiply5(x, ...operands)),
    divide: (...operands) => calc5(divide5(x, ...operands)),
    negate: () => calc5(negate5(x)),
    toString: () => x.toString()
  }),
  {
    add: add5,
    subtract: subtract6,
    multiply: multiply5,
    divide: divide5,
    negate: negate5
  }
);

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme-tools/dist/chunk-WSAJBJJ4.mjs
function isDecimal2(value) {
  return !Number.isInteger(parseFloat(value.toString()));
}
function replaceWhiteSpace5(value, replaceValue = "-") {
  return value.replace(/\s+/g, replaceValue);
}
function escape5(value) {
  const valueStr = replaceWhiteSpace5(value.toString());
  if (valueStr.includes("\\."))
    return value;
  return isDecimal2(value) ? valueStr.replace(".", `\\.`) : value;
}
function addPrefix5(value, prefix = "") {
  return [prefix, escape5(value)].filter(Boolean).join("-");
}
function toVarRef2(name, fallback) {
  return `var(${escape5(name)}${fallback ? `, ${fallback}` : ""})`;
}
function toVar2(value, prefix = "") {
  return `--${addPrefix5(value, prefix)}`;
}
function cssVar5(name, options) {
  const cssVariable = toVar2(name, options == null ? void 0 : options.prefix);
  return {
    variable: cssVariable,
    reference: toVarRef2(cssVariable, getFallback2(options == null ? void 0 : options.fallback))
  };
}
function getFallback2(fallback) {
  if (typeof fallback === "string")
    return fallback;
  return fallback == null ? void 0 : fallback.reference;
}

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-SG67NFYS.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig28, definePartsStyle: definePartsStyle28 } = createMultiStyleConfigHelpers2(switchAnatomy2.keys);
var $width2 = cssVar5("switch-track-width");
var $height3 = cssVar5("switch-track-height");
var $diff2 = cssVar5("switch-track-diff");
var diffValue2 = calc5.subtract($width2, $height3);
var $translateX2 = cssVar5("switch-thumb-x");
var $bg17 = cssVar5("switch-bg");
var baseStyleTrack4 = defineStyle2((props) => {
  const { colorScheme: c } = props;
  return {
    borderRadius: "full",
    p: "0.5",
    width: [$width2.reference],
    height: [$height3.reference],
    transitionProperty: "common",
    transitionDuration: "fast",
    [$bg17.variable]: "colors.gray.300",
    _dark: {
      [$bg17.variable]: "colors.whiteAlpha.400"
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    _checked: {
      [$bg17.variable]: `colors.${c}.500`,
      _dark: {
        [$bg17.variable]: `colors.${c}.200`
      }
    },
    bg: $bg17.reference
  };
});
var baseStyleThumb3 = defineStyle2({
  bg: "white",
  transitionProperty: "transform",
  transitionDuration: "normal",
  borderRadius: "inherit",
  width: [$height3.reference],
  height: [$height3.reference],
  _checked: {
    transform: `translateX(${$translateX2.reference})`
  }
});
var baseStyle44 = definePartsStyle28((props) => ({
  container: {
    [$diff2.variable]: diffValue2,
    [$translateX2.variable]: $diff2.reference,
    _rtl: {
      [$translateX2.variable]: calc5($diff2).negate().toString()
    }
  },
  track: baseStyleTrack4(props),
  thumb: baseStyleThumb3
}));
var sizes25 = {
  sm: definePartsStyle28({
    container: {
      [$width2.variable]: "1.375rem",
      [$height3.variable]: "sizes.3"
    }
  }),
  md: definePartsStyle28({
    container: {
      [$width2.variable]: "1.875rem",
      [$height3.variable]: "sizes.4"
    }
  }),
  lg: definePartsStyle28({
    container: {
      [$width2.variable]: "2.875rem",
      [$height3.variable]: "sizes.6"
    }
  })
};
var switchTheme2 = defineMultiStyleConfig28({
  baseStyle: baseStyle44,
  sizes: sizes25,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-QWN3S45W.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig29, definePartsStyle: definePartsStyle29 } = createMultiStyleConfigHelpers2(tableAnatomy2.keys);
var baseStyle45 = definePartsStyle29({
  table: {
    fontVariantNumeric: "lining-nums tabular-nums",
    borderCollapse: "collapse",
    width: "full"
  },
  th: {
    fontFamily: "heading",
    fontWeight: "bold",
    textTransform: "uppercase",
    letterSpacing: "wider",
    textAlign: "start"
  },
  td: {
    textAlign: "start"
  },
  caption: {
    mt: 4,
    fontFamily: "heading",
    textAlign: "center",
    fontWeight: "medium"
  }
});
var numericStyles2 = defineStyle2({
  "&[data-is-numeric=true]": {
    textAlign: "end"
  }
});
var variantSimple2 = definePartsStyle29((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode2("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode2(`${c}.100`, `${c}.700`)(props),
      ...numericStyles2
    },
    td: {
      borderBottom: "1px",
      borderColor: mode2(`${c}.100`, `${c}.700`)(props),
      ...numericStyles2
    },
    caption: {
      color: mode2("gray.600", "gray.100")(props)
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variantStripe2 = definePartsStyle29((props) => {
  const { colorScheme: c } = props;
  return {
    th: {
      color: mode2("gray.600", "gray.400")(props),
      borderBottom: "1px",
      borderColor: mode2(`${c}.100`, `${c}.700`)(props),
      ...numericStyles2
    },
    td: {
      borderBottom: "1px",
      borderColor: mode2(`${c}.100`, `${c}.700`)(props),
      ...numericStyles2
    },
    caption: {
      color: mode2("gray.600", "gray.100")(props)
    },
    tbody: {
      tr: {
        "&:nth-of-type(odd)": {
          "th, td": {
            borderBottomWidth: "1px",
            borderColor: mode2(`${c}.100`, `${c}.700`)(props)
          },
          td: {
            background: mode2(`${c}.100`, `${c}.700`)(props)
          }
        }
      }
    },
    tfoot: {
      tr: {
        "&:last-of-type": {
          th: { borderBottomWidth: 0 }
        }
      }
    }
  };
});
var variants13 = {
  simple: variantSimple2,
  striped: variantStripe2,
  unstyled: defineStyle2({})
};
var sizes26 = {
  sm: definePartsStyle29({
    th: {
      px: "4",
      py: "1",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "4",
      py: "2",
      fontSize: "sm",
      lineHeight: "4"
    },
    caption: {
      px: "4",
      py: "2",
      fontSize: "xs"
    }
  }),
  md: definePartsStyle29({
    th: {
      px: "6",
      py: "3",
      lineHeight: "4",
      fontSize: "xs"
    },
    td: {
      px: "6",
      py: "4",
      lineHeight: "5"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "sm"
    }
  }),
  lg: definePartsStyle29({
    th: {
      px: "8",
      py: "4",
      lineHeight: "5",
      fontSize: "sm"
    },
    td: {
      px: "8",
      py: "5",
      lineHeight: "6"
    },
    caption: {
      px: "6",
      py: "2",
      fontSize: "md"
    }
  })
};
var tableTheme2 = defineMultiStyleConfig29({
  baseStyle: baseStyle45,
  variants: variants13,
  sizes: sizes26,
  defaultProps: {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-GYISOX2E.mjs
var $fg7 = cssVar4("tabs-color");
var $bg18 = cssVar4("tabs-bg");
var $border5 = cssVar4("tabs-border-color");
var { defineMultiStyleConfig: defineMultiStyleConfig30, definePartsStyle: definePartsStyle30 } = createMultiStyleConfigHelpers2(tabsAnatomy2.keys);
var baseStyleRoot3 = defineStyle2((props) => {
  const { orientation } = props;
  return {
    display: orientation === "vertical" ? "flex" : "block"
  };
});
var baseStyleTab2 = defineStyle2((props) => {
  const { isFitted } = props;
  return {
    flex: isFitted ? 1 : void 0,
    transitionProperty: "common",
    transitionDuration: "normal",
    _focusVisible: {
      zIndex: 1,
      boxShadow: "outline"
    },
    _disabled: {
      cursor: "not-allowed",
      opacity: 0.4
    }
  };
});
var baseStyleTablist2 = defineStyle2((props) => {
  const { align = "start", orientation } = props;
  const alignments = {
    end: "flex-end",
    center: "center",
    start: "flex-start"
  };
  return {
    justifyContent: alignments[align],
    flexDirection: orientation === "vertical" ? "column" : "row"
  };
});
var baseStyleTabpanel2 = defineStyle2({
  p: 4
});
var baseStyle46 = definePartsStyle30((props) => ({
  root: baseStyleRoot3(props),
  tab: baseStyleTab2(props),
  tablist: baseStyleTablist2(props),
  tabpanel: baseStyleTabpanel2
}));
var sizes27 = {
  sm: definePartsStyle30({
    tab: {
      py: 1,
      px: 4,
      fontSize: "sm"
    }
  }),
  md: definePartsStyle30({
    tab: {
      fontSize: "md",
      py: 2,
      px: 4
    }
  }),
  lg: definePartsStyle30({
    tab: {
      fontSize: "lg",
      py: 3,
      px: 4
    }
  })
};
var variantLine2 = definePartsStyle30((props) => {
  const { colorScheme: c, orientation } = props;
  const isVertical = orientation === "vertical";
  const borderProp = isVertical ? "borderStart" : "borderBottom";
  const marginProp = isVertical ? "marginStart" : "marginBottom";
  return {
    tablist: {
      [borderProp]: "2px solid",
      borderColor: "inherit"
    },
    tab: {
      [borderProp]: "2px solid",
      borderColor: "transparent",
      [marginProp]: "-2px",
      _selected: {
        [$fg7.variable]: `colors.${c}.600`,
        _dark: {
          [$fg7.variable]: `colors.${c}.300`
        },
        borderColor: "currentColor"
      },
      _active: {
        [$bg18.variable]: "colors.gray.200",
        _dark: {
          [$bg18.variable]: "colors.whiteAlpha.300"
        }
      },
      _disabled: {
        _active: { bg: "none" }
      },
      color: $fg7.reference,
      bg: $bg18.reference
    }
  };
});
var variantEnclosed2 = definePartsStyle30((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderTopRadius: "md",
      border: "1px solid",
      borderColor: "transparent",
      mb: "-1px",
      [$border5.variable]: "transparent",
      _selected: {
        [$fg7.variable]: `colors.${c}.600`,
        [$border5.variable]: `colors.white`,
        _dark: {
          [$fg7.variable]: `colors.${c}.300`,
          [$border5.variable]: `colors.gray.800`
        },
        borderColor: "inherit",
        borderBottomColor: $border5.reference
      },
      color: $fg7.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantEnclosedColored2 = definePartsStyle30((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      border: "1px solid",
      borderColor: "inherit",
      [$bg18.variable]: "colors.gray.50",
      _dark: {
        [$bg18.variable]: "colors.whiteAlpha.50"
      },
      mb: "-1px",
      _notLast: {
        marginEnd: "-1px"
      },
      _selected: {
        [$bg18.variable]: "colors.white",
        [$fg7.variable]: `colors.${c}.600`,
        _dark: {
          [$bg18.variable]: "colors.gray.800",
          [$fg7.variable]: `colors.${c}.300`
        },
        borderColor: "inherit",
        borderTopColor: "currentColor",
        borderBottomColor: "transparent"
      },
      color: $fg7.reference,
      bg: $bg18.reference
    },
    tablist: {
      mb: "-1px",
      borderBottom: "1px solid",
      borderColor: "inherit"
    }
  };
});
var variantSoftRounded2 = definePartsStyle30((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      color: "gray.600",
      _selected: {
        color: getColor2(theme3, `${c}.700`),
        bg: getColor2(theme3, `${c}.100`)
      }
    }
  };
});
var variantSolidRounded2 = definePartsStyle30((props) => {
  const { colorScheme: c } = props;
  return {
    tab: {
      borderRadius: "full",
      fontWeight: "semibold",
      [$fg7.variable]: "colors.gray.600",
      _dark: {
        [$fg7.variable]: "inherit"
      },
      _selected: {
        [$fg7.variable]: "colors.white",
        [$bg18.variable]: `colors.${c}.600`,
        _dark: {
          [$fg7.variable]: "colors.gray.800",
          [$bg18.variable]: `colors.${c}.300`
        }
      },
      color: $fg7.reference,
      bg: $bg18.reference
    }
  };
});
var variantUnstyled4 = definePartsStyle30({});
var variants14 = {
  line: variantLine2,
  enclosed: variantEnclosed2,
  "enclosed-colored": variantEnclosedColored2,
  "soft-rounded": variantSoftRounded2,
  "solid-rounded": variantSolidRounded2,
  unstyled: variantUnstyled4
};
var tabsTheme2 = defineMultiStyleConfig30({
  baseStyle: baseStyle46,
  sizes: sizes27,
  variants: variants14,
  defaultProps: {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-ZQMLTFF3.mjs
var vars2 = defineCssVars2("badge", ["bg", "color", "shadow"]);
var baseStyle47 = defineStyle2({
  px: 1,
  textTransform: "uppercase",
  fontSize: "xs",
  borderRadius: "sm",
  fontWeight: "bold",
  bg: vars2.bg.reference,
  color: vars2.color.reference,
  boxShadow: vars2.shadow.reference
});
var variantSolid5 = defineStyle2((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const dark = transparentize3(`${c}.500`, 0.6)(theme3);
  return {
    [vars2.bg.variable]: `colors.${c}.500`,
    [vars2.color.variable]: `colors.white`,
    _dark: {
      [vars2.bg.variable]: dark,
      [vars2.color.variable]: `colors.whiteAlpha.800`
    }
  };
});
var variantSubtle3 = defineStyle2((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkBg = transparentize3(`${c}.200`, 0.16)(theme3);
  return {
    [vars2.bg.variable]: `colors.${c}.100`,
    [vars2.color.variable]: `colors.${c}.800`,
    _dark: {
      [vars2.bg.variable]: darkBg,
      [vars2.color.variable]: `colors.${c}.200`
    }
  };
});
var variantOutline4 = defineStyle2((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  const darkColor = transparentize3(`${c}.200`, 0.8)(theme3);
  return {
    [vars2.color.variable]: `colors.${c}.500`,
    _dark: {
      [vars2.color.variable]: darkColor
    },
    [vars2.shadow.variable]: `inset 0 0 0px 1px ${vars2.color.reference}`
  };
});
var variants15 = {
  solid: variantSolid5,
  subtle: variantSubtle3,
  outline: variantOutline4
};
var badgeTheme2 = defineStyleConfig2({
  baseStyle: baseStyle47,
  variants: variants15,
  defaultProps: {
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-7RVLYCMR.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig31, definePartsStyle: definePartsStyle31 } = createMultiStyleConfigHelpers2(tagAnatomy2.keys);
var $bg19 = cssVar4("tag-bg");
var $color2 = cssVar4("tag-color");
var $shadow5 = cssVar4("tag-shadow");
var $minH2 = cssVar4("tag-min-height");
var $minW2 = cssVar4("tag-min-width");
var $fontSize3 = cssVar4("tag-font-size");
var $paddingX2 = cssVar4("tag-padding-inline");
var baseStyleContainer6 = defineStyle2({
  fontWeight: "medium",
  lineHeight: 1.2,
  outline: 0,
  [$color2.variable]: vars2.color.reference,
  [$bg19.variable]: vars2.bg.reference,
  [$shadow5.variable]: vars2.shadow.reference,
  color: $color2.reference,
  bg: $bg19.reference,
  boxShadow: $shadow5.reference,
  borderRadius: "md",
  minH: $minH2.reference,
  minW: $minW2.reference,
  fontSize: $fontSize3.reference,
  px: $paddingX2.reference,
  _focusVisible: {
    [$shadow5.variable]: "shadows.outline"
  }
});
var baseStyleLabel6 = defineStyle2({
  lineHeight: 1.2,
  overflow: "visible"
});
var baseStyleCloseButton5 = defineStyle2({
  fontSize: "lg",
  w: "5",
  h: "5",
  transitionProperty: "common",
  transitionDuration: "normal",
  borderRadius: "full",
  marginStart: "1.5",
  marginEnd: "-1",
  opacity: 0.5,
  _disabled: {
    opacity: 0.4
  },
  _focusVisible: {
    boxShadow: "outline",
    bg: "rgba(0, 0, 0, 0.14)"
  },
  _hover: {
    opacity: 0.8
  },
  _active: {
    opacity: 1
  }
});
var baseStyle48 = definePartsStyle31({
  container: baseStyleContainer6,
  label: baseStyleLabel6,
  closeButton: baseStyleCloseButton5
});
var sizes28 = {
  sm: definePartsStyle31({
    container: {
      [$minH2.variable]: "sizes.5",
      [$minW2.variable]: "sizes.5",
      [$fontSize3.variable]: "fontSizes.xs",
      [$paddingX2.variable]: "space.2"
    },
    closeButton: {
      marginEnd: "-2px",
      marginStart: "0.35rem"
    }
  }),
  md: definePartsStyle31({
    container: {
      [$minH2.variable]: "sizes.6",
      [$minW2.variable]: "sizes.6",
      [$fontSize3.variable]: "fontSizes.sm",
      [$paddingX2.variable]: "space.2"
    }
  }),
  lg: definePartsStyle31({
    container: {
      [$minH2.variable]: "sizes.8",
      [$minW2.variable]: "sizes.8",
      [$fontSize3.variable]: "fontSizes.md",
      [$paddingX2.variable]: "space.3"
    }
  })
};
var variants16 = {
  subtle: definePartsStyle31((props) => {
    var _a10;
    return {
      container: (_a10 = badgeTheme2.variants) == null ? void 0 : _a10.subtle(props)
    };
  }),
  solid: definePartsStyle31((props) => {
    var _a10;
    return {
      container: (_a10 = badgeTheme2.variants) == null ? void 0 : _a10.solid(props)
    };
  }),
  outline: definePartsStyle31((props) => {
    var _a10;
    return {
      container: (_a10 = badgeTheme2.variants) == null ? void 0 : _a10.outline(props)
    };
  })
};
var tagTheme2 = defineMultiStyleConfig31({
  variants: variants16,
  baseStyle: baseStyle48,
  sizes: sizes28,
  defaultProps: {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-ICL3HPTT.mjs
var { definePartsStyle: definePartsStyle32, defineMultiStyleConfig: defineMultiStyleConfig32 } = createMultiStyleConfigHelpers2(inputAnatomy2.keys);
var $height4 = cssVar4("input-height");
var $fontSize4 = cssVar4("input-font-size");
var $padding3 = cssVar4("input-padding");
var $borderRadius2 = cssVar4("input-border-radius");
var baseStyle49 = definePartsStyle32({
  addon: {
    height: $height4.reference,
    fontSize: $fontSize4.reference,
    px: $padding3.reference,
    borderRadius: $borderRadius2.reference
  },
  field: {
    width: "100%",
    height: $height4.reference,
    fontSize: $fontSize4.reference,
    px: $padding3.reference,
    borderRadius: $borderRadius2.reference,
    minWidth: 0,
    outline: 0,
    position: "relative",
    appearance: "none",
    transitionProperty: "common",
    transitionDuration: "normal",
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  }
});
var size2 = {
  lg: defineStyle2({
    [$fontSize4.variable]: "fontSizes.lg",
    [$padding3.variable]: "space.4",
    [$borderRadius2.variable]: "radii.md",
    [$height4.variable]: "sizes.12"
  }),
  md: defineStyle2({
    [$fontSize4.variable]: "fontSizes.md",
    [$padding3.variable]: "space.4",
    [$borderRadius2.variable]: "radii.md",
    [$height4.variable]: "sizes.10"
  }),
  sm: defineStyle2({
    [$fontSize4.variable]: "fontSizes.sm",
    [$padding3.variable]: "space.3",
    [$borderRadius2.variable]: "radii.sm",
    [$height4.variable]: "sizes.8"
  }),
  xs: defineStyle2({
    [$fontSize4.variable]: "fontSizes.xs",
    [$padding3.variable]: "space.2",
    [$borderRadius2.variable]: "radii.sm",
    [$height4.variable]: "sizes.6"
  })
};
var sizes29 = {
  lg: definePartsStyle32({
    field: size2.lg,
    group: size2.lg
  }),
  md: definePartsStyle32({
    field: size2.md,
    group: size2.md
  }),
  sm: definePartsStyle32({
    field: size2.sm,
    group: size2.sm
  }),
  xs: definePartsStyle32({
    field: size2.xs,
    group: size2.xs
  })
};
function getDefaults2(props) {
  const { focusBorderColor: fc, errorBorderColor: ec } = props;
  return {
    focusBorderColor: fc || mode2("blue.500", "blue.300")(props),
    errorBorderColor: ec || mode2("red.500", "red.300")(props)
  };
}
var variantOutline5 = definePartsStyle32((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults2(props);
  return {
    field: {
      border: "1px solid",
      borderColor: "inherit",
      bg: "inherit",
      _hover: {
        borderColor: mode2("gray.300", "whiteAlpha.400")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor2(theme3, ec),
        boxShadow: `0 0 0 1px ${getColor2(theme3, ec)}`
      },
      _focusVisible: {
        zIndex: 1,
        borderColor: getColor2(theme3, fc),
        boxShadow: `0 0 0 1px ${getColor2(theme3, fc)}`
      }
    },
    addon: {
      border: "1px solid",
      borderColor: mode2("inherit", "whiteAlpha.50")(props),
      bg: mode2("gray.100", "whiteAlpha.300")(props)
    }
  };
});
var variantFilled2 = definePartsStyle32((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults2(props);
  return {
    field: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode2("gray.100", "whiteAlpha.50")(props),
      _hover: {
        bg: mode2("gray.200", "whiteAlpha.100")(props)
      },
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor2(theme3, ec)
      },
      _focusVisible: {
        bg: "transparent",
        borderColor: getColor2(theme3, fc)
      }
    },
    addon: {
      border: "2px solid",
      borderColor: "transparent",
      bg: mode2("gray.100", "whiteAlpha.50")(props)
    }
  };
});
var variantFlushed2 = definePartsStyle32((props) => {
  const { theme: theme3 } = props;
  const { focusBorderColor: fc, errorBorderColor: ec } = getDefaults2(props);
  return {
    field: {
      borderBottom: "1px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent",
      _readOnly: {
        boxShadow: "none !important",
        userSelect: "all"
      },
      _invalid: {
        borderColor: getColor2(theme3, ec),
        boxShadow: `0px 1px 0px 0px ${getColor2(theme3, ec)}`
      },
      _focusVisible: {
        borderColor: getColor2(theme3, fc),
        boxShadow: `0px 1px 0px 0px ${getColor2(theme3, fc)}`
      }
    },
    addon: {
      borderBottom: "2px solid",
      borderColor: "inherit",
      borderRadius: "0",
      px: "0",
      bg: "transparent"
    }
  };
});
var variantUnstyled5 = definePartsStyle32({
  field: {
    bg: "transparent",
    px: "0",
    height: "auto"
  },
  addon: {
    bg: "transparent",
    px: "0",
    height: "auto"
  }
});
var variants17 = {
  outline: variantOutline5,
  filled: variantFilled2,
  flushed: variantFlushed2,
  unstyled: variantUnstyled5
};
var inputTheme2 = defineMultiStyleConfig32({
  baseStyle: baseStyle49,
  sizes: sizes29,
  variants: variants17,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-KJ26FGJD.mjs
var _a7;
var baseStyle50 = defineStyle2({
  ...(_a7 = inputTheme2.baseStyle) == null ? void 0 : _a7.field,
  paddingY: "2",
  minHeight: "20",
  lineHeight: "short",
  verticalAlign: "top"
});
var _a24;
var _b5;
var variants18 = {
  outline: defineStyle2(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme2.variants) == null ? void 0 : _a42.outline(props).field) != null ? _b32 : {};
    }
  ),
  flushed: defineStyle2(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme2.variants) == null ? void 0 : _a42.flushed(props).field) != null ? _b32 : {};
    }
  ),
  filled: defineStyle2(
    (props) => {
      var _a42, _b32;
      return (_b32 = (_a42 = inputTheme2.variants) == null ? void 0 : _a42.filled(props).field) != null ? _b32 : {};
    }
  ),
  unstyled: (_b5 = (_a24 = inputTheme2.variants) == null ? void 0 : _a24.unstyled.field) != null ? _b5 : {}
};
var _a32;
var _b22;
var _c3;
var _d3;
var _e3;
var _f3;
var _g3;
var _h3;
var sizes30 = {
  xs: (_b22 = (_a32 = inputTheme2.sizes) == null ? void 0 : _a32.xs.field) != null ? _b22 : {},
  sm: (_d3 = (_c3 = inputTheme2.sizes) == null ? void 0 : _c3.sm.field) != null ? _d3 : {},
  md: (_f3 = (_e3 = inputTheme2.sizes) == null ? void 0 : _e3.md.field) != null ? _f3 : {},
  lg: (_h3 = (_g3 = inputTheme2.sizes) == null ? void 0 : _g3.lg.field) != null ? _h3 : {}
};
var textareaTheme2 = defineStyleConfig2({
  baseStyle: baseStyle50,
  sizes: sizes30,
  variants: variants18,
  defaultProps: {
    size: "md",
    variant: "outline"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-R7ZISUMV.mjs
var $bg20 = cssVar5("tooltip-bg");
var $fg8 = cssVar5("tooltip-fg");
var $arrowBg3 = cssVar5("popper-arrow-bg");
var baseStyle51 = defineStyle2({
  bg: $bg20.reference,
  color: $fg8.reference,
  [$bg20.variable]: "colors.gray.700",
  [$fg8.variable]: "colors.whiteAlpha.900",
  _dark: {
    [$bg20.variable]: "colors.gray.300",
    [$fg8.variable]: "colors.gray.900"
  },
  [$arrowBg3.variable]: $bg20.reference,
  px: "2",
  py: "0.5",
  borderRadius: "sm",
  fontWeight: "medium",
  fontSize: "sm",
  boxShadow: "md",
  maxW: "xs",
  zIndex: "tooltip"
});
var tooltipTheme2 = defineStyleConfig2({
  baseStyle: baseStyle51
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-37MNRBP2.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig33, definePartsStyle: definePartsStyle33 } = createMultiStyleConfigHelpers2(progressAnatomy2.keys);
var filledStyle2 = defineStyle2((props) => {
  const { colorScheme: c, theme: t4, isIndeterminate, hasStripe } = props;
  const stripeStyle = mode2(
    generateStripe2(),
    generateStripe2("1rem", "rgba(0,0,0,0.1)")
  )(props);
  const bgColor = mode2(`${c}.500`, `${c}.200`)(props);
  const gradient = `linear-gradient(
    to right,
    transparent 0%,
    ${getColor2(t4, bgColor)} 50%,
    transparent 100%
  )`;
  const addStripe = !isIndeterminate && hasStripe;
  return {
    ...addStripe && stripeStyle,
    ...isIndeterminate ? { bgImage: gradient } : { bgColor }
  };
});
var baseStyleLabel7 = defineStyle2({
  lineHeight: "1",
  fontSize: "0.25em",
  fontWeight: "bold",
  color: "white"
});
var baseStyleTrack5 = defineStyle2((props) => {
  return {
    bg: mode2("gray.100", "whiteAlpha.300")(props)
  };
});
var baseStyleFilledTrack3 = defineStyle2((props) => {
  return {
    transitionProperty: "common",
    transitionDuration: "slow",
    ...filledStyle2(props)
  };
});
var baseStyle52 = definePartsStyle33((props) => ({
  label: baseStyleLabel7,
  filledTrack: baseStyleFilledTrack3(props),
  track: baseStyleTrack5(props)
}));
var sizes31 = {
  xs: definePartsStyle33({
    track: { h: "1" }
  }),
  sm: definePartsStyle33({
    track: { h: "2" }
  }),
  md: definePartsStyle33({
    track: { h: "3" }
  }),
  lg: definePartsStyle33({
    track: { h: "4" }
  })
};
var progressTheme2 = defineMultiStyleConfig33({
  sizes: sizes31,
  baseStyle: baseStyle52,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-UV3F75RF.mjs
var isFunction6 = (value) => typeof value === "function";
function runIfFn5(valueOrFn, ...args) {
  return isFunction6(valueOrFn) ? valueOrFn(...args) : valueOrFn;
}

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-XHYVH6UO.mjs
var { definePartsStyle: definePartsStyle34, defineMultiStyleConfig: defineMultiStyleConfig34 } = createMultiStyleConfigHelpers2(checkboxAnatomy2.keys);
var $size7 = cssVar4("checkbox-size");
var baseStyleControl3 = defineStyle2((props) => {
  const { colorScheme: c } = props;
  return {
    w: $size7.reference,
    h: $size7.reference,
    transitionProperty: "box-shadow",
    transitionDuration: "normal",
    border: "2px solid",
    borderRadius: "sm",
    borderColor: "inherit",
    color: "white",
    _checked: {
      bg: mode2(`${c}.500`, `${c}.200`)(props),
      borderColor: mode2(`${c}.500`, `${c}.200`)(props),
      color: mode2("white", "gray.900")(props),
      _hover: {
        bg: mode2(`${c}.600`, `${c}.300`)(props),
        borderColor: mode2(`${c}.600`, `${c}.300`)(props)
      },
      _disabled: {
        borderColor: mode2("gray.200", "transparent")(props),
        bg: mode2("gray.200", "whiteAlpha.300")(props),
        color: mode2("gray.500", "whiteAlpha.500")(props)
      }
    },
    _indeterminate: {
      bg: mode2(`${c}.500`, `${c}.200`)(props),
      borderColor: mode2(`${c}.500`, `${c}.200`)(props),
      color: mode2("white", "gray.900")(props)
    },
    _disabled: {
      bg: mode2("gray.100", "whiteAlpha.100")(props),
      borderColor: mode2("gray.100", "transparent")(props)
    },
    _focusVisible: {
      boxShadow: "outline"
    },
    _invalid: {
      borderColor: mode2("red.500", "red.300")(props)
    }
  };
});
var baseStyleContainer7 = defineStyle2({
  _disabled: { cursor: "not-allowed" }
});
var baseStyleLabel8 = defineStyle2({
  userSelect: "none",
  _disabled: { opacity: 0.4 }
});
var baseStyleIcon8 = defineStyle2({
  transitionProperty: "transform",
  transitionDuration: "normal"
});
var baseStyle53 = definePartsStyle34((props) => ({
  icon: baseStyleIcon8,
  container: baseStyleContainer7,
  control: runIfFn5(baseStyleControl3, props),
  label: baseStyleLabel8
}));
var sizes32 = {
  sm: definePartsStyle34({
    control: { [$size7.variable]: "sizes.3" },
    label: { fontSize: "sm" },
    icon: { fontSize: "3xs" }
  }),
  md: definePartsStyle34({
    control: { [$size7.variable]: "sizes.4" },
    label: { fontSize: "md" },
    icon: { fontSize: "2xs" }
  }),
  lg: definePartsStyle34({
    control: { [$size7.variable]: "sizes.5" },
    label: { fontSize: "lg" },
    icon: { fontSize: "2xs" }
  })
};
var checkboxTheme2 = defineMultiStyleConfig34({
  baseStyle: baseStyle53,
  sizes: sizes32,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-VZUATZ4E.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig35, definePartsStyle: definePartsStyle35 } = createMultiStyleConfigHelpers2(radioAnatomy2.keys);
var baseStyleControl4 = defineStyle2((props) => {
  var _a10;
  const controlStyle = (_a10 = runIfFn5(checkboxTheme2.baseStyle, props)) == null ? void 0 : _a10.control;
  return {
    ...controlStyle,
    borderRadius: "full",
    _checked: {
      ...controlStyle == null ? void 0 : controlStyle["_checked"],
      _before: {
        content: `""`,
        display: "inline-block",
        pos: "relative",
        w: "50%",
        h: "50%",
        borderRadius: "50%",
        bg: "currentColor"
      }
    }
  };
});
var baseStyle54 = definePartsStyle35((props) => {
  var _a10, _b8, _c5, _d5;
  return {
    label: (_b8 = (_a10 = checkboxTheme2).baseStyle) == null ? void 0 : _b8.call(_a10, props).label,
    container: (_d5 = (_c5 = checkboxTheme2).baseStyle) == null ? void 0 : _d5.call(_c5, props).container,
    control: baseStyleControl4(props)
  };
});
var sizes33 = {
  md: definePartsStyle35({
    control: { w: "4", h: "4" },
    label: { fontSize: "md" }
  }),
  lg: definePartsStyle35({
    control: { w: "5", h: "5" },
    label: { fontSize: "lg" }
  }),
  sm: definePartsStyle35({
    control: { width: "3", height: "3" },
    label: { fontSize: "sm" }
  })
};
var radioTheme2 = defineMultiStyleConfig35({
  baseStyle: baseStyle54,
  sizes: sizes33,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-NNA4E64A.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig36, definePartsStyle: definePartsStyle36 } = createMultiStyleConfigHelpers2(selectAnatomy2.keys);
var $bg21 = cssVar4("select-bg");
var _a8;
var baseStyleField3 = defineStyle2({
  ...(_a8 = inputTheme2.baseStyle) == null ? void 0 : _a8.field,
  appearance: "none",
  paddingBottom: "1px",
  lineHeight: "normal",
  bg: $bg21.reference,
  [$bg21.variable]: "colors.white",
  _dark: {
    [$bg21.variable]: "colors.gray.700"
  },
  "> option, > optgroup": {
    bg: $bg21.reference
  }
});
var baseStyleIcon9 = defineStyle2({
  width: "6",
  height: "100%",
  insetEnd: "2",
  position: "relative",
  color: "currentColor",
  fontSize: "xl",
  _disabled: {
    opacity: 0.5
  }
});
var baseStyle55 = definePartsStyle36({
  field: baseStyleField3,
  icon: baseStyleIcon9
});
var iconSpacing2 = defineStyle2({
  paddingInlineEnd: "8"
});
var _a25;
var _b6;
var _c4;
var _d4;
var _e4;
var _f4;
var _g4;
var _h4;
var sizes34 = {
  lg: {
    ...(_a25 = inputTheme2.sizes) == null ? void 0 : _a25.lg,
    field: {
      ...(_b6 = inputTheme2.sizes) == null ? void 0 : _b6.lg.field,
      ...iconSpacing2
    }
  },
  md: {
    ...(_c4 = inputTheme2.sizes) == null ? void 0 : _c4.md,
    field: {
      ...(_d4 = inputTheme2.sizes) == null ? void 0 : _d4.md.field,
      ...iconSpacing2
    }
  },
  sm: {
    ...(_e4 = inputTheme2.sizes) == null ? void 0 : _e4.sm,
    field: {
      ...(_f4 = inputTheme2.sizes) == null ? void 0 : _f4.sm.field,
      ...iconSpacing2
    }
  },
  xs: {
    ...(_g4 = inputTheme2.sizes) == null ? void 0 : _g4.xs,
    field: {
      ...(_h4 = inputTheme2.sizes) == null ? void 0 : _h4.xs.field,
      ...iconSpacing2
    },
    icon: {
      insetEnd: "1"
    }
  }
};
var selectTheme2 = defineMultiStyleConfig36({
  baseStyle: baseStyle55,
  sizes: sizes34,
  variants: inputTheme2.variants,
  defaultProps: inputTheme2.defaultProps
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-X6XFE4TF.mjs
var $startColor2 = cssVar4("skeleton-start-color");
var $endColor2 = cssVar4("skeleton-end-color");
var baseStyle56 = defineStyle2({
  [$startColor2.variable]: "colors.gray.100",
  [$endColor2.variable]: "colors.gray.400",
  _dark: {
    [$startColor2.variable]: "colors.gray.800",
    [$endColor2.variable]: "colors.gray.600"
  },
  background: $startColor2.reference,
  borderColor: $endColor2.reference,
  opacity: 0.7,
  borderRadius: "sm"
});
var skeletonTheme2 = defineStyleConfig2({
  baseStyle: baseStyle56
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-ZREGO6US.mjs
var $bg22 = cssVar4("skip-link-bg");
var baseStyle57 = defineStyle2({
  borderRadius: "md",
  fontWeight: "semibold",
  _focusVisible: {
    boxShadow: "outline",
    padding: "4",
    position: "fixed",
    top: "6",
    insetStart: "6",
    [$bg22.variable]: "colors.white",
    _dark: {
      [$bg22.variable]: "colors.gray.700"
    },
    bg: $bg22.reference
  }
});
var skipLinkTheme2 = defineStyleConfig2({
  baseStyle: baseStyle57
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-5FA7Y3RP.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig37, definePartsStyle: definePartsStyle37 } = createMultiStyleConfigHelpers2(sliderAnatomy2.keys);
var $thumbSize2 = cssVar4("slider-thumb-size");
var $trackSize2 = cssVar4("slider-track-size");
var $bg23 = cssVar4("slider-bg");
var baseStyleContainer8 = defineStyle2((props) => {
  const { orientation } = props;
  return {
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    _disabled: {
      opacity: 0.6,
      cursor: "default",
      pointerEvents: "none"
    },
    ...orient2({
      orientation,
      vertical: { h: "100%" },
      horizontal: { w: "100%" }
    })
  };
});
var baseStyleTrack6 = defineStyle2((props) => {
  const orientationStyles = orient2({
    orientation: props.orientation,
    horizontal: { h: $trackSize2.reference },
    vertical: { w: $trackSize2.reference }
  });
  return {
    ...orientationStyles,
    overflow: "hidden",
    borderRadius: "sm",
    [$bg23.variable]: "colors.gray.200",
    _dark: {
      [$bg23.variable]: "colors.whiteAlpha.200"
    },
    _disabled: {
      [$bg23.variable]: "colors.gray.300",
      _dark: {
        [$bg23.variable]: "colors.whiteAlpha.300"
      }
    },
    bg: $bg23.reference
  };
});
var baseStyleThumb4 = defineStyle2((props) => {
  const { orientation } = props;
  const orientationStyle = orient2({
    orientation,
    vertical: {
      left: "50%",
      transform: `translateX(-50%)`,
      _active: {
        transform: `translateX(-50%) scale(1.15)`
      }
    },
    horizontal: {
      top: "50%",
      transform: `translateY(-50%)`,
      _active: {
        transform: `translateY(-50%) scale(1.15)`
      }
    }
  });
  return {
    ...orientationStyle,
    w: $thumbSize2.reference,
    h: $thumbSize2.reference,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    position: "absolute",
    outline: 0,
    zIndex: 1,
    borderRadius: "full",
    bg: "white",
    boxShadow: "base",
    border: "1px solid",
    borderColor: "transparent",
    transitionProperty: "transform",
    transitionDuration: "normal",
    _focusVisible: {
      boxShadow: "outline"
    },
    _disabled: {
      bg: "gray.300"
    }
  };
});
var baseStyleFilledTrack4 = defineStyle2((props) => {
  const { colorScheme: c } = props;
  return {
    width: "inherit",
    height: "inherit",
    [$bg23.variable]: `colors.${c}.500`,
    _dark: {
      [$bg23.variable]: `colors.${c}.200`
    },
    bg: $bg23.reference
  };
});
var baseStyle58 = definePartsStyle37((props) => ({
  container: baseStyleContainer8(props),
  track: baseStyleTrack6(props),
  thumb: baseStyleThumb4(props),
  filledTrack: baseStyleFilledTrack4(props)
}));
var sizeLg2 = definePartsStyle37({
  container: {
    [$thumbSize2.variable]: `sizes.4`,
    [$trackSize2.variable]: `sizes.1`
  }
});
var sizeMd2 = definePartsStyle37({
  container: {
    [$thumbSize2.variable]: `sizes.3.5`,
    [$trackSize2.variable]: `sizes.1`
  }
});
var sizeSm2 = definePartsStyle37({
  container: {
    [$thumbSize2.variable]: `sizes.2.5`,
    [$trackSize2.variable]: `sizes.0.5`
  }
});
var sizes35 = {
  lg: sizeLg2,
  md: sizeMd2,
  sm: sizeSm2
};
var sliderTheme2 = defineMultiStyleConfig37({
  baseStyle: baseStyle58,
  sizes: sizes35,
  defaultProps: {
    size: "md",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-L3YAB6CV.mjs
var $size8 = cssVar5("spinner-size");
var baseStyle59 = defineStyle2({
  width: [$size8.reference],
  height: [$size8.reference]
});
var sizes36 = {
  xs: defineStyle2({
    [$size8.variable]: "sizes.3"
  }),
  sm: defineStyle2({
    [$size8.variable]: "sizes.4"
  }),
  md: defineStyle2({
    [$size8.variable]: "sizes.6"
  }),
  lg: defineStyle2({
    [$size8.variable]: "sizes.8"
  }),
  xl: defineStyle2({
    [$size8.variable]: "sizes.12"
  })
};
var spinnerTheme2 = defineStyleConfig2({
  baseStyle: baseStyle59,
  sizes: sizes36,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-2KWJXISX.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig38, definePartsStyle: definePartsStyle38 } = createMultiStyleConfigHelpers2(statAnatomy2.keys);
var baseStyleLabel9 = defineStyle2({
  fontWeight: "medium"
});
var baseStyleHelpText2 = defineStyle2({
  opacity: 0.8,
  marginBottom: "2"
});
var baseStyleNumber2 = defineStyle2({
  verticalAlign: "baseline",
  fontWeight: "semibold"
});
var baseStyleIcon10 = defineStyle2({
  marginEnd: 1,
  w: "3.5",
  h: "3.5",
  verticalAlign: "middle"
});
var baseStyle60 = definePartsStyle38({
  container: {},
  label: baseStyleLabel9,
  helpText: baseStyleHelpText2,
  number: baseStyleNumber2,
  icon: baseStyleIcon10
});
var sizes37 = {
  md: definePartsStyle38({
    label: { fontSize: "sm" },
    helpText: { fontSize: "sm" },
    number: { fontSize: "2xl" }
  })
};
var statTheme2 = defineMultiStyleConfig38({
  baseStyle: baseStyle60,
  sizes: sizes37,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-AFCBUAM5.mjs
var $bg24 = cssVar4("kbd-bg");
var baseStyle61 = defineStyle2({
  [$bg24.variable]: "colors.gray.100",
  _dark: {
    [$bg24.variable]: "colors.whiteAlpha.100"
  },
  bg: $bg24.reference,
  borderRadius: "md",
  borderWidth: "1px",
  borderBottomWidth: "3px",
  fontSize: "0.8em",
  fontWeight: "bold",
  lineHeight: "normal",
  px: "0.4em",
  whiteSpace: "nowrap"
});
var kbdTheme2 = defineStyleConfig2({
  baseStyle: baseStyle61
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-V5KSHSOQ.mjs
var baseStyle62 = defineStyle2({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  cursor: "pointer",
  textDecoration: "none",
  outline: "none",
  color: "inherit",
  _hover: {
    textDecoration: "underline"
  },
  _focusVisible: {
    boxShadow: "outline"
  }
});
var linkTheme2 = defineStyleConfig2({
  baseStyle: baseStyle62
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-MGNM2WZQ.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig39, definePartsStyle: definePartsStyle39 } = createMultiStyleConfigHelpers2(listAnatomy2.keys);
var baseStyleIcon11 = defineStyle2({
  marginEnd: "2",
  display: "inline",
  verticalAlign: "text-bottom"
});
var baseStyle63 = definePartsStyle39({
  icon: baseStyleIcon11
});
var listTheme2 = defineMultiStyleConfig39({
  baseStyle: baseStyle63
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-N2GP2AF7.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig40, definePartsStyle: definePartsStyle40 } = createMultiStyleConfigHelpers2(menuAnatomy2.keys);
var $bg25 = cssVar4("menu-bg");
var $shadow6 = cssVar4("menu-shadow");
var baseStyleList2 = defineStyle2({
  [$bg25.variable]: "#fff",
  [$shadow6.variable]: "shadows.sm",
  _dark: {
    [$bg25.variable]: "colors.gray.700",
    [$shadow6.variable]: "shadows.dark-lg"
  },
  color: "inherit",
  minW: "3xs",
  py: "2",
  zIndex: 1,
  borderRadius: "md",
  borderWidth: "1px",
  bg: $bg25.reference,
  boxShadow: $shadow6.reference
});
var baseStyleItem2 = defineStyle2({
  py: "1.5",
  px: "3",
  transitionProperty: "background",
  transitionDuration: "ultra-fast",
  transitionTimingFunction: "ease-in",
  _focus: {
    [$bg25.variable]: "colors.gray.100",
    _dark: {
      [$bg25.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg25.variable]: "colors.gray.200",
    _dark: {
      [$bg25.variable]: "colors.whiteAlpha.200"
    }
  },
  _expanded: {
    [$bg25.variable]: "colors.gray.100",
    _dark: {
      [$bg25.variable]: "colors.whiteAlpha.100"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  bg: $bg25.reference
});
var baseStyleGroupTitle2 = defineStyle2({
  mx: 4,
  my: 2,
  fontWeight: "semibold",
  fontSize: "sm"
});
var baseStyleIcon12 = defineStyle2({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0
});
var baseStyleCommand2 = defineStyle2({
  opacity: 0.6
});
var baseStyleDivider2 = defineStyle2({
  border: 0,
  borderBottom: "1px solid",
  borderColor: "inherit",
  my: "2",
  opacity: 0.6
});
var baseStyleButton3 = defineStyle2({
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyle64 = definePartsStyle40({
  button: baseStyleButton3,
  list: baseStyleList2,
  item: baseStyleItem2,
  groupTitle: baseStyleGroupTitle2,
  icon: baseStyleIcon12,
  command: baseStyleCommand2,
  divider: baseStyleDivider2
});
var menuTheme2 = defineMultiStyleConfig40({
  baseStyle: baseStyle64
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-JN6QBAR6.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig41, definePartsStyle: definePartsStyle41 } = createMultiStyleConfigHelpers2(modalAnatomy2.keys);
var $bg26 = cssVar4("modal-bg");
var $shadow7 = cssVar4("modal-shadow");
var baseStyleOverlay3 = defineStyle2({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer3 = defineStyle2((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center",
    alignItems: isCentered ? "center" : "flex-start",
    overflow: scrollBehavior === "inside" ? "hidden" : "auto",
    overscrollBehaviorY: "none"
  };
});
var baseStyleDialog3 = defineStyle2((props) => {
  const { isCentered, scrollBehavior } = props;
  return {
    borderRadius: "md",
    color: "inherit",
    my: isCentered ? "auto" : "16",
    mx: isCentered ? "auto" : void 0,
    zIndex: "modal",
    maxH: scrollBehavior === "inside" ? "calc(100% - 7.5rem)" : void 0,
    [$bg26.variable]: "colors.white",
    [$shadow7.variable]: "shadows.lg",
    _dark: {
      [$bg26.variable]: "colors.gray.700",
      [$shadow7.variable]: "shadows.dark-lg"
    },
    bg: $bg26.reference,
    boxShadow: $shadow7.reference
  };
});
var baseStyleHeader4 = defineStyle2({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton6 = defineStyle2({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody4 = defineStyle2((props) => {
  const { scrollBehavior } = props;
  return {
    px: "6",
    py: "2",
    flex: "1",
    overflow: scrollBehavior === "inside" ? "auto" : void 0
  };
});
var baseStyleFooter4 = defineStyle2({
  px: "6",
  py: "4"
});
var baseStyle65 = definePartsStyle41((props) => ({
  overlay: baseStyleOverlay3,
  dialogContainer: runIfFn5(baseStyleDialogContainer3, props),
  dialog: runIfFn5(baseStyleDialog3, props),
  header: baseStyleHeader4,
  closeButton: baseStyleCloseButton6,
  body: runIfFn5(baseStyleBody4, props),
  footer: baseStyleFooter4
}));
function getSize5(value) {
  if (value === "full") {
    return definePartsStyle41({
      dialog: {
        maxW: "100vw",
        minH: "$100vh",
        my: "0",
        borderRadius: "0"
      }
    });
  }
  return definePartsStyle41({
    dialog: { maxW: value }
  });
}
var sizes38 = {
  xs: getSize5("xs"),
  sm: getSize5("sm"),
  md: getSize5("md"),
  lg: getSize5("lg"),
  xl: getSize5("xl"),
  "2xl": getSize5("2xl"),
  "3xl": getSize5("3xl"),
  "4xl": getSize5("4xl"),
  "5xl": getSize5("5xl"),
  "6xl": getSize5("6xl"),
  full: getSize5("full")
};
var modalTheme2 = defineMultiStyleConfig41({
  baseStyle: baseStyle65,
  sizes: sizes38,
  defaultProps: { size: "md" }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-57T4IAPW.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig42, definePartsStyle: definePartsStyle42 } = createMultiStyleConfigHelpers2(numberInputAnatomy2.keys);
var $stepperWidth2 = cssVar5("number-input-stepper-width");
var $inputPadding2 = cssVar5("number-input-input-padding");
var inputPaddingValue2 = calc5($stepperWidth2).add("0.5rem").toString();
var $bg27 = cssVar5("number-input-bg");
var $fg9 = cssVar5("number-input-color");
var $border6 = cssVar5("number-input-border-color");
var baseStyleRoot4 = defineStyle2({
  [$stepperWidth2.variable]: "sizes.6",
  [$inputPadding2.variable]: inputPaddingValue2
});
var baseStyleField4 = defineStyle2(
  (props) => {
    var _a10, _b8;
    return (_b8 = (_a10 = runIfFn5(inputTheme2.baseStyle, props)) == null ? void 0 : _a10.field) != null ? _b8 : {};
  }
);
var baseStyleStepperGroup2 = defineStyle2({
  width: $stepperWidth2.reference
});
var baseStyleStepper2 = defineStyle2({
  borderStart: "1px solid",
  borderStartColor: $border6.reference,
  color: $fg9.reference,
  bg: $bg27.reference,
  [$fg9.variable]: "colors.chakra-body-text",
  [$border6.variable]: "colors.chakra-border-color",
  _dark: {
    [$fg9.variable]: "colors.whiteAlpha.800",
    [$border6.variable]: "colors.whiteAlpha.300"
  },
  _active: {
    [$bg27.variable]: "colors.gray.200",
    _dark: {
      [$bg27.variable]: "colors.whiteAlpha.300"
    }
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  }
});
var baseStyle66 = definePartsStyle42((props) => {
  var _a10;
  return {
    root: baseStyleRoot4,
    field: (_a10 = runIfFn5(baseStyleField4, props)) != null ? _a10 : {},
    stepperGroup: baseStyleStepperGroup2,
    stepper: baseStyleStepper2
  };
});
function getSize6(size3) {
  var _a10, _b8, _c5;
  const sizeStyle = (_a10 = inputTheme2.sizes) == null ? void 0 : _a10[size3];
  const radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  const _fontSize = (_c5 = (_b8 = sizeStyle.field) == null ? void 0 : _b8.fontSize) != null ? _c5 : "md";
  const fontSize = typography_default2.fontSizes[_fontSize];
  return definePartsStyle42({
    field: {
      ...sizeStyle.field,
      paddingInlineEnd: $inputPadding2.reference,
      verticalAlign: "top"
    },
    stepper: {
      fontSize: calc5(fontSize).multiply(0.75).toString(),
      _first: {
        borderTopEndRadius: radius[size3]
      },
      _last: {
        borderBottomEndRadius: radius[size3],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  });
}
var sizes39 = {
  xs: getSize6("xs"),
  sm: getSize6("sm"),
  md: getSize6("md"),
  lg: getSize6("lg")
};
var numberInputTheme2 = defineMultiStyleConfig42({
  baseStyle: baseStyle66,
  sizes: sizes39,
  variants: inputTheme2.variants,
  defaultProps: inputTheme2.defaultProps
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-OEFJDLVS.mjs
var _a9;
var baseStyle67 = defineStyle2({
  ...(_a9 = inputTheme2.baseStyle) == null ? void 0 : _a9.field,
  textAlign: "center"
});
var sizes40 = {
  lg: defineStyle2({
    fontSize: "lg",
    w: 12,
    h: 12,
    borderRadius: "md"
  }),
  md: defineStyle2({
    fontSize: "md",
    w: 10,
    h: 10,
    borderRadius: "md"
  }),
  sm: defineStyle2({
    fontSize: "sm",
    w: 8,
    h: 8,
    borderRadius: "sm"
  }),
  xs: defineStyle2({
    fontSize: "xs",
    w: 6,
    h: 6,
    borderRadius: "sm"
  })
};
var _a26;
var _b7;
var variants19 = {
  outline: defineStyle2(
    (props) => {
      var _a33, _b23, _c5;
      return (_c5 = (_b23 = runIfFn5((_a33 = inputTheme2.variants) == null ? void 0 : _a33.outline, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  flushed: defineStyle2(
    (props) => {
      var _a33, _b23, _c5;
      return (_c5 = (_b23 = runIfFn5((_a33 = inputTheme2.variants) == null ? void 0 : _a33.flushed, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  filled: defineStyle2(
    (props) => {
      var _a33, _b23, _c5;
      return (_c5 = (_b23 = runIfFn5((_a33 = inputTheme2.variants) == null ? void 0 : _a33.filled, props)) == null ? void 0 : _b23.field) != null ? _c5 : {};
    }
  ),
  unstyled: (_b7 = (_a26 = inputTheme2.variants) == null ? void 0 : _a26.unstyled.field) != null ? _b7 : {}
};
var pinInputTheme2 = defineStyleConfig2({
  baseStyle: baseStyle67,
  sizes: sizes40,
  variants: variants19,
  defaultProps: inputTheme2.defaultProps
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-U3INMHUO.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig43, definePartsStyle: definePartsStyle43 } = createMultiStyleConfigHelpers2(popoverAnatomy2.keys);
var $popperBg2 = cssVar5("popper-bg");
var $arrowBg4 = cssVar5("popper-arrow-bg");
var $arrowShadowColor2 = cssVar5("popper-arrow-shadow-color");
var baseStylePopper2 = defineStyle2({ zIndex: 10 });
var baseStyleContent2 = defineStyle2({
  [$popperBg2.variable]: `colors.white`,
  bg: $popperBg2.reference,
  [$arrowBg4.variable]: $popperBg2.reference,
  [$arrowShadowColor2.variable]: `colors.gray.200`,
  _dark: {
    [$popperBg2.variable]: `colors.gray.700`,
    [$arrowShadowColor2.variable]: `colors.whiteAlpha.300`
  },
  width: "xs",
  border: "1px solid",
  borderColor: "inherit",
  borderRadius: "md",
  boxShadow: "sm",
  zIndex: "inherit",
  _focusVisible: {
    outline: 0,
    boxShadow: "outline"
  }
});
var baseStyleHeader5 = defineStyle2({
  px: 3,
  py: 2,
  borderBottomWidth: "1px"
});
var baseStyleBody5 = defineStyle2({
  px: 3,
  py: 2
});
var baseStyleFooter5 = defineStyle2({
  px: 3,
  py: 2,
  borderTopWidth: "1px"
});
var baseStyleCloseButton7 = defineStyle2({
  position: "absolute",
  borderRadius: "md",
  top: 1,
  insetEnd: 2,
  padding: 2
});
var baseStyle68 = definePartsStyle43({
  popper: baseStylePopper2,
  content: baseStyleContent2,
  header: baseStyleHeader5,
  body: baseStyleBody5,
  footer: baseStyleFooter5,
  closeButton: baseStyleCloseButton7
});
var popoverTheme2 = defineMultiStyleConfig43({
  baseStyle: baseStyle68
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-VWP3ZVQT.mjs
var { definePartsStyle: definePartsStyle44, defineMultiStyleConfig: defineMultiStyleConfig44 } = createMultiStyleConfigHelpers2(drawerAnatomy2.keys);
var $bg28 = cssVar4("drawer-bg");
var $bs2 = cssVar4("drawer-box-shadow");
function getSize7(value) {
  if (value === "full") {
    return definePartsStyle44({
      dialog: { maxW: "100vw", h: "100vh" }
    });
  }
  return definePartsStyle44({
    dialog: { maxW: value }
  });
}
var baseStyleOverlay4 = defineStyle2({
  bg: "blackAlpha.600",
  zIndex: "modal"
});
var baseStyleDialogContainer4 = defineStyle2({
  display: "flex",
  zIndex: "modal",
  justifyContent: "center"
});
var baseStyleDialog4 = defineStyle2((props) => {
  const { isFullHeight } = props;
  return {
    ...isFullHeight && { height: "100vh" },
    zIndex: "modal",
    maxH: "100vh",
    color: "inherit",
    [$bg28.variable]: "colors.white",
    [$bs2.variable]: "shadows.lg",
    _dark: {
      [$bg28.variable]: "colors.gray.700",
      [$bs2.variable]: "shadows.dark-lg"
    },
    bg: $bg28.reference,
    boxShadow: $bs2.reference
  };
});
var baseStyleHeader6 = defineStyle2({
  px: "6",
  py: "4",
  fontSize: "xl",
  fontWeight: "semibold"
});
var baseStyleCloseButton8 = defineStyle2({
  position: "absolute",
  top: "2",
  insetEnd: "3"
});
var baseStyleBody6 = defineStyle2({
  px: "6",
  py: "2",
  flex: "1",
  overflow: "auto"
});
var baseStyleFooter6 = defineStyle2({
  px: "6",
  py: "4"
});
var baseStyle69 = definePartsStyle44((props) => ({
  overlay: baseStyleOverlay4,
  dialogContainer: baseStyleDialogContainer4,
  dialog: runIfFn5(baseStyleDialog4, props),
  header: baseStyleHeader6,
  closeButton: baseStyleCloseButton8,
  body: baseStyleBody6,
  footer: baseStyleFooter6
}));
var sizes41 = {
  xs: getSize7("xs"),
  sm: getSize7("md"),
  md: getSize7("lg"),
  lg: getSize7("2xl"),
  xl: getSize7("4xl"),
  full: getSize7("full")
};
var drawerTheme2 = defineMultiStyleConfig44({
  baseStyle: baseStyle69,
  sizes: sizes41,
  defaultProps: {
    size: "xs"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-D6DZ26HA.mjs
var { definePartsStyle: definePartsStyle45, defineMultiStyleConfig: defineMultiStyleConfig45 } = createMultiStyleConfigHelpers2(editableAnatomy2.keys);
var baseStylePreview2 = defineStyle2({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal"
});
var baseStyleInput2 = defineStyle2({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyleTextarea2 = defineStyle2({
  borderRadius: "md",
  py: "1",
  transitionProperty: "common",
  transitionDuration: "normal",
  width: "full",
  _focusVisible: { boxShadow: "outline" },
  _placeholder: { opacity: 0.6 }
});
var baseStyle70 = definePartsStyle45({
  preview: baseStylePreview2,
  input: baseStyleInput2,
  textarea: baseStyleTextarea2
});
var editableTheme2 = defineMultiStyleConfig45({
  baseStyle: baseStyle70
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-O6GGGS4Y.mjs
var { definePartsStyle: definePartsStyle46, defineMultiStyleConfig: defineMultiStyleConfig46 } = createMultiStyleConfigHelpers2(formAnatomy2.keys);
var $fg10 = cssVar4("form-control-color");
var baseStyleRequiredIndicator2 = defineStyle2({
  marginStart: "1",
  [$fg10.variable]: "colors.red.500",
  _dark: {
    [$fg10.variable]: "colors.red.300"
  },
  color: $fg10.reference
});
var baseStyleHelperText2 = defineStyle2({
  mt: "2",
  [$fg10.variable]: "colors.gray.600",
  _dark: {
    [$fg10.variable]: "colors.whiteAlpha.600"
  },
  color: $fg10.reference,
  lineHeight: "normal",
  fontSize: "sm"
});
var baseStyle71 = definePartsStyle46({
  container: {
    width: "100%",
    position: "relative"
  },
  requiredIndicator: baseStyleRequiredIndicator2,
  helperText: baseStyleHelperText2
});
var formTheme2 = defineMultiStyleConfig46({
  baseStyle: baseStyle71
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-SRBDDT7F.mjs
var { definePartsStyle: definePartsStyle47, defineMultiStyleConfig: defineMultiStyleConfig47 } = createMultiStyleConfigHelpers2(formErrorAnatomy2.keys);
var $fg11 = cssVar4("form-error-color");
var baseStyleText2 = defineStyle2({
  [$fg11.variable]: `colors.red.500`,
  _dark: {
    [$fg11.variable]: `colors.red.300`
  },
  color: $fg11.reference,
  mt: "2",
  fontSize: "sm",
  lineHeight: "normal"
});
var baseStyleIcon13 = defineStyle2({
  marginEnd: "0.5em",
  [$fg11.variable]: `colors.red.500`,
  _dark: {
    [$fg11.variable]: `colors.red.300`
  },
  color: $fg11.reference
});
var baseStyle72 = definePartsStyle47({
  text: baseStyleText2,
  icon: baseStyleIcon13
});
var formErrorTheme2 = defineMultiStyleConfig47({
  baseStyle: baseStyle72
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-VHM7WLW6.mjs
var baseStyle73 = defineStyle2({
  fontSize: "md",
  marginEnd: "3",
  mb: "2",
  fontWeight: "medium",
  transitionProperty: "common",
  transitionDuration: "normal",
  opacity: 1,
  _disabled: {
    opacity: 0.4
  }
});
var formLabelTheme2 = defineStyleConfig2({
  baseStyle: baseStyle73
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-WXARPSDQ.mjs
var baseStyle74 = defineStyle2({
  fontFamily: "heading",
  fontWeight: "bold"
});
var sizes42 = {
  "4xl": defineStyle2({
    fontSize: ["6xl", null, "7xl"],
    lineHeight: 1
  }),
  "3xl": defineStyle2({
    fontSize: ["5xl", null, "6xl"],
    lineHeight: 1
  }),
  "2xl": defineStyle2({
    fontSize: ["4xl", null, "5xl"],
    lineHeight: [1.2, null, 1]
  }),
  xl: defineStyle2({
    fontSize: ["3xl", null, "4xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  lg: defineStyle2({
    fontSize: ["2xl", null, "3xl"],
    lineHeight: [1.33, null, 1.2]
  }),
  md: defineStyle2({
    fontSize: "xl",
    lineHeight: 1.2
  }),
  sm: defineStyle2({
    fontSize: "md",
    lineHeight: 1.2
  }),
  xs: defineStyle2({
    fontSize: "sm",
    lineHeight: 1.2
  })
};
var headingTheme2 = defineStyleConfig2({
  baseStyle: baseStyle74,
  sizes: sizes42,
  defaultProps: {
    size: "xl"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-FU5DDBRC.mjs
var { defineMultiStyleConfig: defineMultiStyleConfig48, definePartsStyle: definePartsStyle48 } = createMultiStyleConfigHelpers2(breadcrumbAnatomy2.keys);
var $decor2 = cssVar4("breadcrumb-link-decor");
var baseStyleLink2 = defineStyle2({
  transitionProperty: "common",
  transitionDuration: "fast",
  transitionTimingFunction: "ease-out",
  outline: "none",
  color: "inherit",
  textDecoration: $decor2.reference,
  [$decor2.variable]: "none",
  "&:not([aria-current=page])": {
    cursor: "pointer",
    _hover: {
      [$decor2.variable]: "underline"
    },
    _focusVisible: {
      boxShadow: "outline"
    }
  }
});
var baseStyle75 = definePartsStyle48({
  link: baseStyleLink2
});
var breadcrumbTheme2 = defineMultiStyleConfig48({
  baseStyle: baseStyle75
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-MBVM6PEK.mjs
var baseStyle76 = defineStyle2({
  lineHeight: "1.2",
  borderRadius: "md",
  fontWeight: "semibold",
  transitionProperty: "common",
  transitionDuration: "normal",
  _focusVisible: {
    boxShadow: "outline"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    _disabled: {
      bg: "initial"
    }
  }
});
var variantGhost2 = defineStyle2((props) => {
  const { colorScheme: c, theme: theme3 } = props;
  if (c === "gray") {
    return {
      color: mode2(`gray.800`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode2(`gray.100`, `whiteAlpha.200`)(props)
      },
      _active: { bg: mode2(`gray.200`, `whiteAlpha.300`)(props) }
    };
  }
  const darkHoverBg = transparentize3(`${c}.200`, 0.12)(theme3);
  const darkActiveBg = transparentize3(`${c}.200`, 0.24)(theme3);
  return {
    color: mode2(`${c}.600`, `${c}.200`)(props),
    bg: "transparent",
    _hover: {
      bg: mode2(`${c}.50`, darkHoverBg)(props)
    },
    _active: {
      bg: mode2(`${c}.100`, darkActiveBg)(props)
    }
  };
});
var variantOutline6 = defineStyle2((props) => {
  const { colorScheme: c } = props;
  const borderColor = mode2(`gray.200`, `whiteAlpha.300`)(props);
  return {
    border: "1px solid",
    borderColor: c === "gray" ? borderColor : "currentColor",
    ".chakra-button__group[data-attached][data-orientation=horizontal] > &:not(:last-of-type)": { marginEnd: "-1px" },
    ".chakra-button__group[data-attached][data-orientation=vertical] > &:not(:last-of-type)": { marginBottom: "-1px" },
    ...runIfFn5(variantGhost2, props)
  };
});
var accessibleColorMap2 = {
  yellow: {
    bg: "yellow.400",
    color: "black",
    hoverBg: "yellow.500",
    activeBg: "yellow.600"
  },
  cyan: {
    bg: "cyan.400",
    color: "black",
    hoverBg: "cyan.500",
    activeBg: "cyan.600"
  }
};
var variantSolid6 = defineStyle2((props) => {
  var _a10;
  const { colorScheme: c } = props;
  if (c === "gray") {
    const bg2 = mode2(`gray.100`, `whiteAlpha.200`)(props);
    return {
      bg: bg2,
      color: mode2(`gray.800`, `whiteAlpha.900`)(props),
      _hover: {
        bg: mode2(`gray.200`, `whiteAlpha.300`)(props),
        _disabled: {
          bg: bg2
        }
      },
      _active: { bg: mode2(`gray.300`, `whiteAlpha.400`)(props) }
    };
  }
  const {
    bg = `${c}.500`,
    color: color4 = "white",
    hoverBg = `${c}.600`,
    activeBg = `${c}.700`
  } = (_a10 = accessibleColorMap2[c]) != null ? _a10 : {};
  const background4 = mode2(bg, `${c}.200`)(props);
  return {
    bg: background4,
    color: mode2(color4, `gray.800`)(props),
    _hover: {
      bg: mode2(hoverBg, `${c}.300`)(props),
      _disabled: {
        bg: background4
      }
    },
    _active: { bg: mode2(activeBg, `${c}.400`)(props) }
  };
});
var variantLink2 = defineStyle2((props) => {
  const { colorScheme: c } = props;
  return {
    padding: 0,
    height: "auto",
    lineHeight: "normal",
    verticalAlign: "baseline",
    color: mode2(`${c}.500`, `${c}.200`)(props),
    _hover: {
      textDecoration: "underline",
      _disabled: {
        textDecoration: "none"
      }
    },
    _active: {
      color: mode2(`${c}.700`, `${c}.500`)(props)
    }
  };
});
var variantUnstyled6 = defineStyle2({
  bg: "none",
  color: "inherit",
  display: "inline",
  lineHeight: "inherit",
  m: "0",
  p: "0"
});
var variants20 = {
  ghost: variantGhost2,
  outline: variantOutline6,
  solid: variantSolid6,
  link: variantLink2,
  unstyled: variantUnstyled6
};
var sizes43 = {
  lg: defineStyle2({
    h: "12",
    minW: "12",
    fontSize: "lg",
    px: "6"
  }),
  md: defineStyle2({
    h: "10",
    minW: "10",
    fontSize: "md",
    px: "4"
  }),
  sm: defineStyle2({
    h: "8",
    minW: "8",
    fontSize: "sm",
    px: "3"
  }),
  xs: defineStyle2({
    h: "6",
    minW: "6",
    fontSize: "xs",
    px: "2"
  })
};
var buttonTheme2 = defineStyleConfig2({
  baseStyle: baseStyle76,
  variants: variants20,
  sizes: sizes43,
  defaultProps: {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-F7CKIHPM.mjs
var { definePartsStyle: definePartsStyle49, defineMultiStyleConfig: defineMultiStyleConfig49 } = createMultiStyleConfigHelpers2(cardAnatomy2.keys);
var $bg29 = cssVar4("card-bg");
var $padding4 = cssVar4("card-padding");
var $shadow8 = cssVar4("card-shadow");
var $radius2 = cssVar4("card-radius");
var $border7 = cssVar4("card-border-width", "0");
var $borderColor2 = cssVar4("card-border-color");
var baseStyle77 = definePartsStyle49({
  container: {
    [$bg29.variable]: "colors.chakra-body-bg",
    backgroundColor: $bg29.reference,
    boxShadow: $shadow8.reference,
    borderRadius: $radius2.reference,
    color: "chakra-body-text",
    borderWidth: $border7.reference,
    borderColor: $borderColor2.reference
  },
  body: {
    padding: $padding4.reference,
    flex: "1 1 0%"
  },
  header: {
    padding: $padding4.reference
  },
  footer: {
    padding: $padding4.reference
  }
});
var sizes44 = {
  sm: definePartsStyle49({
    container: {
      [$radius2.variable]: "radii.base",
      [$padding4.variable]: "space.3"
    }
  }),
  md: definePartsStyle49({
    container: {
      [$radius2.variable]: "radii.md",
      [$padding4.variable]: "space.5"
    }
  }),
  lg: definePartsStyle49({
    container: {
      [$radius2.variable]: "radii.xl",
      [$padding4.variable]: "space.7"
    }
  })
};
var variants21 = {
  elevated: definePartsStyle49({
    container: {
      [$shadow8.variable]: "shadows.base",
      _dark: {
        [$bg29.variable]: "colors.gray.700"
      }
    }
  }),
  outline: definePartsStyle49({
    container: {
      [$border7.variable]: "1px",
      [$borderColor2.variable]: "colors.chakra-border-color"
    }
  }),
  filled: definePartsStyle49({
    container: {
      [$bg29.variable]: "colors.chakra-subtle-bg"
    }
  }),
  unstyled: {
    body: {
      [$padding4.variable]: 0
    },
    header: {
      [$padding4.variable]: 0
    },
    footer: {
      [$padding4.variable]: 0
    }
  }
};
var cardTheme2 = defineMultiStyleConfig49({
  baseStyle: baseStyle77,
  variants: variants21,
  sizes: sizes44,
  defaultProps: {
    variant: "elevated",
    size: "md"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-OB7MMEC3.mjs
var $size9 = cssVar5("close-button-size");
var $bg30 = cssVar5("close-button-bg");
var baseStyle78 = defineStyle2({
  w: [$size9.reference],
  h: [$size9.reference],
  borderRadius: "md",
  transitionProperty: "common",
  transitionDuration: "normal",
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed",
    boxShadow: "none"
  },
  _hover: {
    [$bg30.variable]: "colors.blackAlpha.100",
    _dark: {
      [$bg30.variable]: "colors.whiteAlpha.100"
    }
  },
  _active: {
    [$bg30.variable]: "colors.blackAlpha.200",
    _dark: {
      [$bg30.variable]: "colors.whiteAlpha.200"
    }
  },
  _focusVisible: {
    boxShadow: "outline"
  },
  bg: $bg30.reference
});
var sizes45 = {
  lg: defineStyle2({
    [$size9.variable]: "sizes.10",
    fontSize: "md"
  }),
  md: defineStyle2({
    [$size9.variable]: "sizes.8",
    fontSize: "xs"
  }),
  sm: defineStyle2({
    [$size9.variable]: "sizes.6",
    fontSize: "2xs"
  })
};
var closeButtonTheme2 = defineStyleConfig2({
  baseStyle: baseStyle78,
  sizes: sizes45,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-K3RH7Y2L.mjs
var { variants: variants22, defaultProps: defaultProps2 } = badgeTheme2;
var baseStyle79 = defineStyle2({
  fontFamily: "mono",
  fontSize: "sm",
  px: "0.2em",
  borderRadius: "sm",
  bg: vars2.bg.reference,
  color: vars2.color.reference,
  boxShadow: vars2.shadow.reference
});
var codeTheme2 = defineStyleConfig2({
  baseStyle: baseStyle79,
  variants: variants22,
  defaultProps: defaultProps2
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-TECE6HDR.mjs
var baseStyle80 = defineStyle2({
  w: "100%",
  mx: "auto",
  maxW: "prose",
  px: "4"
});
var containerTheme2 = defineStyleConfig2({
  baseStyle: baseStyle80
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-5S44M2O4.mjs
var baseStyle81 = defineStyle2({
  opacity: 0.6,
  borderColor: "inherit"
});
var variantSolid7 = defineStyle2({
  borderStyle: "solid"
});
var variantDashed2 = defineStyle2({
  borderStyle: "dashed"
});
var variants23 = {
  solid: variantSolid7,
  dashed: variantDashed2
};
var dividerTheme2 = defineStyleConfig2({
  baseStyle: baseStyle81,
  variants: variants23,
  defaultProps: {
    variant: "solid"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-J7AGDWFO.mjs
var { definePartsStyle: definePartsStyle50, defineMultiStyleConfig: defineMultiStyleConfig50 } = createMultiStyleConfigHelpers2(accordionAnatomy2.keys);
var baseStyleContainer9 = defineStyle2({
  borderTopWidth: "1px",
  borderColor: "inherit",
  _last: {
    borderBottomWidth: "1px"
  }
});
var baseStyleButton4 = defineStyle2({
  transitionProperty: "common",
  transitionDuration: "normal",
  fontSize: "md",
  _focusVisible: {
    boxShadow: "outline"
  },
  _hover: {
    bg: "blackAlpha.50"
  },
  _disabled: {
    opacity: 0.4,
    cursor: "not-allowed"
  },
  px: "4",
  py: "2"
});
var baseStylePanel2 = defineStyle2({
  pt: "2",
  px: "4",
  pb: "5"
});
var baseStyleIcon14 = defineStyle2({
  fontSize: "1.25em"
});
var baseStyle82 = definePartsStyle50({
  container: baseStyleContainer9,
  button: baseStyleButton4,
  panel: baseStylePanel2,
  icon: baseStyleIcon14
});
var accordionTheme2 = defineMultiStyleConfig50({ baseStyle: baseStyle82 });

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-BNQWYFTH.mjs
var { definePartsStyle: definePartsStyle51, defineMultiStyleConfig: defineMultiStyleConfig51 } = createMultiStyleConfigHelpers2(alertAnatomy2.keys);
var $fg12 = cssVar4("alert-fg");
var $bg31 = cssVar4("alert-bg");
var baseStyle83 = definePartsStyle51({
  container: {
    bg: $bg31.reference,
    px: "4",
    py: "3"
  },
  title: {
    fontWeight: "bold",
    lineHeight: "6",
    marginEnd: "2"
  },
  description: {
    lineHeight: "6"
  },
  icon: {
    color: $fg12.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "6"
  },
  spinner: {
    color: $fg12.reference,
    flexShrink: 0,
    marginEnd: "3",
    w: "5",
    h: "5"
  }
});
function getBg2(props) {
  const { theme: theme3, colorScheme: c } = props;
  const darkBg = transparentize3(`${c}.200`, 0.16)(theme3);
  return {
    light: `colors.${c}.100`,
    dark: darkBg
  };
}
var variantSubtle4 = definePartsStyle51((props) => {
  const { colorScheme: c } = props;
  const bg = getBg2(props);
  return {
    container: {
      [$fg12.variable]: `colors.${c}.600`,
      [$bg31.variable]: bg.light,
      _dark: {
        [$fg12.variable]: `colors.${c}.200`,
        [$bg31.variable]: bg.dark
      }
    }
  };
});
var variantLeftAccent2 = definePartsStyle51((props) => {
  const { colorScheme: c } = props;
  const bg = getBg2(props);
  return {
    container: {
      [$fg12.variable]: `colors.${c}.600`,
      [$bg31.variable]: bg.light,
      _dark: {
        [$fg12.variable]: `colors.${c}.200`,
        [$bg31.variable]: bg.dark
      },
      paddingStart: "3",
      borderStartWidth: "4px",
      borderStartColor: $fg12.reference
    }
  };
});
var variantTopAccent2 = definePartsStyle51((props) => {
  const { colorScheme: c } = props;
  const bg = getBg2(props);
  return {
    container: {
      [$fg12.variable]: `colors.${c}.600`,
      [$bg31.variable]: bg.light,
      _dark: {
        [$fg12.variable]: `colors.${c}.200`,
        [$bg31.variable]: bg.dark
      },
      pt: "2",
      borderTopWidth: "4px",
      borderTopColor: $fg12.reference
    }
  };
});
var variantSolid8 = definePartsStyle51((props) => {
  const { colorScheme: c } = props;
  return {
    container: {
      [$fg12.variable]: `colors.white`,
      [$bg31.variable]: `colors.${c}.600`,
      _dark: {
        [$fg12.variable]: `colors.gray.900`,
        [$bg31.variable]: `colors.${c}.200`
      },
      color: $fg12.reference
    }
  };
});
var variants24 = {
  subtle: variantSubtle4,
  "left-accent": variantLeftAccent2,
  "top-accent": variantTopAccent2,
  solid: variantSolid8
};
var alertTheme2 = defineMultiStyleConfig51({
  baseStyle: baseStyle83,
  variants: variants24,
  defaultProps: {
    variant: "subtle",
    colorScheme: "blue"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-Q5ZQE4MD.mjs
var { definePartsStyle: definePartsStyle52, defineMultiStyleConfig: defineMultiStyleConfig52 } = createMultiStyleConfigHelpers2(avatarAnatomy2.keys);
var $border8 = cssVar4("avatar-border-color");
var $bg32 = cssVar4("avatar-bg");
var $fs2 = cssVar4("avatar-font-size");
var $size10 = cssVar4("avatar-size");
var baseStyleBadge2 = defineStyle2({
  borderRadius: "full",
  border: "0.2em solid",
  borderColor: $border8.reference,
  [$border8.variable]: "white",
  _dark: {
    [$border8.variable]: "colors.gray.800"
  }
});
var baseStyleExcessLabel2 = defineStyle2({
  bg: $bg32.reference,
  fontSize: $fs2.reference,
  width: $size10.reference,
  height: $size10.reference,
  lineHeight: "1",
  [$bg32.variable]: "colors.gray.200",
  _dark: {
    [$bg32.variable]: "colors.whiteAlpha.400"
  }
});
var baseStyleContainer10 = defineStyle2((props) => {
  const { name, theme: theme3 } = props;
  const bg = name ? randomColor2({ string: name }) : "colors.gray.400";
  const isBgDark = isDark2(bg)(theme3);
  let color4 = "white";
  if (!isBgDark)
    color4 = "gray.800";
  return {
    bg: $bg32.reference,
    fontSize: $fs2.reference,
    color: color4,
    borderColor: $border8.reference,
    verticalAlign: "top",
    width: $size10.reference,
    height: $size10.reference,
    "&:not([data-loaded])": {
      [$bg32.variable]: bg
    },
    [$border8.variable]: "colors.white",
    _dark: {
      [$border8.variable]: "colors.gray.800"
    }
  };
});
var baseStyleLabel10 = defineStyle2({
  fontSize: $fs2.reference,
  lineHeight: "1"
});
var baseStyle84 = definePartsStyle52((props) => ({
  badge: runIfFn5(baseStyleBadge2, props),
  excessLabel: runIfFn5(baseStyleExcessLabel2, props),
  container: runIfFn5(baseStyleContainer10, props),
  label: baseStyleLabel10
}));
function getSize8(size3) {
  const themeSize = size3 !== "100%" ? sizes_default2[size3] : void 0;
  return definePartsStyle52({
    container: {
      [$size10.variable]: themeSize != null ? themeSize : size3,
      [$fs2.variable]: `calc(${themeSize != null ? themeSize : size3} / 2.5)`
    },
    excessLabel: {
      [$size10.variable]: themeSize != null ? themeSize : size3,
      [$fs2.variable]: `calc(${themeSize != null ? themeSize : size3} / 2.5)`
    }
  });
}
var sizes46 = {
  "2xs": getSize8(4),
  xs: getSize8(6),
  sm: getSize8(8),
  md: getSize8(12),
  lg: getSize8(16),
  xl: getSize8(24),
  "2xl": getSize8(32),
  full: getSize8("100%")
};
var avatarTheme2 = defineMultiStyleConfig52({
  baseStyle: baseStyle84,
  sizes: sizes46,
  defaultProps: {
    size: "md"
  }
});

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-P7SDT22G.mjs
var components2 = {
  Accordion: accordionTheme2,
  Alert: alertTheme2,
  Avatar: avatarTheme2,
  Badge: badgeTheme2,
  Breadcrumb: breadcrumbTheme2,
  Button: buttonTheme2,
  Checkbox: checkboxTheme2,
  CloseButton: closeButtonTheme2,
  Code: codeTheme2,
  Container: containerTheme2,
  Divider: dividerTheme2,
  Drawer: drawerTheme2,
  Editable: editableTheme2,
  Form: formTheme2,
  FormError: formErrorTheme2,
  FormLabel: formLabelTheme2,
  Heading: headingTheme2,
  Input: inputTheme2,
  Kbd: kbdTheme2,
  Link: linkTheme2,
  List: listTheme2,
  Menu: menuTheme2,
  Modal: modalTheme2,
  NumberInput: numberInputTheme2,
  PinInput: pinInputTheme2,
  Popover: popoverTheme2,
  Progress: progressTheme2,
  Radio: radioTheme2,
  Select: selectTheme2,
  Skeleton: skeletonTheme2,
  SkipLink: skipLinkTheme2,
  Slider: sliderTheme2,
  Spinner: spinnerTheme2,
  Stat: statTheme2,
  Switch: switchTheme2,
  Table: tableTheme2,
  Tabs: tabsTheme2,
  Tag: tagTheme2,
  Textarea: textareaTheme2,
  Tooltip: tooltipTheme2,
  Card: cardTheme2,
  Stepper: stepperTheme2
};

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-5GOSZLB7.mjs
var semanticTokens2 = {
  colors: {
    "chakra-body-text": { _light: "gray.800", _dark: "whiteAlpha.900" },
    "chakra-body-bg": { _light: "white", _dark: "gray.800" },
    "chakra-border-color": { _light: "gray.200", _dark: "whiteAlpha.300" },
    "chakra-inverse-text": { _light: "white", _dark: "gray.800" },
    "chakra-subtle-bg": { _light: "gray.100", _dark: "gray.700" },
    "chakra-subtle-text": { _light: "gray.600", _dark: "gray.400" },
    "chakra-placeholder-color": { _light: "gray.500", _dark: "whiteAlpha.400" }
  }
};

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/chunk-3F7U33P5.mjs
var styles2 = {
  global: {
    body: {
      fontFamily: "body",
      color: "chakra-body-text",
      bg: "chakra-body-bg",
      transitionProperty: "background-color",
      transitionDuration: "normal",
      lineHeight: "base"
    },
    "*::placeholder": {
      color: "chakra-placeholder-color"
    },
    "*, *::before, &::after": {
      borderColor: "chakra-border-color"
    }
  }
};

// node_modules/@chakra-ui/toast/node_modules/@chakra-ui/theme/dist/index.mjs
var direction2 = "ltr";
var config2 = {
  useSystemColorMode: false,
  initialColorMode: "light",
  cssVarPrefix: "chakra"
};
var theme2 = {
  semanticTokens: semanticTokens2,
  direction: direction2,
  ...foundations2,
  components: components2,
  styles: styles2,
  config: config2
};
var baseTheme2 = {
  semanticTokens: semanticTokens2,
  direction: direction2,
  components: {},
  ...foundations2,
  styles: styles2,
  config: config2
};

// node_modules/@chakra-ui/toast/dist/chunk-FOFDA6UD.mjs
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var defaults = {
  duration: 5e3,
  variant: "solid"
};
var defaultStandaloneParam = {
  theme: theme2,
  colorMode: "light",
  toggleColorMode: () => {
  },
  setColorMode: () => {
  },
  defaultOptions: defaults,
  forced: false
};
function createStandaloneToast({
  theme: theme3 = defaultStandaloneParam.theme,
  colorMode = defaultStandaloneParam.colorMode,
  toggleColorMode = defaultStandaloneParam.toggleColorMode,
  setColorMode = defaultStandaloneParam.setColorMode,
  defaultOptions = defaultStandaloneParam.defaultOptions,
  motionVariants,
  toastSpacing,
  component,
  forced
} = defaultStandaloneParam) {
  const colorModeContextValue = {
    colorMode,
    setColorMode,
    toggleColorMode,
    forced
  };
  const ToastContainer = () => (0, import_jsx_runtime18.jsx)(ThemeProvider2, { theme: theme3, children: (0, import_jsx_runtime18.jsx)(ColorModeContext.Provider, { value: colorModeContextValue, children: (0, import_jsx_runtime18.jsx)(
    ToastProvider,
    {
      defaultOptions,
      motionVariants,
      toastSpacing,
      component
    }
  ) }) });
  return {
    ToastContainer,
    toast: createToastFn(theme3.direction, defaultOptions)
  };
}
export {
  Toast,
  ToastOptionProvider,
  ToastProvider,
  createRenderToast,
  createStandaloneToast,
  createToastFn,
  getToastPlacement,
  useToast
};
//# sourceMappingURL=@chakra-ui_toast.js.map
